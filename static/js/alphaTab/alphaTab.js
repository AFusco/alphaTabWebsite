/**
 * alphaTab v0.9.8 (private-develop, build 0)
 * 
 * Copyright Â© 2020, Daniel Kuschny and Contributors, All rights reserved.
 * 
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * SoundFont loading and Audio Synthesis based on TinySoundFont (licensed under MIT)
 * Copyright (C) 2017, 2018 Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
 * 
 * TinySoundFont is based on SFZero (licensed under MIT)
 * Copyright (C) 2012 Steve Folta (https://github.com/stevefolta/SFZero)
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = global || self, factory(global.alphaTab = {}));
}(this, (function (exports) { 'use strict';

    class ArgumentError extends Error {
        constructor(message, paramName) {
            super(message);
            this.paramName = paramName !== null && paramName !== void 0 ? paramName : '';
        }
    }

    class ArgumentNullError extends ArgumentError {
        constructor(message, paramName) {
            super(message, paramName);
        }
    }

    class FormatError extends Error {
        constructor(message = '') {
            super(message);
        }
    }

    /**
     * @partial
     */
    class Platform {
        /**
         * @target web
         */
        static get isRunningInWorker() {
            return 'WorkerGlobalScope' in globalThis;
        }
        /**
         * @target web
         */
        static get supportsFontsApi() {
            return 'fonts' in document && 'load' in document.fonts;
        }
        /**
         * @target web
         */
        static get supportsTextDecoder() {
            return 'TextDecoder' in globalThis;
        }
        /**
         * @target web
         */
        static toString(data, encoding) {
            if (Platform.supportsTextDecoder) {
                let detectedEncoding = Platform.detectEncoding(data);
                if (detectedEncoding) {
                    encoding = detectedEncoding;
                }
                if (!encoding) {
                    encoding = 'utf-8';
                }
                let decoder = new TextDecoder(encoding);
                return decoder.decode(data);
            }
            else {
                // manual UTF8 decoding for older browsers
                let s = '';
                let i = 0;
                while (i < data.length) {
                    let c = data[i++];
                    if (c < 0x80) {
                        if (c === 0) {
                            break;
                        }
                        s += String.fromCharCode(c);
                    }
                    else if (c < 0xe0) {
                        s += String.fromCharCode(((c & 0x3f) << 6) | (data[i++] & 0x7f));
                    }
                    else if (c < 0xf0) {
                        s += String.fromCharCode(((c & 0x1f) << 12) | ((data[i++] & 0x7f) << 6) | (data[i++] & 0x7f));
                    }
                    else {
                        let u = ((c & 0x0f) << 18) |
                            ((data[i++] & 0x7f) << 12) |
                            ((data[i++] & 0x7f) << 6) |
                            (data[i++] & 0x7f);
                        s += String.fromCharCode((u >> 18) + 0xd7c0);
                        s += String.fromCharCode((u & 0x3ff) | 0xdc00);
                    }
                }
                return s;
            }
        }
        static stringToByteArray(contents) {
            let byteArray = new Uint8Array(contents.length);
            for (let i = 0; i < contents.length; i++) {
                byteArray[i] = contents.charCodeAt(i);
            }
            return byteArray;
        }
        static newGuid() {
            return (Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1) +
                Math.floor((1 + Math.random()) * 0x10000)
                    .toString(16)
                    .substring(1) +
                '-' +
                Math.floor((1 + Math.random()) * 0x10000)
                    .toString(16)
                    .substring(1) +
                '-' +
                Math.floor((1 + Math.random()) * 0x10000)
                    .toString(16)
                    .substring(1) +
                '-' +
                Math.floor((1 + Math.random()) * 0x10000)
                    .toString(16)
                    .substring(1) +
                '-' +
                Math.floor((1 + Math.random()) * 0x10000)
                    .toString(16)
                    .substring(1) +
                Math.floor((1 + Math.random()) * 0x10000)
                    .toString(16)
                    .substring(1) +
                Math.floor((1 + Math.random()) * 0x10000)
                    .toString(16)
                    .substring(1));
        }
        static toDouble(bytes) {
            let array = new Float64Array(bytes.buffer);
            return array[0];
        }
        static toFloat(bytes) {
            let array = new Float32Array(bytes.buffer);
            return array[0];
        }
        /**
         * @target web
         */
        static throttle(action, delay) {
            let timeoutId = 0;
            return () => {
                window.clearTimeout(timeoutId);
                timeoutId = window.setTimeout(action, delay);
            };
        }
        static isCharNumber(c, allowSign = true) {
            return (allowSign && c === 0x2d) || (c >= 0x30 && c <= 0x39);
        }
        static isWhiteSpace(c) {
            return c === 0x20 || c === 0x0b || c === 0x0d || c === 0x0a || c === 0x09;
        }
        static isAlmostEqualTo(a, b) {
            return Math.abs(a - b) < 0.00001;
        }
        static toHexString(n, digits = 0) {
            let s = '';
            let hexChars = '0123456789ABCDEF';
            do {
                s = String.fromCharCode(hexChars.charCodeAt(n & 15)) + s;
                n = n >> 4;
            } while (n > 0);
            while (s.length < digits) {
                s = '0' + s;
            }
            return s;
        }
        static detectEncoding(data) {
            if (data.length > 2 && data[0] === 0xfe && data[1] === 0xff) {
                return 'utf-16be';
            }
            if (data.length > 2 && data[0] === 0xff && data[1] === 0xfe) {
                return 'utf-16le';
            }
            if (data.length > 4 && data[0] === 0x00 && data[1] === 0x00 && data[2] === 0xfe && data[3] === 0xff) {
                return 'utf-32be';
            }
            if (data.length > 4 && data[0] === 0xff && data[1] === 0xfe && data[2] === 0x00 && data[3] === 0x00) {
                return 'utf-32le';
            }
            return null;
        }
    }

    /**
     * @json_immutable
     */
    class Color {
        /**
         * Initializes a new instance of the {@link Color} class.
         * @param r The red component.
         * @param g The green component.
         * @param b The blue component.
         * @param a The alpha component.
         */
        constructor(r, g, b, a = 0xff) {
            /**
             * Gets or sets the raw RGBA value.
             */
            this.raw = 0;
            this.raw = 0;
            this.raw = ((a & 0xff) << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
            this.updateRgba();
        }
        updateRgba() {
            if (this.a === 0xff) {
                this.rgba =
                    '#' +
                        Platform.toHexString(this.r, 2) +
                        Platform.toHexString(this.g, 2) +
                        Platform.toHexString(this.b, 2);
            }
            else {
                this.rgba = `rgba(${this.r},${this.g},${this.b},${this.a / 255.0})`;
            }
        }
        get a() {
            return (this.raw >> 24) & 0xff;
        }
        get r() {
            return (this.raw >> 16) & 0xff;
        }
        get g() {
            return (this.raw >> 8) & 0xff;
        }
        get b() {
            return this.raw & 0xff;
        }
        static random(opacity = 100) {
            return new Color((Math.random() * 255) | 0, (Math.random() * 255) | 0, (Math.random() * 255) | 0, opacity);
        }
        /**
         * @target web
         */
        static fromJson(json) {
            if (!json) {
                return null;
            }
            if (json instanceof Color) {
                return json;
            }
            switch (typeof json) {
                case 'number':
                    let c = new Color(0, 0, 0, 0);
                    c.raw = json | 0;
                    c.updateRgba();
                    return c;
                case 'string':
                    if (json.startsWith('#')) {
                        if (json.length === 4) {
                            // #RGB
                            return new Color(parseInt(json.substring(1, 1), 16) * 17, parseInt(json.substring(2, 1), 16) * 17, parseInt(json.substring(3, 1), 16) * 17);
                        }
                        if (json.length === 5) {
                            // #RGBA
                            return new Color(parseInt(json.substring(1, 1), 16) * 17, parseInt(json.substring(2, 1), 16) * 17, parseInt(json.substring(3, 1), 16) * 17, parseInt(json.substring(4, 1), 16) * 17);
                        }
                        if (json.length === 7) {
                            // #RRGGBB
                            return new Color(parseInt(json.substring(1, 2), 16), parseInt(json.substring(3, 2), 16), parseInt(json.substring(5, 2), 16));
                        }
                        if (json.length === 9) {
                            // #RRGGBBAA
                            return new Color(parseInt(json.substring(1, 2), 16), parseInt(json.substring(3, 2), 16), parseInt(json.substring(5, 2), 16), parseInt(json.substring(7, 2), 16));
                        }
                    }
                    else if (json.startsWith('rgba') || json.startsWith('rgb')) {
                        const start = json.indexOf('(');
                        const end = json.lastIndexOf(')');
                        if (start === -1 || end === -1) {
                            throw new FormatError('No values specified for rgb/rgba function');
                        }
                        const numbers = json.substring(start + 1, end - start - 1).split(',');
                        if (numbers.length === 3) {
                            return new Color(parseInt(numbers[0]), parseInt(numbers[1]), parseInt(numbers[2]));
                        }
                        if (numbers.length === 4) {
                            return new Color(parseInt(numbers[0]), parseInt(numbers[1]), parseInt(numbers[2]), parseFloat(numbers[3]) * 255);
                        }
                    }
                    break;
            }
            throw new FormatError('Unsupported format for color');
        }
        /**
         * @target web
         */
        static toJson(obj) {
            return obj.raw;
        }
    }
    Color.BlackRgb = '#000000';

    /**
     * Lists all flags for font styles.
     */
    var FontStyle;
    (function (FontStyle) {
        /**
         * No flags.
         */
        FontStyle[FontStyle["Plain"] = 0] = "Plain";
        /**
         * Font is bold
         */ FontStyle[FontStyle["Bold"] = 1] = "Bold";
        /**
         * Font is italic.
         */ FontStyle[FontStyle["Italic"] = 2] = "Italic";
    })(FontStyle || (FontStyle = {}));
    /**
     * @json_immutable
     */
    class Font {
        /**
         * Initializes a new instance of the {@link Font} class.
         * @param family The family.
         * @param size The size.
         * @param style The style.
         */
        constructor(family, size, style = FontStyle.Plain) {
            this._cssScale = 0.0;
            this.family = family;
            this.size = size;
            this.style = style;
            this._css = this.toCssString(1);
        }
        get isBold() {
            return (this.style & FontStyle.Bold) !== 0;
        }
        get isItalic() {
            return (this.style & FontStyle.Italic) !== 0;
        }
        clone() {
            return new Font(this.family, this.size, this.style);
        }
        toCssString(scale) {
            if (!this._css || !(Math.abs(scale - this._cssScale) < 0.01)) {
                let buf = '';
                if (this.isBold) {
                    buf += 'bold ';
                }
                if (this.isItalic) {
                    buf += 'italic ';
                }
                buf += this.size * scale;
                buf += 'px ';
                buf += "'";
                buf += this.family;
                buf += "'";
                this._css = buf;
                this._cssScale = scale;
            }
            return this._css;
        }
        /**
         * @target web
         */
        static fromJson(value) {
            if (!value) {
                return null;
            }
            if (value instanceof Font) {
                return value;
            }
            if (typeof value === 'object' && value.family) {
                return new Font(value.family, value.size, value.style);
            }
            if (typeof value === 'string' && !Platform.isRunningInWorker) {
                let el = document.createElement('span');
                el.setAttribute('style', 'font: ' + value);
                let style = el.style;
                if (!style.fontFamily) {
                    style.fontFamily = 'sans-serif';
                }
                let family = style.fontFamily;
                if ((family.startsWith("'") && family.endsWith("'")) || (family.startsWith('"') && family.endsWith('"'))) {
                    family = family.substr(1, family.length - 2);
                }
                let fontSizeString = style.fontSize.toLowerCase();
                let fontSize = 0;
                // as per https://websemantics.uk/articles/font-size-conversion/
                switch (fontSizeString) {
                    case 'xx-small':
                        fontSize = 7;
                        break;
                    case 'x-small':
                        fontSize = 10;
                        break;
                    case 'small':
                    case 'smaller':
                        fontSize = 13;
                        break;
                    case 'medium':
                        fontSize = 16;
                        break;
                    case 'large':
                    case 'larger':
                        fontSize = 18;
                        break;
                    case 'x-large':
                        fontSize = 24;
                        break;
                    case 'xx-large':
                        fontSize = 32;
                        break;
                    default:
                        try {
                            if (fontSizeString.endsWith('em')) {
                                fontSize = parseFloat(fontSizeString.substr(0, fontSizeString.length - 2)) * 16;
                            }
                            else if (fontSizeString.endsWith('pt')) {
                                fontSize = (parseFloat(fontSizeString.substr(0, fontSizeString.length - 2)) * 16.0) / 12.0;
                            }
                            else if (fontSizeString.endsWith('px')) {
                                fontSize = parseFloat(fontSizeString.substr(0, fontSizeString.length - 2));
                            }
                            else {
                                fontSize = 12;
                            }
                        }
                        catch (e) {
                            fontSize = 12;
                        }
                        break;
                }
                let fontStyle = FontStyle.Plain;
                if (style.fontStyle === 'italic') {
                    fontStyle |= FontStyle.Italic;
                }
                let fontWeightString = style.fontWeight.toLowerCase();
                switch (fontWeightString) {
                    case 'normal':
                    case 'lighter':
                        break;
                    default:
                        fontStyle |= FontStyle.Bold;
                        break;
                }
                return new Font(family, fontSize, fontStyle);
            }
            return null;
        }
        /**
         * @target web
         */
        static toJson(font) {
            return {
                family: font.family,
                size: font.size,
                style: font.style
            };
        }
    }

    var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    /**
     * This public class contains central definitions for controlling the visual appearance.
     * @json
     */
    class RenderingResources {
        constructor() {
            /**
             * Gets or sets the font to use for displaying the songs copyright information in the header of the music sheet.
             */
            this.copyrightFont = new Font(RenderingResources.sansFont, 12, FontStyle.Bold);
            /**
             * Gets or sets the font to use for displaying the songs title in the header of the music sheet.
             */
            this.titleFont = new Font(RenderingResources.serifFont, 32, FontStyle.Plain);
            /**
             * Gets or sets the font to use for displaying the songs subtitle in the header of the music sheet.
             */
            this.subTitleFont = new Font(RenderingResources.serifFont, 20, FontStyle.Plain);
            /**
             * Gets or sets the font to use for displaying the lyrics information in the header of the music sheet.
             */
            this.wordsFont = new Font(RenderingResources.serifFont, 15, FontStyle.Plain);
            /**
             * Gets or sets the font to use for displaying certain effect related elements in the music sheet.
             */
            this.effectFont = new Font(RenderingResources.serifFont, 12, FontStyle.Italic);
            /**
             * Gets or sets the font to use for displaying the fretboard numbers in chord diagrams.
             */
            this.fretboardNumberFont = new Font(RenderingResources.sansFont, 11, FontStyle.Plain);
            /**
             * Gets or sets the font to use for displaying the guitar tablature numbers in the music sheet.
             */
            this.tablatureFont = new Font(RenderingResources.sansFont, 13, FontStyle.Plain);
            /**
             * Gets or sets the font to use for grace notation related texts in the music sheet.
             */
            this.graceFont = new Font(RenderingResources.sansFont, 11, FontStyle.Plain);
            /**
             * Gets or sets the color to use for rendering the lines of staves.
             */
            this.staffLineColor = new Color(165, 165, 165, 0xff);
            /**
             * Gets or sets the color to use for rendering bar separators, the accolade and repeat signs.
             */
            this.barSeparatorColor = new Color(34, 34, 17, 0xff);
            /**
             * Gets or sets the font to use for displaying the bar numbers above the music sheet.
             */
            this.barNumberFont = new Font(RenderingResources.sansFont, 11, FontStyle.Plain);
            /**
             * Gets or sets the color to use for displaying the bar numbers above the music sheet.
             */
            this.barNumberColor = new Color(200, 0, 0, 0xff);
            /**
             * Gets or sets the font to use for displaying finger information in the music sheet.
             */
            this.fingeringFont = new Font(RenderingResources.serifFont, 14, FontStyle.Plain);
            /**
             * Gets or sets the font to use for section marker labels shown above the music sheet.
             */
            this.markerFont = new Font(RenderingResources.serifFont, 14, FontStyle.Bold);
            /**
             * Gets or sets the color to use for music notation elements of the primary voice.
             */
            this.mainGlyphColor = new Color(0, 0, 0, 0xff);
            /**
             * Gets or sets the color to use for music notation elements of the secondary voices.
             */
            this.secondaryGlyphColor = new Color(0, 0, 0, 100);
            /**
             * Gets or sets the color to use for displaying the song information above the music sheet.
             */
            this.scoreInfoColor = new Color(0, 0, 0, 0xff);
        }
        static toJson(obj) { var json = {}; obj.fillToJson(json); return json; }
        fillToJson(json) { json.sansFont = this.sansFont; json.serifFont = this.serifFont; json.copyrightFont = (Font.toJson(this.copyrightFont)); json.titleFont = (Font.toJson(this.titleFont)); json.subTitleFont = (Font.toJson(this.subTitleFont)); json.wordsFont = (Font.toJson(this.wordsFont)); json.effectFont = (Font.toJson(this.effectFont)); json.fretboardNumberFont = (Font.toJson(this.fretboardNumberFont)); json.tablatureFont = (Font.toJson(this.tablatureFont)); json.graceFont = (Font.toJson(this.graceFont)); json.staffLineColor = (Color.toJson(this.staffLineColor)); json.barSeparatorColor = (Color.toJson(this.barSeparatorColor)); json.barNumberFont = (Font.toJson(this.barNumberFont)); json.barNumberColor = (Color.toJson(this.barNumberColor)); json.fingeringFont = (Font.toJson(this.fingeringFont)); json.markerFont = (Font.toJson(this.markerFont)); json.mainGlyphColor = (Color.toJson(this.mainGlyphColor)); json.secondaryGlyphColor = (Color.toJson(this.secondaryGlyphColor)); json.scoreInfoColor = (Color.toJson(this.scoreInfoColor)); }
        static fromJson(json) { if (!json)
            return null; var obj = new RenderingResources(); obj.fillFromJson(json); return obj; }
        fillFromJson(json) { if (json)
            for (const $k in json)
                this.setProperty($k.toLowerCase(), json[$k]); }
        setProperty(property, value) { switch (property) {
            case "sansfont":
                this.sansFont = value;
                return true;
            case "seriffont":
                this.serifFont = value;
                return true;
            case "copyrightfont":
                this.copyrightFont = (Font.fromJson(value));
                return true;
            case "titlefont":
                this.titleFont = (Font.fromJson(value));
                return true;
            case "subtitlefont":
                this.subTitleFont = (Font.fromJson(value));
                return true;
            case "wordsfont":
                this.wordsFont = (Font.fromJson(value));
                return true;
            case "effectfont":
                this.effectFont = (Font.fromJson(value));
                return true;
            case "fretboardnumberfont":
                this.fretboardNumberFont = (Font.fromJson(value));
                return true;
            case "tablaturefont":
                this.tablatureFont = (Font.fromJson(value));
                return true;
            case "gracefont":
                this.graceFont = (Font.fromJson(value));
                return true;
            case "stafflinecolor":
                this.staffLineColor = (Color.fromJson(value));
                return true;
            case "barseparatorcolor":
                this.barSeparatorColor = (Color.fromJson(value));
                return true;
            case "barnumberfont":
                this.barNumberFont = (Font.fromJson(value));
                return true;
            case "barnumbercolor":
                this.barNumberColor = (Color.fromJson(value));
                return true;
            case "fingeringfont":
                this.fingeringFont = (Font.fromJson(value));
                return true;
            case "markerfont":
                this.markerFont = (Font.fromJson(value));
                return true;
            case "mainglyphcolor":
                this.mainGlyphColor = (Color.fromJson(value));
                return true;
            case "secondaryglyphcolor":
                this.secondaryGlyphColor = (Color.fromJson(value));
                return true;
            case "scoreinfocolor":
                this.scoreInfoColor = (Color.fromJson(value));
                return true;
        } return false; }
    }
    RenderingResources.sansFont = 'Arial';
    RenderingResources.serifFont = 'Georgia';
    __decorate([], RenderingResources, "toJson", null);

    (function (StaveProfile) {
        /**
         * The profile is auto detected by the track configurations.
         */
        StaveProfile[StaveProfile["Default"] = 0] = "Default";
        /**
         * Standard music notation and guitar tablature are rendered.
         */
        StaveProfile[StaveProfile["ScoreTab"] = 1] = "ScoreTab";
        /**
         * Only standard music notation is rendered.
         */
        StaveProfile[StaveProfile["Score"] = 2] = "Score";
        /**
         * Only guitar tablature is rendered.
         */
        StaveProfile[StaveProfile["Tab"] = 3] = "Tab";
        /**
         * Only guitar tablature is rendered, but also rests and time signatures are not shown.
         * This profile is typically used in multi-track scenarios.
         */
        StaveProfile[StaveProfile["TabMixed"] = 4] = "TabMixed";
    })(exports.StaveProfile || (exports.StaveProfile = {}));
    (function (LayoutMode) {
        /**
         * Bars are aligned in rows using a fixed width.
         */
        LayoutMode[LayoutMode["Page"] = 0] = "Page";
        /**
         * Bars are aligned horizontally in one row
         */
        LayoutMode[LayoutMode["Horizontal"] = 1] = "Horizontal";
    })(exports.LayoutMode || (exports.LayoutMode = {}));
    /**
     * The display settings control how the general layout and display of alphaTab is done.
     * @json
     */
    class DisplaySettings {
        constructor() {
            /**
             * Sets the zoom level of the rendered notation
             */
            this.scale = 1.0;
            /**
             * The default stretch force to use for layouting.
             */
            this.stretchForce = 1.0;
            /**
             * The layouting mode used to arrange the the notation.
             */
            this.layoutMode = exports.LayoutMode.Page;
            /**
             * The stave profile to use.
             */
            this.staveProfile = exports.StaveProfile.Default;
            /**
             * Limit the displayed bars per row.
             */
            this.barsPerRow = -1;
            /**
             * The bar start number to start layouting with. Note that this is the bar number and not an index!
             */
            this.startBar = 1;
            /**
             * The amount of bars to render overall.
             */
            this.barCount = -1;
            /**
             * The number of bars that should be rendered per partial. This setting is not used by all layouts.
             */
            this.barCountPerPartial = 10;
            /**
             * Gets or sets the resources used during rendering. This defines all fonts and colors used.
             */
            this.resources = new RenderingResources();
            /**
             * Gets or sets the padding between the music notation and the border.
             */
            this.padding = null;
        }
        static toJson(obj) { var json = {}; obj.fillToJson(json); return json; }
        fillToJson(json) { json.scale = this.scale; json.stretchForce = this.stretchForce; json.layoutMode = this.layoutMode; json.staveProfile = this.staveProfile; json.barsPerRow = this.barsPerRow; json.startBar = this.startBar; json.barCount = this.barCount; json.barCountPerPartial = this.barCountPerPartial; if (json.resources)
            this.resources.fillToJson(json.resources);
        else
            json.resources = (RenderingResources.toJson(this.resources)); json.padding = this.padding ? this.padding.slice() : null; }
        static fromJson(json) { if (!json)
            return null; var obj = new DisplaySettings(); obj.fillFromJson(json); return obj; }
        fillFromJson(json) { if (json)
            for (const $k in json)
                this.setProperty($k.toLowerCase(), json[$k]); }
        setProperty(property, value) { switch (property) {
            case "scale":
                this.scale = value;
                return true;
            case "stretchforce":
                this.stretchForce = value;
                return true;
            case "layoutmode":
                this.layoutMode = typeof value === "string" ? exports.LayoutMode[Object.keys(exports.LayoutMode).find($k => $k.toLowerCase() === value.toLowerCase())] : value;
                return true;
            case "staveprofile":
                this.staveProfile = typeof value === "string" ? exports.StaveProfile[Object.keys(exports.StaveProfile).find($k => $k.toLowerCase() === value.toLowerCase())] : value;
                return true;
            case "barsperrow":
                this.barsPerRow = value;
                return true;
            case "startbar":
                this.startBar = value;
                return true;
            case "barcount":
                this.barCount = value;
                return true;
            case "barcountperpartial":
                this.barCountPerPartial = value;
                return true;
            case "padding":
                this.padding = value ? value.slice() : null;
                return true;
        } if (["resources"].indexOf(property) >= 0) {
            if (this.resources)
                this.resources.fillFromJson(value);
            else
                this.resources = (RenderingResources.fromJson(value));
            return true;
        }
        else {
            for (const $c of ["resources"])
                if (property.indexOf($c) === 0) {
                    if (!this.resources)
                        this.resources = new RenderingResources();
                    if (this.resources.setProperty(property.substring($c.length), value))
                        return true;
                }
        } return false; }
    }

    /**
     * This public class provides names for all general midi instruments.
     */
    class GeneralMidi {
        static getValue(name) {
            if (!GeneralMidi._values) {
                GeneralMidi._values = new Map();
            }
            name = name.toLowerCase().split(' ').join('');
            return GeneralMidi._values.has(name) ? GeneralMidi._values.get(name) : 0;
        }
        static isPiano(program) {
            return program <= 7 || program >= 16 && program <= 23;
        }
        static isGuitar(program) {
            return program >= 24 && program <= 39 || program === 105 || program === 43;
        }
    }
    GeneralMidi._values = new Map([
        ['acousticgrandpiano', 0], ['brightacousticpiano', 1], ['electricgrandpiano', 2],
        ['honkytonkpiano', 3], ['electricpiano1', 4], ['electricpiano2', 5], ['harpsichord', 6],
        ['clavinet', 7], ['celesta', 8], ['glockenspiel', 9], ['musicbox', 10], ['vibraphone', 11],
        ['marimba', 12], ['xylophone', 13], ['tubularbells', 14], ['dulcimer', 15],
        ['drawbarorgan', 16], ['percussiveorgan', 17], ['rockorgan', 18], ['churchorgan', 19],
        ['reedorgan', 20], ['accordion', 21], ['harmonica', 22], ['tangoaccordion', 23],
        ['acousticguitarnylon', 24], ['acousticguitarsteel', 25], ['electricguitarjazz', 26],
        ['electricguitarclean', 27], ['electricguitarmuted', 28], ['overdrivenguitar', 29],
        ['distortionguitar', 30], ['guitarharmonics', 31], ['acousticbass', 32],
        ['electricbassfinger', 33], ['electricbasspick', 34], ['fretlessbass', 35],
        ['slapbass1', 36], ['slapbass2', 37], ['synthbass1', 38], ['synthbass2', 39],
        ['violin', 40], ['viola', 41], ['cello', 42], ['contrabass', 43], ['tremolostrings', 44],
        ['pizzicatostrings', 45], ['orchestralharp', 46], ['timpani', 47], ['stringensemble1', 48],
        ['stringensemble2', 49], ['synthstrings1', 50], ['synthstrings2', 51], ['choiraahs', 52],
        ['voiceoohs', 53], ['synthvoice', 54], ['orchestrahit', 55], ['trumpet', 56],
        ['trombone', 57], ['tuba', 58], ['mutedtrumpet', 59], ['frenchhorn', 60],
        ['brasssection', 61], ['synthbrass1', 62], ['synthbrass2', 63], ['sopranosax', 64],
        ['altosax', 65], ['tenorsax', 66], ['baritonesax', 67], ['oboe', 68], ['englishhorn', 69],
        ['bassoon', 70], ['clarinet', 71], ['piccolo', 72], ['flute', 73], ['recorder', 74],
        ['panflute', 75], ['blownbottle', 76], ['shakuhachi', 77], ['whistle', 78], ['ocarina', 79],
        ['lead1square', 80], ['lead2sawtooth', 81], ['lead3calliope', 82], ['lead4chiff', 83],
        ['lead5charang', 84], ['lead6voice', 85], ['lead7fifths', 86], ['lead8bassandlead', 87],
        ['pad1newage', 88], ['pad2warm', 89], ['pad3polysynth', 90], ['pad4choir', 91],
        ['pad5bowed', 92], ['pad6metallic', 93], ['pad7halo', 94], ['pad8sweep', 95],
        ['fx1rain', 96], ['fx2soundtrack', 97], ['fx3crystal', 98], ['fx4atmosphere', 99],
        ['fx5brightness', 100], ['fx6goblins', 101], ['fx7echoes', 102], ['fx8scifi', 103],
        ['sitar', 104], ['banjo', 105], ['shamisen', 106], ['koto', 107], ['kalimba', 108],
        ['bagpipe', 109], ['fiddle', 110], ['shanai', 111], ['tinklebell', 112], ['agogo', 113],
        ['steeldrums', 114], ['woodblock', 115], ['taikodrum', 116], ['melodictom', 117],
        ['synthdrum', 118], ['reversecymbal', 119], ['guitarfretnoise', 120], ['breathnoise', 121],
        ['seashore', 122], ['birdtweet', 123], ['telephonering', 124], ['helicopter', 125],
        ['applause', 126], ['gunshot', 127]
    ]);

    /**
     * This is the base public class for creating new song importers which
     * enable reading scores from any binary datasource
     */
    class ScoreImporter {
        /**
         * Initializes the importer with the given data and settings.
         */
        init(data, settings) {
            this.data = data;
            this.settings = settings;
        }
    }

    /**
     * The exception thrown by a {@link ScoreImporter} in case the
     * binary data does not contain a reader compatible structure.
     */
    class UnsupportedFormatError extends Error {
        constructor(message = 'Unsupported format', inner = null) {
            super(message);
            this.inner = inner;
        }
    }

    /**
     * Lists all types of note acceuntations
     */
    var AccentuationType;
    (function (AccentuationType) {
        /**
         * No accentuation
         */
        AccentuationType[AccentuationType["None"] = 0] = "None";
        /**
         * Normal accentuation
         */
        AccentuationType[AccentuationType["Normal"] = 1] = "Normal";
        /**
         * Heavy accentuation
         */
        AccentuationType[AccentuationType["Heavy"] = 2] = "Heavy";
    })(AccentuationType || (AccentuationType = {}));

    /**
     * This public enumeration lists all types of automations.
     */
    var AutomationType;
    (function (AutomationType) {
        /**
         * Tempo change.
         */
        AutomationType[AutomationType["Tempo"] = 0] = "Tempo";
        /**
         * Colume change.
         */
        AutomationType[AutomationType["Volume"] = 1] = "Volume";
        /**
         * Instrument change.
         */
        AutomationType[AutomationType["Instrument"] = 2] = "Instrument";
        /**
         * Balance change.
         */
        AutomationType[AutomationType["Balance"] = 3] = "Balance";
    })(AutomationType || (AutomationType = {}));
    /**
     * Automations are used to change the behaviour of a song.
     */
    class Automation {
        constructor() {
            /**
             * Gets or sets whether the automation is applied linear.
             */
            this.isLinear = false;
            /**
             * Gets or sets the type of the automation.
             */
            this.type = AutomationType.Tempo;
            /**
             * Gets or sets the target value of the automation.
             */
            this.value = 0;
            /**
             * Gets or sets the relative position of of the automation.
             */
            this.ratioPosition = 0;
            /**
             * Gets or sets the additional text of the automation.
             */
            this.text = '';
        }
        static buildTempoAutomation(isLinear, ratioPosition, value, reference) {
            if (reference < 1 || reference > 5) {
                reference = 2;
            }
            let references = new Float32Array([1, 0.5, 1.0, 1.5, 2.0, 3.0]);
            let automation = new Automation();
            automation.type = AutomationType.Tempo;
            automation.isLinear = isLinear;
            automation.ratioPosition = ratioPosition;
            automation.value = value * references[reference];
            return automation;
        }
        static copyTo(src, dst) {
            dst.isLinear = src.isLinear;
            dst.ratioPosition = src.ratioPosition;
            dst.text = src.text;
            dst.type = src.type;
            dst.value = src.value;
        }
        clone() {
            let a = new Automation();
            Automation.copyTo(this, a);
            return a;
        }
    }

    /**
     * This public enumeration lists all supported Clefs.
     */
    var Clef;
    (function (Clef) {
        /**
         * Neutral clef.
         */
        Clef[Clef["Neutral"] = 0] = "Neutral";
        /**
         * C3 clef
         */
        Clef[Clef["C3"] = 1] = "C3";
        /**
         * C4 clef
         */
        Clef[Clef["C4"] = 2] = "C4";
        /**
         * F4 clef
         */
        Clef[Clef["F4"] = 3] = "F4";
        /**
         * G2 clef
         */
        Clef[Clef["G2"] = 4] = "G2";
    })(Clef || (Clef = {}));

    /**
     * Lists all ottavia.
     */
    var Ottavia;
    (function (Ottavia) {
        /**
         * 2 octaves higher
         */
        Ottavia[Ottavia["_15ma"] = 0] = "_15ma";
        /**
         * 1 octave higher
         */
        Ottavia[Ottavia["_8va"] = 1] = "_8va";
        /**
         * Normal
         */
        Ottavia[Ottavia["Regular"] = 2] = "Regular";
        /**
         * 1 octave lower
         */
        Ottavia[Ottavia["_8vb"] = 3] = "_8vb";
        /**
         * 2 octaves lower.
         */
        Ottavia[Ottavia["_15mb"] = 4] = "_15mb";
    })(Ottavia || (Ottavia = {}));

    /**
     * Lists all simile mark types as they are assigned to bars.
     */
    var SimileMark;
    (function (SimileMark) {
        /**
         * No simile mark is applied
         */
        SimileMark[SimileMark["None"] = 0] = "None";
        /**
         * A simple simile mark. The previous bar is repeated.
         */
        SimileMark[SimileMark["Simple"] = 1] = "Simple";
        /**
         * A double simile mark. This value is assigned to the first
         * bar of the 2 repeat bars.
         */
        SimileMark[SimileMark["FirstOfDouble"] = 2] = "FirstOfDouble";
        /**
         * A double simile mark. This value is assigned to the second
         * bar of the 2 repeat bars.
         */
        SimileMark[SimileMark["SecondOfDouble"] = 3] = "SecondOfDouble";
    })(SimileMark || (SimileMark = {}));

    /**
     * A bar is a single block within a track, also known as Measure.
     */
    class Bar {
        constructor() {
            /**
             * Gets or sets the unique id of this bar.
             */
            this.id = Bar._globalBarId++;
            /**
             * Gets or sets the zero-based index of this bar within the staff.
             */
            this.index = 0;
            /**
             * Gets or sets the next bar that comes after this bar.
             */
            this.nextBar = null;
            /**
             * Gets or sets the previous bar that comes before this bar.
             */
            this.previousBar = null;
            /**
             * Gets or sets the clef on this bar.
             */
            this.clef = Clef.G2;
            /**
             * Gets or sets the ottava applied to the clef.
             */
            this.clefOttava = Ottavia.Regular;
            /**
             * Gets or sets the list of voices contained in this bar.
             */
            this.voices = [];
            /**
             * Gets or sets the simile mark on this bar.
             */
            this.simileMark = SimileMark.None;
        }
        get masterBar() {
            return this.staff.track.score.masterBars[this.index];
        }
        get isEmpty() {
            for (let i = 0, j = this.voices.length; i < j; i++) {
                if (!this.voices[i].isEmpty) {
                    return false;
                }
            }
            return true;
        }
        static copyTo(src, dst) {
            dst.id = src.id;
            dst.index = src.index;
            dst.clef = src.clef;
            dst.clefOttava = src.clefOttava;
            dst.simileMark = src.simileMark;
        }
        addVoice(voice) {
            voice.bar = this;
            voice.index = this.voices.length;
            this.voices.push(voice);
        }
        finish(settings) {
            for (let i = 0, j = this.voices.length; i < j; i++) {
                let voice = this.voices[i];
                voice.finish(settings);
            }
        }
        calculateDuration() {
            let duration = 0;
            for (let voice of this.voices) {
                let voiceDuration = voice.calculateDuration();
                if (voiceDuration > duration) {
                    duration = voiceDuration;
                }
            }
            return duration;
        }
    }
    Bar._globalBarId = 0;

    class MidiUtils {
        /**
         * Converts the given midi tick duration into milliseconds.
         * @param ticks The duration in midi ticks
         * @param tempo The current tempo in BPM.
         * @returns The converted duration in milliseconds.
         */
        static ticksToMillis(ticks, tempo) {
            return (ticks * (60000.0 / (tempo * MidiUtils.QuarterTime))) | 0;
        }
        /**
         * Converts the given midi tick duration into milliseconds.
         * @param millis The duration in milliseconds
         * @param tempo The current tempo in BPM.
         * @returns The converted duration in midi ticks.
         */
        static millisToTicks(millis, tempo) {
            return (millis / (60000.0 / (tempo * MidiUtils.QuarterTime))) | 0;
        }
        /**
         * Converts a duration value to its ticks equivalent.
         */
        static toTicks(duration) {
            return MidiUtils.valueToTicks(duration);
        }
        /**
         * Converts a numerical value to its ticks equivalent.
         * @param duration the numerical proportion to convert. (i.E. timesignature denominator, note duration,...)
         */
        static valueToTicks(duration) {
            let denomninator = duration;
            if (denomninator < 0) {
                denomninator = 1 / -denomninator;
            }
            return (MidiUtils.QuarterTime * (4.0 / denomninator)) | 0;
        }
        static applyDot(ticks, doubleDotted) {
            if (doubleDotted) {
                return ticks + ((ticks / 4) | 0) * 3;
            }
            return ticks + ((ticks / 2) | 0);
        }
        static applyTuplet(ticks, numerator, denominator) {
            return ((ticks * denominator) / numerator) | 0;
        }
        static removeTuplet(ticks, numerator, denominator) {
            return ((ticks * numerator) / denominator) | 0;
        }
        static dynamicToVelocity(dyn) {
            return MidiUtils.MinVelocity + dyn * MidiUtils.VelocityIncrement;
        }
    }
    MidiUtils.QuarterTime = 960;
    MidiUtils.MinVelocity = 15;
    MidiUtils.VelocityIncrement = 16;

    /**
     * A single point of a bending graph. Used to
     * describe WhammyBar and String Bending effects.
     */
    class BendPoint {
        /**
         * Initializes a new instance of the {@link BendPoint} class.
         * @param offset The offset.
         * @param value The value.
         */
        constructor(offset = 0, value = 0) {
            this.offset = offset;
            this.value = value;
        }
        static copyTo(src, dst) {
            dst.offset = src.offset;
            dst.value = src.value;
        }
        clone() {
            let point = new BendPoint(0, 0);
            BendPoint.copyTo(this, point);
            return point;
        }
    }
    BendPoint.MaxPosition = 60;
    BendPoint.MaxValue = 12;

    /**
     * Lists the different bend styles
     */
    var BendStyle;
    (function (BendStyle) {
        /**
         * The bends are as described by the bend points
         */
        BendStyle[BendStyle["Default"] = 0] = "Default";
        /**
         * The bends are gradual over the beat duration.
         */
        BendStyle[BendStyle["Gradual"] = 1] = "Gradual";
        /**
         * The bends are done fast before the next note.
         */
        BendStyle[BendStyle["Fast"] = 2] = "Fast";
    })(BendStyle || (BendStyle = {}));

    /**
     * Lists all types of bends
     */
    var BendType;
    (function (BendType) {
        /**
         * No bend at all
         */
        BendType[BendType["None"] = 0] = "None";
        /**
         * Individual points define the bends in a flexible manner.
         * This system was mainly used in Guitar Pro 3-5
         */
        BendType[BendType["Custom"] = 1] = "Custom";
        /**
         * Simple Bend from an unbended string to a higher note.
         */
        BendType[BendType["Bend"] = 2] = "Bend";
        /**
         * Release of a bend that was started on an earlier note.
         */
        BendType[BendType["Release"] = 3] = "Release";
        /**
         * A bend that starts from an unbended string,
         * and also releases the bend after some time.
         */
        BendType[BendType["BendRelease"] = 4] = "BendRelease";
        /**
         * Holds a bend that was started on an earlier note
         */
        BendType[BendType["Hold"] = 5] = "Hold";
        /**
         * A bend that is already started before the note is played then it is held until the end.
         */
        BendType[BendType["Prebend"] = 6] = "Prebend";
        /**
         * A bend that is already started before the note is played and
         * bends even further, then it is held until the end.
         */
        BendType[BendType["PrebendBend"] = 7] = "PrebendBend";
        /**
         * A bend that is already started before the note is played and
         * then releases the bend to a lower note where it is held until the end.
         */
        BendType[BendType["PrebendRelease"] = 8] = "PrebendRelease";
    })(BendType || (BendType = {}));

    /**
     * Lists all types of how to brush multiple notes on a beat.
     */
    var BrushType;
    (function (BrushType) {
        /**
         * No brush.
         */
        BrushType[BrushType["None"] = 0] = "None";
        /**
         * Normal brush up.
         */
        BrushType[BrushType["BrushUp"] = 1] = "BrushUp";
        /**
         * Normal brush down.
         */
        BrushType[BrushType["BrushDown"] = 2] = "BrushDown";
        /**
         * Arpeggio up.
         */
        BrushType[BrushType["ArpeggioUp"] = 3] = "ArpeggioUp";
        /**
         * Arpeggio down.
         */
        BrushType[BrushType["ArpeggioDown"] = 4] = "ArpeggioDown";
    })(BrushType || (BrushType = {}));

    /**
     * Lists all Crescendo and Decrescendo types.
     */
    var CrescendoType;
    (function (CrescendoType) {
        /**
         * No crescendo applied.
         */
        CrescendoType[CrescendoType["None"] = 0] = "None";
        /**
         * Normal crescendo applied.
         */
        CrescendoType[CrescendoType["Crescendo"] = 1] = "Crescendo";
        /**
         * Normal decrescendo applied.
         */
        CrescendoType[CrescendoType["Decrescendo"] = 2] = "Decrescendo";
    })(CrescendoType || (CrescendoType = {}));

    /**
     * Lists all durations of a beat.
     */
    var Duration;
    (function (Duration) {
        /**
         * A quadruple whole note duration
         */
        Duration[Duration["QuadrupleWhole"] = -4] = "QuadrupleWhole";
        /**
         * A double whole note duration
         */
        Duration[Duration["DoubleWhole"] = -2] = "DoubleWhole";
        /**
         * A whole note duration
         */
        Duration[Duration["Whole"] = 1] = "Whole";
        /**
         * A 1/2 note duration
         */
        Duration[Duration["Half"] = 2] = "Half";
        /**
         * A 1/4 note duration
         */
        Duration[Duration["Quarter"] = 4] = "Quarter";
        /**
         * A 1/8 note duration
         */
        Duration[Duration["Eighth"] = 8] = "Eighth";
        /**
         * A 1/16 note duration
         */
        Duration[Duration["Sixteenth"] = 16] = "Sixteenth";
        /**
         * A 1/32 note duration
         */
        Duration[Duration["ThirtySecond"] = 32] = "ThirtySecond";
        /**
         * A 1/64 note duration
         */
        Duration[Duration["SixtyFourth"] = 64] = "SixtyFourth";
        /**
         * A 1/128 note duration
         */
        Duration[Duration["OneHundredTwentyEighth"] = 128] = "OneHundredTwentyEighth";
        /**
         * A 1/256 note duration
         */
        Duration[Duration["TwoHundredFiftySixth"] = 256] = "TwoHundredFiftySixth";
    })(Duration || (Duration = {}));

    /**
     * Lists all dynamics.
     */
    var DynamicValue;
    (function (DynamicValue) {
        /**
         * pianississimo (very very soft)
         */
        DynamicValue[DynamicValue["PPP"] = 0] = "PPP";
        /**
         * pianissimo (very soft)
         */
        DynamicValue[DynamicValue["PP"] = 1] = "PP";
        /**
         * piano (soft)
         */
        DynamicValue[DynamicValue["P"] = 2] = "P";
        /**
         * mezzo-piano (half soft)
         */
        DynamicValue[DynamicValue["MP"] = 3] = "MP";
        /**
         * mezzo-forte (half loud)
         */
        DynamicValue[DynamicValue["MF"] = 4] = "MF";
        /**
         * forte (loud)
         */
        DynamicValue[DynamicValue["F"] = 5] = "F";
        /**
         * fortissimo (very loud)
         */
        DynamicValue[DynamicValue["FF"] = 6] = "FF";
        /**
         * fortississimo (very very loud)
         */
        DynamicValue[DynamicValue["FFF"] = 7] = "FFF";
    })(DynamicValue || (DynamicValue = {}));

    /**
     * Lists all types of grace notes
     */
    var GraceType;
    (function (GraceType) {
        /**
         * No grace, normal beat.
         */
        GraceType[GraceType["None"] = 0] = "None";
        /**
         * The beat contains on-beat grace notes.
         */
        GraceType[GraceType["OnBeat"] = 1] = "OnBeat";
        /**
         * The beat contains before-beat grace notes.
         */
        GraceType[GraceType["BeforeBeat"] = 2] = "BeforeBeat";
        /**
         * The beat contains very special bend-grace notes used in SongBook style displays.
         */
        GraceType[GraceType["BendGrace"] = 3] = "BendGrace";
    })(GraceType || (GraceType = {}));

    /**
     * Lists all fingers.
     */
    var Fingers;
    (function (Fingers) {
        /**
         * Unknown type (not documented)
         */
        Fingers[Fingers["Unknown"] = -2] = "Unknown";
        /**
         * No finger, dead note
         */
        Fingers[Fingers["NoOrDead"] = -1] = "NoOrDead";
        /**
         * The thumb
         */
        Fingers[Fingers["Thumb"] = 0] = "Thumb";
        /**
         * The index finger
         */
        Fingers[Fingers["IndexFinger"] = 1] = "IndexFinger";
        /**
         * The middle finger
         */
        Fingers[Fingers["MiddleFinger"] = 2] = "MiddleFinger";
        /**
         * The annular finger
         */
        Fingers[Fingers["AnnularFinger"] = 3] = "AnnularFinger";
        /**
         * The little finger
         */
        Fingers[Fingers["LittleFinger"] = 4] = "LittleFinger";
    })(Fingers || (Fingers = {}));

    /**
     * Lists all harmonic types.
     */
    var HarmonicType;
    (function (HarmonicType) {
        /**
         * No harmonics.
         */
        HarmonicType[HarmonicType["None"] = 0] = "None";
        /**
         * Natural harmonic
         */
        HarmonicType[HarmonicType["Natural"] = 1] = "Natural";
        /**
         * Artificial harmonic
         */
        HarmonicType[HarmonicType["Artificial"] = 2] = "Artificial";
        /**
         * Pinch harmonics
         */
        HarmonicType[HarmonicType["Pinch"] = 3] = "Pinch";
        /**
         * Tap harmonics
         */
        HarmonicType[HarmonicType["Tap"] = 4] = "Tap";
        /**
         * Semi harmonics
         */
        HarmonicType[HarmonicType["Semi"] = 5] = "Semi";
        /**
         * Feedback harmonics
         */
        HarmonicType[HarmonicType["Feedback"] = 6] = "Feedback";
    })(HarmonicType || (HarmonicType = {}));

    /**
     * Lists the modes how accidentals are handled for notes
     */
    var NoteAccidentalMode;
    (function (NoteAccidentalMode) {
        /**
         * Accidentals are calculated automatically.
         */
        NoteAccidentalMode[NoteAccidentalMode["Default"] = 0] = "Default";
        /**
         * If the default behavior calculates a Sharp, use flat instead (and vice versa).
         */
        NoteAccidentalMode[NoteAccidentalMode["SwapAccidentals"] = 1] = "SwapAccidentals";
        /**
         * This will move the note one line down and applies a Naturalize.
         */
        NoteAccidentalMode[NoteAccidentalMode["ForceNatural"] = 2] = "ForceNatural";
        /**
         * This will move the note one line down and applies a Sharp.
         */
        NoteAccidentalMode[NoteAccidentalMode["ForceSharp"] = 3] = "ForceSharp";
        /**
         * This will move the note one line up and applies a Flat.
         */
        NoteAccidentalMode[NoteAccidentalMode["ForceFlat"] = 4] = "ForceFlat";
    })(NoteAccidentalMode || (NoteAccidentalMode = {}));

    /**
     * This public enum lists all different types of finger slide-ins on a string.
     */
    var SlideInType;
    (function (SlideInType) {
        /**
         * No slide.
         */
        SlideInType[SlideInType["None"] = 0] = "None";
        /**
         * Slide into the note from below on the same string.
         */
        SlideInType[SlideInType["IntoFromBelow"] = 1] = "IntoFromBelow";
        /**
         * Slide into the note from above on the same string.
         */
        SlideInType[SlideInType["IntoFromAbove"] = 2] = "IntoFromAbove";
    })(SlideInType || (SlideInType = {}));

    /**
     * This public enum lists all different types of finger slide-outs on a string.
     */
    var SlideOutType;
    (function (SlideOutType) {
        /**
         * No slide.
         */
        SlideOutType[SlideOutType["None"] = 0] = "None";
        /**
         * Shift slide to next note on same string
         */
        SlideOutType[SlideOutType["Shift"] = 1] = "Shift";
        /**
         * Legato slide to next note on same string.
         */
        SlideOutType[SlideOutType["Legato"] = 2] = "Legato";
        /**
         * Slide out from the note from upwards on the same string.
         */
        SlideOutType[SlideOutType["OutUp"] = 3] = "OutUp";
        /**
         * Slide out from the note from downwards on the same string.
         */
        SlideOutType[SlideOutType["OutDown"] = 4] = "OutDown";
        /**
         * Pickslide down on this note
         */
        SlideOutType[SlideOutType["PickSlideDown"] = 5] = "PickSlideDown";
        /**
         * Pickslide up on this note
         */
        SlideOutType[SlideOutType["PickSlideUp"] = 6] = "PickSlideUp";
    })(SlideOutType || (SlideOutType = {}));

    /**
     * This public enum lists all vibrato types that can be performed.
     */
    var VibratoType;
    (function (VibratoType) {
        /**
         * No vibrato.
         */
        VibratoType[VibratoType["None"] = 0] = "None";
        /**
         * A slight vibrato.
         */
        VibratoType[VibratoType["Slight"] = 1] = "Slight";
        /**
         * A wide vibrato.
         */
        VibratoType[VibratoType["Wide"] = 2] = "Wide";
    })(VibratoType || (VibratoType = {}));

    /**
     * Lists the different modes on how rhythm notation is shown on the tab staff.
     */
    (function (TabRhythmMode) {
        /**
         * Rhythm notation is hidden.
         */
        TabRhythmMode[TabRhythmMode["Hidden"] = 0] = "Hidden";
        /**
         * Rhythm notation is shown with individual beams per beat.
         */
        TabRhythmMode[TabRhythmMode["ShowWithBeams"] = 1] = "ShowWithBeams";
        /**
         * Rhythm notation is shown and behaves like normal score notation with connected bars.
         */
        TabRhythmMode[TabRhythmMode["ShowWithBars"] = 2] = "ShowWithBars";
    })(exports.TabRhythmMode || (exports.TabRhythmMode = {}));
    (function (FingeringMode) {
        /**
         * Fingerings will be shown in the standard notation staff.
         */
        FingeringMode[FingeringMode["ScoreDefault"] = 0] = "ScoreDefault";
        /**
         * Fingerings will be shown in the standard notation staff. Piano finger style is enforced, where
         * fingers are rendered as 1-5 instead of p,i,m,a,c and T,1,2,3,4.
         */
        FingeringMode[FingeringMode["ScoreForcePiano"] = 1] = "ScoreForcePiano";
        /**
         * Fingerings will be shown in a effect band above the tabs in case
         * they have only a single note on the beat.
         */
        FingeringMode[FingeringMode["SingleNoteEffectBand"] = 2] = "SingleNoteEffectBand";
        /**
         * Fingerings will be shown in a effect band above the tabs in case
         * they have only a single note on the beat. Piano finger style is enforced, where
         * fingers are rendered as 1-5 instead of p,i,m,a,c and T,1,2,3,4.
         */
        FingeringMode[FingeringMode["SingleNoteEffectBandForcePiano"] = 3] = "SingleNoteEffectBandForcePiano";
    })(exports.FingeringMode || (exports.FingeringMode = {}));
    (function (NotationMode) {
        /**
         * Music elements will be displayed and played as in Guitar Pro.
         */
        NotationMode[NotationMode["GuitarPro"] = 0] = "GuitarPro";
        /**
         * Music elements will be displayed and played as in traditional songbooks.
         * Changes:
         * 1. Bends
         *   For bends additional grace beats are introduced.
         *   Bends are categorized into gradual and fast bends.
         *   - Gradual bends are indicated by beat text "grad" or "grad.". Bend will sound along the beat duration.
         *   - Fast bends are done right before the next note. If the next note is tied even on-beat of the next note.
         * 2. Whammy Bars
         *   Dips are shown as simple annotation over the beats
         *   Whammy Bars are categorized into gradual and fast.
         *   - Gradual whammys are indicated by beat text "grad" or "grad.". Whammys will sound along the beat duration.
         *   - Fast whammys are done right the beat.
         * 3. Let Ring
         *   Tied notes with let ring are not shown in standard notation
         *   Let ring does not cause a longer playback, duration is defined via tied notes.
         */
        NotationMode[NotationMode["SongBook"] = 1] = "SongBook";
    })(exports.NotationMode || (exports.NotationMode = {}));
    /**
     * The notation settings control how various music notation elements are shown and behaving
     * @json
     */
    class NotationSettings {
        constructor() {
            /**
             * Gets or sets the mode to use for display and play music notation elements.
             */
            this.notationMode = exports.NotationMode.GuitarPro;
            /**
             * Gets or sets the fingering mode to use.
             */
            this.fingeringMode = exports.FingeringMode.ScoreDefault;
            /**
             * Whether to display the song information or not.
             */
            this.hideInfo = false;
            /**
             * Whether to display the tuning information or not.
             */
            this.hideTuning = false;
            /**
             * Whether to display the track names in the accolade or not.
             */
            this.hideTrackNames = false;
            /**
             * Whether to display the chord diagrams or not.
             */
            this.hideChordDiagrams = false;
            /**
             * Whether to show rhythm notation in the guitar tablature.
             */
            this.rhythmMode = exports.TabRhythmMode.Hidden;
            /**
             * The height of the rythm bars.
             */
            this.rhythmHeight = 15;
            /**
             * The transposition pitch offsets for the individual tracks.
             * They apply to rendering and playback.
             */
            this.transpositionPitches = [];
            /**
             * The transposition pitch offsets for the individual tracks.
             * They apply to rendering only.
             */
            this.displayTranspositionPitches = [];
            /**
             * If set to true the guitar tabs on grace beats are rendered smaller.
             */
            this.smallGraceTabNotes = true;
            /**
             * If set to true bend arrows expand to the end of the last tied note
             * of the string. Otherwise they end on the next beat.
             */
            this.extendBendArrowsOnTiedNotes = true;
            /**
             * If set to true the note heads on tied notes
             * will have parenthesis if they are preceeded by bends.
             */
            this.showParenthesisForTiedBends = true;
            /**
             * If set to true a tab number will be shown in case
             * a bend is increased on a tied note.
             */
            this.showTabNoteOnTiedBend = true;
            /**
             * If set to true, 0 is shown on dive whammy bars.
             */
            this.showZeroOnDiveWhammy = false;
            /**
             * If set to true, line effects (like w/bar, let-ring etc)
             * are drawn until the end of the beat instead of the start.
             */
            this.extendLineEffectsToBeatEnd = false;
            /**
             * Gets or sets the height for slurs. The factor is multiplied with the a logarithmic distance
             * between slur start and end.
             */
            this.slurHeight = 7.0;
        }
        static toJson(obj) { var json = {}; obj.fillToJson(json); return json; }
        fillToJson(json) { json.notationMode = this.notationMode; json.fingeringMode = this.fingeringMode; json.hideInfo = this.hideInfo; json.hideTuning = this.hideTuning; json.hideTrackNames = this.hideTrackNames; json.hideChordDiagrams = this.hideChordDiagrams; json.rhythmMode = this.rhythmMode; json.rhythmHeight = this.rhythmHeight; json.transpositionPitches = this.transpositionPitches.slice(); json.displayTranspositionPitches = this.displayTranspositionPitches.slice(); json.smallGraceTabNotes = this.smallGraceTabNotes; json.extendBendArrowsOnTiedNotes = this.extendBendArrowsOnTiedNotes; json.showParenthesisForTiedBends = this.showParenthesisForTiedBends; json.showTabNoteOnTiedBend = this.showTabNoteOnTiedBend; json.showZeroOnDiveWhammy = this.showZeroOnDiveWhammy; json.extendLineEffectsToBeatEnd = this.extendLineEffectsToBeatEnd; json.slurHeight = this.slurHeight; }
        static fromJson(json) { if (!json)
            return null; var obj = new NotationSettings(); obj.fillFromJson(json); return obj; }
        fillFromJson(json) { if (json)
            for (const $k in json)
                this.setProperty($k.toLowerCase(), json[$k]); }
        setProperty(property, value) { switch (property) {
            case "notationmode":
                this.notationMode = typeof value === "string" ? exports.NotationMode[Object.keys(exports.NotationMode).find($k => $k.toLowerCase() === value.toLowerCase())] : value;
                return true;
            case "fingeringmode":
                this.fingeringMode = typeof value === "string" ? exports.FingeringMode[Object.keys(exports.FingeringMode).find($k => $k.toLowerCase() === value.toLowerCase())] : value;
                return true;
            case "hideinfo":
                this.hideInfo = value;
                return true;
            case "hidetuning":
                this.hideTuning = value;
                return true;
            case "hidetracknames":
                this.hideTrackNames = value;
                return true;
            case "hidechorddiagrams":
                this.hideChordDiagrams = value;
                return true;
            case "rhythmmode":
                this.rhythmMode = typeof value === "string" ? exports.TabRhythmMode[Object.keys(exports.TabRhythmMode).find($k => $k.toLowerCase() === value.toLowerCase())] : value;
                return true;
            case "rhythmheight":
                this.rhythmHeight = value;
                return true;
            case "transpositionpitches":
                this.transpositionPitches = value.slice();
                return true;
            case "displaytranspositionpitches":
                this.displayTranspositionPitches = value.slice();
                return true;
            case "smallgracetabnotes":
                this.smallGraceTabNotes = value;
                return true;
            case "extendbendarrowsontiednotes":
                this.extendBendArrowsOnTiedNotes = value;
                return true;
            case "showparenthesisfortiedbends":
                this.showParenthesisForTiedBends = value;
                return true;
            case "showtabnoteontiedbend":
                this.showTabNoteOnTiedBend = value;
                return true;
            case "showzeroondivewhammy":
                this.showZeroOnDiveWhammy = value;
                return true;
            case "extendlineeffectstobeatend":
                this.extendLineEffectsToBeatEnd = value;
                return true;
            case "slurheight":
                this.slurHeight = value;
                return true;
        } return false; }
    }

    class PercussionMapper {
        static midiFromElementVariation(note) {
            return PercussionMapper.ElementVariationToMidi[note.element][note.variation];
        }
        /**
         * Maps the given note to a normal note value to place the note at the
         * correct line on score notation
         * @param value
         * @returns
         */
        static mapNoteForDisplay(value) {
            if (value === 61 || value === 66 || value === 44) {
                return 62;
            }
            if (value === 60 || value === 65) {
                return 64;
            }
            if (value >= 35 && value <= 36) {
                return 65;
            }
            if (value === 41 || value === 64) {
                return 67;
            }
            if (value === 43 || value === 62) {
                return 69;
            }
            if (value === 45 || value === 63) {
                return 71;
            }
            if (value === 47 || value === 54) {
                return 74;
            }
            if (value === 48 || value === 56) {
                return 76;
            }
            if (value === 50) {
                return 77;
            }
            if (value === 42 || value === 46 || (value >= 49 && value <= 53) || value === 57 || value === 59) {
                return 79;
            }
            return 72;
        }
    }
    PercussionMapper.ElementVariationToMidi = [
        [35, 35, 35],
        [38, 38, 37],
        [56, 56, 56],
        [56, 56, 56],
        [56, 56, 56],
        [41, 41, 41],
        [43, 43, 43],
        [45, 45, 45],
        [47, 47, 47],
        [48, 48, 48],
        [42, 46, 46],
        [44, 44, 44],
        [49, 49, 49],
        [57, 57, 57],
        [55, 55, 55],
        [51, 59, 53],
        [52, 52, 52]
    ];

    /**
     * @target web
     */
    class Lazy {
        constructor(factory) {
            this._value = undefined;
            this._factory = factory;
        }
        get value() {
            if (this._value === undefined) {
                this._value = this._factory();
            }
            return this._value;
        }
    }

    /**
     * Defines all loglevels.
     * @json
     */
    var LogLevel;
    (function (LogLevel) {
        /**
         * No logging
         */
        LogLevel[LogLevel["None"] = 0] = "None";
        /**
         * Debug level (internal details are displayed).
         */
        LogLevel[LogLevel["Debug"] = 1] = "Debug";
        /**
         * Info level (only important details are shown)
         */
        LogLevel[LogLevel["Info"] = 2] = "Info";
        /**
         * Warning level
         */
        LogLevel[LogLevel["Warning"] = 3] = "Warning";
        /**
         * Error level.
         */
        LogLevel[LogLevel["Error"] = 4] = "Error";
    })(LogLevel || (LogLevel = {}));
    class Logger {
        static format(category, msg) {
            return `[AlphaTab][${category}] ${msg}`;
        }
        static shouldLog(level) {
            return Logger.logLevel !== LogLevel.None && level >= Logger.logLevel;
        }
        static debug(category, msg, ...details) {
            if (Logger.shouldLog(LogLevel.Debug)) {
                console.debug(Logger.format(category, msg), ...details);
            }
        }
        static warning(category, msg, ...details) {
            if (Logger.shouldLog(LogLevel.Warning)) {
                console.warn(Logger.format(category, msg), ...details);
            }
        }
        static info(category, msg, ...details) {
            if (Logger.shouldLog(LogLevel.Info)) {
                console.info(Logger.format(category, msg), ...details);
            }
        }
        static error(category, msg, ...details) {
            if (Logger.shouldLog(LogLevel.Error)) {
                console.error(Logger.format(category, msg), ...details);
            }
        }
    }
    Logger.logLevel = LogLevel.Info;

    /**
     * A note is a single played sound on a fretted instrument.
     * It consists of a fret offset and a string on which the note is played on.
     * It also can be modified by a lot of different effects.
     */
    class Note {
        constructor() {
            /**
             * Gets or sets the unique id of this note.
             */
            this.id = Note.GlobalNoteId++;
            /**
             * Gets or sets the zero-based index of this note within the beat.
             */
            this.index = 0;
            /**
             * Gets or sets the accentuation of this note.
             */
            this.accentuated = AccentuationType.None;
            /**
             * Gets or sets the bend type for this note.
             */
            this.bendType = BendType.None;
            /**
             * Gets or sets the bend style for this note.
             */
            this.bendStyle = BendStyle.Default;
            /**
             * Gets or sets the note from which this note continues the bend.
             */
            this.bendOrigin = null;
            /**
             * Gets or sets whether this note continues a bend from a previous note.
             */
            this.isContinuedBend = false;
            /**
             * Gets or sets a list of the points defining the bend behavior.
             */
            this.bendPoints = [];
            /**
             * Gets or sets the bend point with the highest bend value.
             */
            this.maxBendPoint = null;
            /**
             * Gets or sets the fret on which this note is played on the instrument.
             */
            this.fret = -1;
            /**
             * Gets or sets the string number where the note is placed.
             * 1 is the lowest string on the guitar and the bottom line on the tablature.
             * It then increases the the number of strings on available on the track.
             */
            this.string = -1;
            /**
             * Gets or sets the octave on which this note is played.
             */
            this.octave = -1;
            /**
             * Gets or sets the tone of this note within the octave.
             */
            this.tone = -1;
            /**
             * Gets or sets the percusson element.
             */
            this.element = -1;
            /**
             * Gets or sets the variation of this note.
             */
            this.variation = -1;
            /**
             * Gets or sets whether this note is visible on the music sheet.
             */
            this.isVisible = true;
            /**
             * Gets or sets whether this note starts a hammeron or pulloff.
             */
            this.isHammerPullOrigin = false;
            /**
             * Gets the origin of the hammeron/pulloff of this note.
             */
            this.hammerPullOrigin = null;
            /**
             * Gets the destination for the hammeron/pullof started by this note.
             */
            this.hammerPullDestination = null;
            /**
             * Gets or sets whether this note finishes a slur.
             */
            this.isSlurDestination = false;
            /**
             * Gets or sets the note where the slur of this note starts.
             */
            this.slurOrigin = null;
            /**
             * Gets or sets the note where the slur of this note ends.
             */
            this.slurDestination = null;
            /**
             * Gets or sets the harmonic type applied to this note.
             */
            this.harmonicType = HarmonicType.None;
            /**
             * Gets or sets the value defining the harmonic pitch.
             */
            this.harmonicValue = 0;
            /**
             * Gets or sets whether the note is a ghost note and shown in parenthesis. Also this will make the note a bit more silent.
             */
            this.isGhost = false;
            /**
             * Gets or sets whether this note has a let-ring effect.
             */
            this.isLetRing = false;
            /**
             * Gets or sets the destination note for the let-ring effect.
             */
            this.letRingDestination = null;
            /**
             * Gets or sets whether this note has a palm-mute effect.
             */
            this.isPalmMute = false;
            /**
             * Gets or sets the destination note for the palm-mute effect.
             */
            this.palmMuteDestination = null;
            /**
             * Gets or sets whether the note is shown and played as dead note.
             */
            this.isDead = false;
            /**
             * Gets or sets whether the note is played as staccato.
             */
            this.isStaccato = false;
            /**
             * Gets or sets the slide-in type this note is played with.
             */
            this.slideInType = SlideInType.None;
            /**
             * Gets or sets the slide-out type this note is played with.
             */
            this.slideOutType = SlideOutType.None;
            /**
             * Gets or sets the target note for several slide types.
             */
            this.slideTarget = null;
            /**
             * Gets or sets whether a vibrato is played on the note.
             */
            this.vibrato = VibratoType.None;
            /**
             * Gets or sets the origin of the tied if this note is tied.
             */
            this.tieOrigin = null;
            /**
             * Gets or sets the desination of the tie.
             */
            this.tieDestination = null;
            /**
             * Gets or sets whether this note is ends a tied note.
             */
            this.isTieDestination = false;
            /**
             * Gets or sets the fingers used for this note on the left hand.
             */
            this.leftHandFinger = Fingers.Unknown;
            /**
             * Gets or sets the fingers used for this note on the right hand.
             */
            this.rightHandFinger = Fingers.Unknown;
            /**
             * Gets or sets whether this note has fingering defined.
             */
            this.isFingering = false;
            /**
             * Gets or sets the target note value for the trill effect.
             */
            this.trillValue = -1;
            /**
             * Gets or sets the speed of the trill effect.
             */
            this.trillSpeed = Duration.ThirtySecond;
            /**
             * Gets or sets the percentual duration of the note relative to the overall beat duration .
             */
            this.durationPercent = 1;
            /**
             * Gets or sets how accidetnals for this note should  be handled.
             */
            this.accidentalMode = NoteAccidentalMode.Default;
            /**
             * Gets or sets the dynamics for this note.
             */
            this.dynamics = DynamicValue.F;
            this.isEffectSlurOrigin = false;
            this.hasEffectSlur = false;
            this.effectSlurOrigin = null;
            this.effectSlurDestination = null;
        }
        get hasBend() {
            return this.bendType !== BendType.None;
        }
        get isStringed() {
            return this.string >= 0;
        }
        get isPiano() {
            return !this.isStringed && this.octave >= 0 && this.tone >= 0;
        }
        get isPercussion() {
            return !this.isStringed && this.element >= 0 && this.variation >= 0;
        }
        get isHammerPullDestination() {
            return !!this.hammerPullOrigin;
        }
        get isSlurOrigin() {
            return !!this.slurDestination;
        }
        get isHarmonic() {
            return this.harmonicType !== HarmonicType.None;
        }
        get isTieOrigin() {
            return !!this.tieDestination;
        }
        get trillFret() {
            return this.trillValue - this.stringTuning;
        }
        get isTrill() {
            return this.trillValue >= 0;
        }
        get isEffectSlurDestination() {
            return !!this.effectSlurOrigin;
        }
        get stringTuning() {
            return this.beat.voice.bar.staff.capo + Note.getStringTuning(this.beat.voice.bar.staff, this.string);
        }
        static getStringTuning(staff, noteString) {
            if (staff.tuning.length > 0) {
                return staff.tuning[staff.tuning.length - (noteString - 1) - 1];
            }
            return 0;
        }
        get realValue() {
            if (this.isPercussion) {
                return PercussionMapper.midiFromElementVariation(this);
            }
            if (this.isStringed) {
                if (this.harmonicType === HarmonicType.Natural) {
                    return this.harmonicPitch + this.stringTuning - this.beat.voice.bar.staff.transpositionPitch;
                }
                return this.fret + this.stringTuning - this.beat.voice.bar.staff.transpositionPitch + this.harmonicPitch;
            }
            if (this.isPiano) {
                return this.octave * 12 + this.tone - this.beat.voice.bar.staff.transpositionPitch;
            }
            return 0;
        }
        get harmonicPitch() {
            if (this.harmonicType === HarmonicType.None || !this.isStringed) {
                return 0;
            }
            let value = this.harmonicValue;
            // add semitones to reach corresponding harmonic frets
            if (Platform.isAlmostEqualTo(value, 2.4)) {
                return 36;
            }
            if (Platform.isAlmostEqualTo(value, 2.7)) {
                // Fret 3 2nd octave + minor seventh
                return 34;
            }
            if (value < 3) {
                // no natural harmonics below fret 3
                return 0;
            }
            if (value <= 3.5) {
                // Fret 3 2nd octave + fifth
                return 31;
            }
            if (value <= 4) {
                return 28;
            }
            if (value <= 5) {
                return 24;
            }
            if (value <= 6) {
                return 34;
            }
            if (value <= 7) {
                return 19;
            }
            if (value <= 8.5) {
                return 36;
            }
            if (value <= 9) {
                return 28;
            }
            if (value <= 10) {
                return 34;
            }
            if (value <= 11) {
                return 0;
            }
            if (value <= 12) {
                return 12;
            }
            if (value < 14) {
                // fret 13,14 stay
                return 0;
            }
            if (value <= 15) {
                return 34;
            }
            if (value <= 16) {
                return 28;
            }
            if (value <= 17) {
                return 36;
            }
            if (value <= 18) {
                return 0;
            }
            if (value <= 19) {
                return 19;
            }
            if (value <= 21) {
                //  20,21 stay
                return 0;
            }
            if (value <= 22) {
                return 36;
            }
            if (value <= 24) {
                return 24;
            }
            return 0;
        }
        get displayValue() {
            let noteValue = this.displayValueWithoutBend;
            if (this.hasBend) {
                noteValue += (this.bendPoints[0].value / 2) | 0;
            }
            else if (this.bendOrigin) {
                noteValue += (this.bendOrigin.bendPoints[this.bendOrigin.bendPoints.length - 1].value / 2) | 0;
            }
            else if (this.isTieDestination && this.tieOrigin.bendOrigin) {
                noteValue +=
                    (this.tieOrigin.bendOrigin.bendPoints[this.tieOrigin.bendOrigin.bendPoints.length - 1].value / 2) | 0;
            }
            else if (this.beat.hasWhammyBar) {
                noteValue += (this.beat.whammyBarPoints[0].value / 2) | 0;
            }
            else if (this.beat.isContinuedWhammy) {
                noteValue +=
                    (this.beat.previousBeat.whammyBarPoints[this.beat.previousBeat.whammyBarPoints.length - 1].value /
                        2) |
                        0;
            }
            return noteValue;
        }
        get displayValueWithoutBend() {
            let noteValue = this.realValue;
            if (this.harmonicType !== HarmonicType.Natural && this.harmonicType !== HarmonicType.None) {
                noteValue -= this.harmonicPitch;
            }
            switch (this.beat.ottava) {
                case Ottavia._15ma:
                    noteValue -= 24;
                    break;
                case Ottavia._8va:
                    noteValue -= 12;
                    break;
                case Ottavia.Regular:
                    break;
                case Ottavia._8vb:
                    noteValue += 12;
                    break;
                case Ottavia._15mb:
                    noteValue += 24;
                    break;
            }
            switch (this.beat.voice.bar.clefOttava) {
                case Ottavia._15ma:
                    noteValue -= 24;
                    break;
                case Ottavia._8va:
                    noteValue -= 12;
                    break;
                case Ottavia.Regular:
                    break;
                case Ottavia._8vb:
                    noteValue += 12;
                    break;
                case Ottavia._15mb:
                    noteValue += 24;
                    break;
            }
            return noteValue - this.beat.voice.bar.staff.displayTranspositionPitch;
        }
        get hasQuarterToneOffset() {
            if (this.hasBend) {
                return this.bendPoints[0].value % 2 !== 0;
            }
            if (this.bendOrigin) {
                return this.bendOrigin.bendPoints[this.bendOrigin.bendPoints.length - 1].value % 2 !== 0;
            }
            if (this.beat.hasWhammyBar) {
                return this.beat.whammyBarPoints[0].value % 2 !== 0;
            }
            if (this.beat.isContinuedWhammy) {
                return (this.beat.previousBeat.whammyBarPoints[this.beat.previousBeat.whammyBarPoints.length - 1].value %
                    2 !==
                    0);
            }
            return false;
        }
        static copyTo(src, dst) {
            dst.id = src.id;
            dst.accentuated = src.accentuated;
            dst.fret = src.fret;
            dst.string = src.string;
            dst.harmonicValue = src.harmonicValue;
            dst.harmonicType = src.harmonicType;
            dst.isGhost = src.isGhost;
            dst.isLetRing = src.isLetRing;
            dst.isPalmMute = src.isPalmMute;
            dst.isDead = src.isDead;
            dst.isStaccato = src.isStaccato;
            dst.slideInType = src.slideInType;
            dst.slideOutType = src.slideOutType;
            dst.vibrato = src.vibrato;
            dst.isTieDestination = src.isTieDestination;
            dst.isSlurDestination = src.isSlurDestination;
            dst.isHammerPullOrigin = src.isHammerPullOrigin;
            dst.leftHandFinger = src.leftHandFinger;
            dst.rightHandFinger = src.rightHandFinger;
            dst.isFingering = src.isFingering;
            dst.trillValue = src.trillValue;
            dst.trillSpeed = src.trillSpeed;
            dst.durationPercent = src.durationPercent;
            dst.accidentalMode = src.accidentalMode;
            dst.dynamics = src.dynamics;
            dst.octave = src.octave;
            dst.tone = src.tone;
            dst.element = src.element;
            dst.variation = src.variation;
            dst.bendType = src.bendType;
            dst.bendStyle = src.bendStyle;
            dst.isContinuedBend = src.isContinuedBend;
            dst.isVisible = src.isVisible;
        }
        clone() {
            let n = new Note();
            let id = n.id;
            Note.copyTo(this, n);
            for (let i = 0, j = this.bendPoints.length; i < j; i++) {
                n.addBendPoint(this.bendPoints[i].clone());
            }
            n.id = id;
            return n;
        }
        addBendPoint(point) {
            this.bendPoints.push(point);
            if (!this.maxBendPoint || point.value > this.maxBendPoint.value) {
                this.maxBendPoint = point;
            }
            if (this.bendType === BendType.None) {
                this.bendType = BendType.Custom;
            }
        }
        finish(settings) {
            let nextNoteOnLine = new Lazy(() => Note.nextNoteOnSameLine(this));
            let isSongBook = settings && settings.notation.notationMode === exports.NotationMode.SongBook;
            // connect ties
            if (this.isTieDestination) {
                if (this.tieOrigin) {
                    this.tieOrigin.tieDestination = this;
                }
                else {
                    let tieOrigin = Note.findTieOrigin(this);
                    if (!tieOrigin) {
                        this.isTieDestination = false;
                    }
                    else {
                        this.tieOrigin = tieOrigin;
                        this.tieOrigin.tieDestination = this;
                        this.fret = this.tieOrigin.fret;
                        this.octave = this.tieOrigin.octave;
                        this.tone = this.tieOrigin.tone;
                        if (this.tieOrigin.hasBend) {
                            this.bendOrigin = this.tieOrigin;
                        }
                    }
                }
                // implicit let ring
                if (isSongBook && this.tieOrigin && this.tieOrigin.isLetRing) {
                    this.isLetRing = true;
                }
            }
            // connect letring
            if (this.isLetRing) {
                if (!nextNoteOnLine.value || !nextNoteOnLine.value.isLetRing) {
                    this.letRingDestination = this;
                }
                else {
                    this.letRingDestination = nextNoteOnLine.value;
                }
                if (isSongBook && this.isTieDestination && !this.tieOrigin.hasBend) {
                    this.isVisible = false;
                }
            }
            // connect palmmute
            if (this.isPalmMute) {
                if (!nextNoteOnLine.value || !nextNoteOnLine.value.isPalmMute) {
                    this.palmMuteDestination = this;
                }
                else {
                    this.palmMuteDestination = nextNoteOnLine.value;
                }
            }
            // set hammeron/pulloffs
            if (this.isHammerPullOrigin) {
                if (!nextNoteOnLine.value) {
                    this.isHammerPullOrigin = false;
                }
                else {
                    this.hammerPullDestination = nextNoteOnLine.value;
                    this.hammerPullDestination.hammerPullOrigin = this;
                }
            }
            // set slides
            switch (this.slideOutType) {
                case SlideOutType.Shift:
                case SlideOutType.Legato:
                    this.slideTarget = nextNoteOnLine.value;
                    if (!this.slideTarget) {
                        this.slideOutType = SlideOutType.None;
                    }
                    break;
            }
            let effectSlurDestination = null;
            if (this.isHammerPullOrigin) {
                effectSlurDestination = this.hammerPullDestination;
            }
            else if (this.slideOutType === SlideOutType.Legato && this.slideTarget) {
                effectSlurDestination = this.slideTarget;
            }
            if (effectSlurDestination) {
                this.hasEffectSlur = true;
                if (this.effectSlurOrigin) {
                    this.effectSlurOrigin.effectSlurDestination = effectSlurDestination;
                    this.effectSlurOrigin.effectSlurDestination.effectSlurOrigin = this.effectSlurOrigin;
                    this.effectSlurOrigin = null;
                }
                else {
                    this.isEffectSlurOrigin = true;
                    this.effectSlurDestination = effectSlurDestination;
                    this.effectSlurDestination.effectSlurOrigin = this;
                }
            }
            // try to detect what kind of bend was used and cleans unneeded points if required
            // Guitar Pro 6 and above (gpif.xml) uses exactly 4 points to define all bends
            if (this.bendPoints.length > 0 && this.bendType === BendType.Custom) {
                let isContinuedBend = (this.isContinuedBend = !!this.tieOrigin && this.tieOrigin.hasBend);
                if (this.bendPoints.length === 4) {
                    let origin = this.bendPoints[0];
                    let middle1 = this.bendPoints[1];
                    let middle2 = this.bendPoints[2];
                    let destination = this.bendPoints[3];
                    // the middle points are used for holds, anything else is a new feature we do not support yet
                    if (middle1.value === middle2.value) {
                        // bend higher?
                        if (destination.value > origin.value) {
                            if (middle1.value > destination.value) {
                                this.bendType = BendType.BendRelease;
                            }
                            else if (!isContinuedBend && origin.value > 0) {
                                this.bendType = BendType.PrebendBend;
                                this.bendPoints.splice(2, 1);
                                this.bendPoints.splice(1, 1);
                            }
                            else {
                                this.bendType = BendType.Bend;
                                this.bendPoints.splice(2, 1);
                                this.bendPoints.splice(1, 1);
                            }
                        }
                        else if (destination.value < origin.value) {
                            // origin must be > 0 otherwise it's no release, we cannot bend negative
                            if (isContinuedBend) {
                                this.bendType = BendType.Release;
                                this.bendPoints.splice(2, 1);
                                this.bendPoints.splice(1, 1);
                            }
                            else {
                                this.bendType = BendType.PrebendRelease;
                                this.bendPoints.splice(2, 1);
                                this.bendPoints.splice(1, 1);
                            }
                        }
                        else {
                            if (middle1.value > origin.value) {
                                this.bendType = BendType.BendRelease;
                            }
                            else if (origin.value > 0 && !isContinuedBend) {
                                this.bendType = BendType.Prebend;
                                this.bendPoints.splice(2, 1);
                                this.bendPoints.splice(1, 1);
                            }
                            else {
                                this.bendType = BendType.Hold;
                                this.bendPoints.splice(2, 1);
                                this.bendPoints.splice(1, 1);
                            }
                        }
                    }
                    else {
                        Logger.warning('Model', 'Unsupported bend type detected, fallback to custom', null);
                    }
                }
                else if (this.bendPoints.length === 2) {
                    let origin = this.bendPoints[0];
                    let destination = this.bendPoints[1];
                    // bend higher?
                    if (destination.value > origin.value) {
                        if (!isContinuedBend && origin.value > 0) {
                            this.bendType = BendType.PrebendBend;
                        }
                        else {
                            this.bendType = BendType.Bend;
                        }
                    }
                    else if (destination.value < origin.value) {
                        // origin must be > 0 otherwise it's no release, we cannot bend negative
                        if (isContinuedBend) {
                            this.bendType = BendType.Release;
                        }
                        else {
                            this.bendType = BendType.PrebendRelease;
                        }
                    }
                    else {
                        this.bendType = BendType.Hold;
                    }
                }
            }
            else if (this.bendPoints.length === 0) {
                this.bendType = BendType.None;
            }
        }
        static nextNoteOnSameLine(note) {
            let nextBeat = note.beat.nextBeat;
            // keep searching in same bar
            while (nextBeat && nextBeat.voice.bar.index <= note.beat.voice.bar.index + Note.MaxOffsetForSameLineSearch) {
                let noteOnString = nextBeat.getNoteOnString(note.string);
                if (noteOnString) {
                    return noteOnString;
                }
                nextBeat = nextBeat.nextBeat;
            }
            return null;
        }
        static findTieOrigin(note) {
            let previousBeat = note.beat.previousBeat;
            // keep searching in same bar
            while (previousBeat &&
                previousBeat.voice.bar.index >= note.beat.voice.bar.index - Note.MaxOffsetForSameLineSearch) {
                if (note.isStringed) {
                    let noteOnString = previousBeat.getNoteOnString(note.string);
                    if (noteOnString) {
                        return noteOnString;
                    }
                }
                else {
                    if (note.octave === -1 && note.tone === -1) {
                        // if the note has no value (e.g. alphaTex dash tie), we try to find a matching
                        // note on the previous beat by index.
                        if (note.index < previousBeat.notes.length) {
                            return previousBeat.notes[note.index];
                        }
                    }
                    else {
                        let noteWithValue = previousBeat.getNoteWithRealValue(note.realValue);
                        if (noteWithValue) {
                            return noteWithValue;
                        }
                    }
                }
                previousBeat = previousBeat.previousBeat;
            }
            return null;
        }
    }
    Note.GlobalNoteId = 0;
    Note.MaxOffsetForSameLineSearch = 3;

    /**
     * Lists all types of pick strokes.
     */
    var PickStroke;
    (function (PickStroke) {
        /**
         * No pickstroke used.
         */
        PickStroke[PickStroke["None"] = 0] = "None";
        /**
         * Pickstroke up.
         */
        PickStroke[PickStroke["Up"] = 1] = "Up";
        /**
         * Pickstroke down
         */
        PickStroke[PickStroke["Down"] = 2] = "Down";
    })(PickStroke || (PickStroke = {}));

    /**
     * Represents a list of beats that are grouped within the same tuplet.
     */
    class TupletGroup {
        /**
         * Initializes a new instance of the {@link TupletGroup} class.
         * @param voice The voice this group belongs to.
         */
        constructor(voice) {
            this._isEqualLengthTuplet = true;
            this.totalDuration = 0;
            /**
             * Gets or sets the list of beats contained in this group.
             */
            this.beats = [];
            /**
             * Gets a value indicating whether the tuplet group is fully filled.
             */
            this.isFull = false;
            this.voice = voice;
        }
        check(beat) {
            if (this.beats.length === 0) {
                // accept first beat
                this.beats.push(beat);
                this.totalDuration += beat.playbackDuration;
                return true;
            }
            if (beat.graceType !== GraceType.None) {
                // grace notes do not break tuplet group, but also do not contribute to them.
                return true;
            }
            if (beat.voice !== this.voice ||
                this.isFull ||
                beat.tupletNumerator !== this.beats[0].tupletNumerator ||
                beat.tupletDenominator !== this.beats[0].tupletDenominator) {
                // only same tuplets are potentially accepted
                return false;
            }
            // TBH: I do not really know how the 100% tuplet grouping of Guitar Pro might work
            // it sometimes has really strange rules where notes filling 3 quarters, are considered a full 3:2 tuplet
            // in alphaTab we have now 2 rules where we consider a tuplet full:
            // 1. if all beats have the same length, the tuplet must contain N notes of an N:M tuplet
            // 2. if we have mixed beats, we check if the current set of beats, matches a N:M tuplet
            //    by checking all potential note durations.
            // this logic is very likely not 100% correct but for most cases the tuplets
            // appeared correct.
            if (beat.playbackDuration !== this.beats[0].playbackDuration) {
                this._isEqualLengthTuplet = false;
            }
            this.beats.push(beat);
            this.totalDuration += beat.playbackDuration;
            if (this._isEqualLengthTuplet) {
                if (this.beats.length === this.beats[0].tupletNumerator) {
                    this.isFull = true;
                }
            }
            else {
                let factor = (this.beats[0].tupletNumerator / this.beats[0].tupletDenominator) | 0;
                for (let potentialMatch of TupletGroup.AllTicks) {
                    if (this.totalDuration === potentialMatch * factor) {
                        this.isFull = true;
                        break;
                    }
                }
            }
            return true;
        }
    }
    TupletGroup.HalfTicks = 1920;
    TupletGroup.QuarterTicks = 960;
    TupletGroup.EighthTicks = 480;
    TupletGroup.SixteenthTicks = 240;
    TupletGroup.ThirtySecondTicks = 120;
    TupletGroup.SixtyFourthTicks = 60;
    TupletGroup.OneHundredTwentyEighthTicks = 30;
    TupletGroup.TwoHundredFiftySixthTicks = 15;
    TupletGroup.AllTicks = [
        TupletGroup.HalfTicks,
        TupletGroup.QuarterTicks,
        TupletGroup.EighthTicks,
        TupletGroup.SixteenthTicks,
        TupletGroup.ThirtySecondTicks,
        TupletGroup.SixtyFourthTicks,
        TupletGroup.OneHundredTwentyEighthTicks,
        TupletGroup.TwoHundredFiftySixthTicks
    ];

    /**
     * Lists all types of whammy bars
     */
    var WhammyType;
    (function (WhammyType) {
        /**
         * No whammy at all
         */
        WhammyType[WhammyType["None"] = 0] = "None";
        /**
         * Individual points define the whammy in a flexible manner.
         * This system was mainly used in Guitar Pro 3-5
         */
        WhammyType[WhammyType["Custom"] = 1] = "Custom";
        /**
         * Simple dive to a lower or higher note.
         */
        WhammyType[WhammyType["Dive"] = 2] = "Dive";
        /**
         * A dive to a lower or higher note and releasing it back to normal.
         */
        WhammyType[WhammyType["Dip"] = 3] = "Dip";
        /**
         * Continue to hold the whammy at the position from a previous whammy.
         */
        WhammyType[WhammyType["Hold"] = 4] = "Hold";
        /**
         * Dive to a lower or higher note before playing it.
         */
        WhammyType[WhammyType["Predive"] = 5] = "Predive";
        /**
         * Dive to a lower or higher note before playing it, then change to another
         * note.
         */
        WhammyType[WhammyType["PrediveDive"] = 6] = "PrediveDive";
    })(WhammyType || (WhammyType = {}));

    /**
     * A beat is a single block within a bar. A beat is a combination
     * of several notes played at the same time.
     */
    class Beat {
        constructor() {
            /**
             * Gets or sets the unique id of this beat.
             */
            this.id = Beat._globalBeatId++;
            /**
             * Gets or sets the zero-based index of this beat within the voice.
             */
            this.index = 0;
            /**
             * Gets or sets the previous beat within the whole song.
             */
            this.previousBeat = null;
            /**
             * Gets or sets the next beat within the whole song.
             */
            this.nextBeat = null;
            /**
             * Gets or sets the list of notes contained in this beat.
             */
            this.notes = [];
            /**
             * Gets the lookup where the notes per string are registered.
             * If this staff contains string based notes this lookup allows fast access.
             */
            this.noteStringLookup = new Map();
            /**
             * Gets the lookup where the notes per value are registered.
             * If this staff contains string based notes this lookup allows fast access.
             */
            this.noteValueLookup = new Map();
            /**
             * Gets or sets a value indicating whether this beat is considered empty.
             */
            this.isEmpty = false;
            /**
             * Gets or sets which whammy bar style should be used for this bar.
             */
            this.whammyStyle = BendStyle.Default;
            /**
             * Gets or sets the ottava applied to this beat.
             */
            this.ottava = Ottavia.Regular;
            /**
             * Gets or sets the fermata applied to this beat.
             */
            this.fermata = null;
            /**
             * Gets a value indicating whether this beat starts a legato slur.
             */
            this.isLegatoOrigin = false;
            /**
             * Gets or sets the note with the lowest pitch in this beat. Only visible notes are considered.
             */
            this.minNote = null;
            /**
             * Gets or sets the note with the highest pitch in this beat. Only visible notes are considered.
             */
            this.maxNote = null;
            /**
             * Gets or sets the note with the highest string number in this beat. Only visible notes are considered.
             */
            this.maxStringNote = null;
            /**
             * Gets or sets the note with the lowest string number in this beat. Only visible notes are considered.
             */
            this.minStringNote = null;
            /**
             * Gets or sets the duration of this beat.
             */
            this.duration = Duration.Quarter;
            /**
             * Gets or sets whether any note in this beat has a let-ring applied.
             */
            this.isLetRing = false;
            /**
             * Gets or sets whether any note in this beat has a palm-mute paplied.
             */
            this.isPalmMute = false;
            /**
             * Gets or sets a list of all automations on this beat.
             */
            this.automations = [];
            /**
             * Gets or sets the number of dots applied to the duration of this beat.
             */
            this.dots = 0;
            /**
             * Gets or sets a value indicating whether this beat is fade-in.
             */
            this.fadeIn = false;
            /**
             * Gets or sets the lyrics shown on this beat.
             */
            this.lyrics = null;
            /**
             * Gets or sets a value indicating whether the beat is played in rasgueado style.
             */
            this.hasRasgueado = false;
            /**
             * Gets or sets a value indicating whether the notes on this beat are played with a pop-style (bass).
             */
            this.pop = false;
            /**
             * Gets or sets a value indicating whether the notes on this beat are played with a slap-style (bass).
             */
            this.slap = false;
            /**
             * Gets or sets a value indicating whether the notes on this beat are played with a tap-style (bass).
             */
            this.tap = false;
            /**
             * Gets or sets the text annotation shown on this beat.
             */
            this.text = null;
            /**
             * Gets or sets the brush type applied to the notes of this beat.
             */
            this.brushType = BrushType.None;
            /**
             * Gets or sets the duration of the brush between the notes in midi ticks.
             */
            this.brushDuration = 0;
            /**
             * Gets or sets the tuplet denominator.
             */
            this.tupletDenominator = -1;
            /**
             * Gets or sets the tuplet numerator.
             */
            this.tupletNumerator = -1;
            this.tupletGroup = null;
            /**
             * Gets or sets whether this beat continues a whammy effect.
             */
            this.isContinuedWhammy = false;
            /**
             * Gets or sets the whammy bar style of this beat.
             */
            this.whammyBarType = WhammyType.None;
            /**
             * Gets or sets the points defining the whammy bar usage.
             */
            this.whammyBarPoints = [];
            /**
             * Gets or sets the highest point with for the highest whammy bar value.
             */
            this.maxWhammyPoint = null;
            /**
             * Gets or sets the highest point with for the lowest whammy bar value.
             */
            this.minWhammyPoint = null;
            /**
             * Gets or sets the vibrato effect used on this beat.
             */
            this.vibrato = VibratoType.None;
            /**
             * Gets or sets the ID of the chord used on this beat.
             */
            this.chordId = null;
            /**
             * Gets or sets the grace style of this beat.
             */
            this.graceType = GraceType.None;
            /**
             * Gets or sets the pickstroke applied on this beat.
             */
            this.pickStroke = PickStroke.None;
            /**
             * Gets or sets the speed of the tremolo effect.
             */
            this.tremoloSpeed = null;
            /**
             * Gets or sets whether a crescendo/decrescendo is applied on this beat.
             */
            this.crescendo = CrescendoType.None;
            /**
             * The timeline position of the voice within the current bar as it is displayed. (unit: midi ticks)
             * This might differ from the actual playback time due to special grace types.
             */
            this.displayStart = 0;
            /**
             * The timeline position of the voice within the current bar as it is played. (unit: midi ticks)
             * This might differ from the actual playback time due to special grace types.
             */
            this.playbackStart = 0;
            /**
             * Gets or sets the duration that is used for the display of this beat. It defines the size/width of the beat in
             * the music sheet. (unit: midi ticks).
             */
            this.displayDuration = 0;
            /**
             * Gets or sets the duration that the note is played during the audio generation.
             */
            this.playbackDuration = 0;
            /**
             * Gets or sets the dynamics applied to this beat.
             */
            this.dynamics = DynamicValue.F;
            /**
             * Gets or sets a value indicating whether the beam direction should be inverted.
             */
            this.invertBeamDirection = false;
            this.isEffectSlurOrigin = false;
            this.effectSlurOrigin = null;
            this.effectSlurDestination = null;
        }
        get isLastOfVoice() {
            return this.index === this.voice.beats.length - 1;
        }
        get isLegatoDestination() {
            return !!this.previousBeat && this.previousBeat.isLegatoOrigin;
        }
        get isRest() {
            return this.isEmpty || this.notes.length === 0;
        }
        get hasTuplet() {
            return (!(this.tupletDenominator === -1 && this.tupletNumerator === -1) &&
                !(this.tupletDenominator === 1 && this.tupletNumerator === 1));
        }
        get hasWhammyBar() {
            return this.whammyBarType !== WhammyType.None;
        }
        get hasChord() {
            return !!this.chordId;
        }
        get chord() {
            return this.chordId ? this.voice.bar.staff.chords.get(this.chordId) : null;
        }
        get isTremolo() {
            return !!this.tremoloSpeed;
        }
        get absoluteDisplayStart() {
            return this.voice.bar.masterBar.start + this.displayStart;
        }
        get absolutePlaybackStart() {
            return this.voice.bar.masterBar.start + this.playbackStart;
        }
        get isEffectSlurDestination() {
            return !!this.effectSlurOrigin;
        }
        static copyTo(src, dst) {
            dst.id = src.id;
            dst.index = src.index;
            dst.isEmpty = src.isEmpty;
            dst.duration = src.duration;
            dst.dots = src.dots;
            dst.fadeIn = src.fadeIn;
            if (src.lyrics) {
                dst.lyrics = new Array(src.lyrics.length);
                for (let i = 0; i < src.lyrics.length; i++) {
                    dst.lyrics[i] = src.lyrics[i];
                }
            }
            dst.pop = src.pop;
            dst.hasRasgueado = src.hasRasgueado;
            dst.slap = src.slap;
            dst.tap = src.tap;
            dst.text = src.text;
            dst.brushType = src.brushType;
            dst.brushDuration = src.brushDuration;
            dst.tupletDenominator = src.tupletDenominator;
            dst.tupletNumerator = src.tupletNumerator;
            dst.vibrato = src.vibrato;
            dst.chordId = src.chordId;
            dst.graceType = src.graceType;
            dst.pickStroke = src.pickStroke;
            dst.tremoloSpeed = src.tremoloSpeed;
            dst.crescendo = src.crescendo;
            dst.displayStart = src.displayStart;
            dst.displayDuration = src.displayDuration;
            dst.playbackStart = src.playbackStart;
            dst.playbackDuration = src.playbackDuration;
            dst.dynamics = src.dynamics;
            dst.isLegatoOrigin = src.isLegatoOrigin;
            dst.invertBeamDirection = src.invertBeamDirection;
            dst.whammyBarType = src.whammyBarType;
            dst.isContinuedWhammy = src.isContinuedWhammy;
            dst.ottava = src.ottava;
            dst.whammyStyle = src.whammyStyle;
        }
        clone() {
            let beat = new Beat();
            let id = beat.id;
            for (const p of this.whammyBarPoints) {
                beat.addWhammyBarPoint(p.clone());
            }
            for (const n of this.notes) {
                beat.addNoteInternal(n.clone(), n.realValue);
            }
            Beat.copyTo(this, beat);
            for (const a of this.automations) {
                beat.automations.push(a.clone());
            }
            beat.id = id;
            return beat;
        }
        addWhammyBarPoint(point) {
            this.whammyBarPoints.push(point);
            if (!this.maxWhammyPoint || point.value > this.maxWhammyPoint.value) {
                this.maxWhammyPoint = point;
            }
            if (!this.minWhammyPoint || point.value < this.minWhammyPoint.value) {
                this.minWhammyPoint = point;
            }
            if (this.whammyBarType === WhammyType.None) {
                this.whammyBarType = WhammyType.Custom;
            }
        }
        removeWhammyBarPoint(index) {
            // check index
            if (index < 0 || index >= this.whammyBarPoints.length) {
                return;
            }
            // remove point
            this.whammyBarPoints.splice(index, 1);
            let point = this.whammyBarPoints[index];
            // update maxWhammy point if required
            if (point === this.maxWhammyPoint) {
                this.maxWhammyPoint = null;
                for (let currentPoint of this.whammyBarPoints) {
                    if (!this.maxWhammyPoint || currentPoint.value > this.maxWhammyPoint.value) {
                        this.maxWhammyPoint = currentPoint;
                    }
                }
            }
            if (point === this.minWhammyPoint) {
                this.minWhammyPoint = null;
                for (let currentPoint of this.whammyBarPoints) {
                    if (!this.minWhammyPoint || currentPoint.value < this.minWhammyPoint.value) {
                        this.minWhammyPoint = currentPoint;
                    }
                }
            }
        }
        addNote(note) {
            this.addNoteInternal(note, -1);
        }
        addNoteInternal(note, realValue = -1) {
            note.beat = this;
            note.index = this.notes.length;
            this.notes.push(note);
            if (note.isStringed) {
                this.noteStringLookup.set(note.string, note);
            }
            if (realValue === -1) {
                realValue = note.realValue;
            }
            this.noteValueLookup.set(realValue, note);
        }
        removeNote(note) {
            let index = this.notes.indexOf(note);
            if (index >= 0) {
                this.notes.splice(index, 1);
            }
        }
        getAutomation(type) {
            for (let i = 0, j = this.automations.length; i < j; i++) {
                let automation = this.automations[i];
                if (automation.type === type) {
                    return automation;
                }
            }
            return null;
        }
        getNoteOnString(noteString) {
            if (this.noteStringLookup.has(noteString)) {
                return this.noteStringLookup.get(noteString);
            }
            return null;
        }
        calculateDuration() {
            let ticks = MidiUtils.toTicks(this.duration);
            if (this.dots === 2) {
                ticks = MidiUtils.applyDot(ticks, true);
            }
            else if (this.dots === 1) {
                ticks = MidiUtils.applyDot(ticks, false);
            }
            if (this.tupletDenominator > 0 && this.tupletNumerator >= 0) {
                ticks = MidiUtils.applyTuplet(ticks, this.tupletNumerator, this.tupletDenominator);
            }
            return ticks;
        }
        updateDurations() {
            let ticks = this.calculateDuration();
            this.playbackDuration = ticks;
            this.displayDuration = ticks;
            switch (this.graceType) {
                case GraceType.BeforeBeat:
                case GraceType.OnBeat:
                    switch (this.duration) {
                        case Duration.Sixteenth:
                            this.playbackDuration = MidiUtils.toTicks(Duration.SixtyFourth);
                            break;
                        case Duration.ThirtySecond:
                            this.playbackDuration = MidiUtils.toTicks(Duration.OneHundredTwentyEighth);
                            break;
                        default:
                            this.playbackDuration = MidiUtils.toTicks(Duration.ThirtySecond);
                            break;
                    }
                    break;
                case GraceType.BendGrace:
                    this.playbackDuration /= 2;
                    break;
                default:
                    let previous = this.previousBeat;
                    if (previous && previous.graceType === GraceType.BendGrace) {
                        this.playbackDuration = previous.playbackDuration;
                    }
                    else {
                        while (previous && previous.graceType === GraceType.OnBeat) {
                            // if the previous beat is a on-beat grace it steals the duration from this beat
                            this.playbackDuration -= previous.playbackDuration;
                            previous = previous.previousBeat;
                        }
                    }
                    break;
            }
        }
        finishTuplet() {
            let previousBeat = this.previousBeat;
            let currentTupletGroup = previousBeat ? previousBeat.tupletGroup : null;
            if (this.hasTuplet || (this.graceType !== GraceType.None && currentTupletGroup)) {
                if (!previousBeat || !currentTupletGroup || !currentTupletGroup.check(this)) {
                    currentTupletGroup = new TupletGroup(this.voice);
                    currentTupletGroup.check(this);
                }
                this.tupletGroup = currentTupletGroup;
            }
        }
        finish(settings) {
            let displayMode = !settings ? exports.NotationMode.GuitarPro : settings.notation.notationMode;
            let isGradual = this.text === 'grad' || this.text === 'grad.';
            if (isGradual && displayMode === exports.NotationMode.SongBook) {
                this.text = '';
            }
            let needCopyBeatForBend = false;
            this.minNote = null;
            this.maxNote = null;
            this.minStringNote = null;
            this.maxStringNote = null;
            let visibleNotes = 0;
            let isEffectSlurBeat = false;
            for (let i = 0, j = this.notes.length; i < j; i++) {
                let note = this.notes[i];
                note.finish(settings);
                if (note.isLetRing) {
                    this.isLetRing = true;
                }
                if (note.isPalmMute) {
                    this.isPalmMute = true;
                }
                if (displayMode === exports.NotationMode.SongBook && note.hasBend && this.graceType !== GraceType.BendGrace) {
                    if (!note.isTieOrigin) {
                        switch (note.bendType) {
                            case BendType.Bend:
                            case BendType.PrebendRelease:
                            case BendType.PrebendBend:
                                needCopyBeatForBend = true;
                                break;
                        }
                    }
                    if (isGradual || note.bendStyle === BendStyle.Gradual) {
                        isGradual = true;
                        note.bendStyle = BendStyle.Gradual;
                        needCopyBeatForBend = false;
                    }
                    else {
                        note.bendStyle = BendStyle.Fast;
                    }
                }
                if (note.isVisible) {
                    visibleNotes++;
                    if (!this.minNote || note.realValue < this.minNote.realValue) {
                        this.minNote = note;
                    }
                    if (!this.maxNote || note.realValue > this.maxNote.realValue) {
                        this.maxNote = note;
                    }
                    if (!this.minStringNote || note.string < this.minStringNote.string) {
                        this.minStringNote = note;
                    }
                    if (!this.maxStringNote || note.string > this.maxStringNote.string) {
                        this.maxStringNote = note;
                    }
                    if (note.hasEffectSlur) {
                        isEffectSlurBeat = true;
                    }
                }
            }
            if (isEffectSlurBeat) {
                if (this.effectSlurOrigin) {
                    this.effectSlurOrigin.effectSlurDestination = this.nextBeat;
                    if (this.effectSlurOrigin.effectSlurDestination) {
                        this.effectSlurOrigin.effectSlurDestination.effectSlurOrigin = this.effectSlurOrigin;
                    }
                    this.effectSlurOrigin = null;
                }
                else {
                    this.isEffectSlurOrigin = true;
                    this.effectSlurDestination = this.nextBeat;
                    if (this.effectSlurDestination) {
                        this.effectSlurDestination.effectSlurOrigin = this;
                    }
                }
            }
            if (this.notes.length > 0 && visibleNotes === 0) {
                this.isEmpty = true;
            }
            // we need to clean al letring/palmmute flags for rests
            // in case the effect is not continued on this beat
            if (!this.isRest && (!this.isLetRing || !this.isPalmMute)) {
                let currentBeat = this.previousBeat;
                while (currentBeat && currentBeat.isRest) {
                    if (!this.isLetRing) {
                        currentBeat.isLetRing = false;
                    }
                    if (!this.isPalmMute) {
                        currentBeat.isPalmMute = false;
                    }
                    currentBeat = currentBeat.previousBeat;
                }
            }
            else if (this.isRest &&
                this.previousBeat &&
                settings &&
                settings.notation.notationMode === exports.NotationMode.GuitarPro) {
                if (this.previousBeat.isLetRing) {
                    this.isLetRing = true;
                }
                if (this.previousBeat.isPalmMute) {
                    this.isPalmMute = true;
                }
            }
            // try to detect what kind of bend was used and cleans unneeded points if required
            // Guitar Pro 6 and above (gpif.xml) uses exactly 4 points to define all whammys
            if (this.whammyBarPoints.length > 0 && this.whammyBarType === WhammyType.Custom) {
                if (displayMode === exports.NotationMode.SongBook) {
                    this.whammyStyle = isGradual ? BendStyle.Gradual : BendStyle.Fast;
                }
                let isContinuedWhammy = !!this.previousBeat && this.previousBeat.hasWhammyBar;
                this.isContinuedWhammy = isContinuedWhammy;
                if (this.whammyBarPoints.length === 4) {
                    let origin = this.whammyBarPoints[0];
                    let middle1 = this.whammyBarPoints[1];
                    let middle2 = this.whammyBarPoints[2];
                    let destination = this.whammyBarPoints[3];
                    // the middle points are used for holds, anything else is a new feature we do not support yet
                    if (middle1.value === middle2.value) {
                        // constant decrease or increase
                        if ((origin.value < middle1.value && middle1.value < destination.value) ||
                            (origin.value > middle1.value && middle1.value > destination.value)) {
                            if (origin.value !== 0 && !isContinuedWhammy) {
                                this.whammyBarType = WhammyType.PrediveDive;
                            }
                            else {
                                this.whammyBarType = WhammyType.Dive;
                            }
                            this.whammyBarPoints.splice(2, 1);
                            this.whammyBarPoints.splice(1, 1);
                        }
                        else if ((origin.value > middle1.value && middle1.value < destination.value) ||
                            (origin.value < middle1.value && middle1.value > destination.value)) {
                            this.whammyBarType = WhammyType.Dip;
                            if (middle1.offset === middle2.offset || displayMode === exports.NotationMode.SongBook) {
                                this.whammyBarPoints.splice(2, 1);
                            }
                        }
                        else if (origin.value === middle1.value && middle1.value === destination.value) {
                            if (origin.value !== 0 && !isContinuedWhammy) {
                                this.whammyBarType = WhammyType.Predive;
                            }
                            else {
                                this.whammyBarType = WhammyType.Hold;
                            }
                            this.whammyBarPoints.splice(2, 1);
                            this.whammyBarPoints.splice(1, 1);
                        }
                        else {
                            Logger.warning('Model', 'Unsupported whammy type detected, fallback to custom', null);
                        }
                    }
                    else {
                        Logger.warning('Model', 'Unsupported whammy type detected, fallback to custom', null);
                    }
                }
            }
            this.updateDurations();
            if (needCopyBeatForBend) {
                // if this beat is a simple bend convert it to a grace beat
                // and generate a placeholder beat with tied notes
                let cloneBeat = this.clone();
                cloneBeat.id = Beat._globalBeatId++;
                for (let i = 0, j = cloneBeat.notes.length; i < j; i++) {
                    let cloneNote = cloneBeat.notes[i];
                    // remove bend on cloned note
                    cloneNote.bendType = BendType.None;
                    cloneNote.maxBendPoint = null;
                    cloneNote.bendPoints = [];
                    cloneNote.bendStyle = BendStyle.Default;
                    cloneNote.id = Note.GlobalNoteId++;
                    // if the note has a bend which is continued on the next note
                    // we need to convert this note into a hold bend
                    let note = this.notes[i];
                    if (note.hasBend && note.isTieOrigin) {
                        let tieDestination = Note.nextNoteOnSameLine(note);
                        if (tieDestination && tieDestination.hasBend) {
                            cloneNote.bendType = BendType.Hold;
                            let lastPoint = note.bendPoints[note.bendPoints.length - 1];
                            cloneNote.addBendPoint(new BendPoint(0, lastPoint.value));
                            cloneNote.addBendPoint(new BendPoint(BendPoint.MaxPosition, lastPoint.value));
                        }
                    }
                    // mark as tied note
                    cloneNote.isTieDestination = true;
                }
                this.graceType = GraceType.BendGrace;
                this.updateDurations();
                this.voice.insertBeat(this, cloneBeat);
            }
            this.fermata = this.voice.bar.masterBar.getFermata(this);
        }
        /**
         * Checks whether the current beat is timewise before the given beat.
         * @param beat
         * @returns
         */
        isBefore(beat) {
            return (this.voice.bar.index < beat.voice.bar.index ||
                (beat.voice.bar.index === this.voice.bar.index && this.index < beat.index));
        }
        /**
         * Checks whether the current beat is timewise after the given beat.
         * @param beat
         * @returns
         */
        isAfter(beat) {
            return (this.voice.bar.index > beat.voice.bar.index ||
                (beat.voice.bar.index === this.voice.bar.index && this.index > beat.index));
        }
        hasNoteOnString(noteString) {
            return this.noteStringLookup.has(noteString);
        }
        getNoteWithRealValue(noteRealValue) {
            if (this.noteValueLookup.has(noteRealValue)) {
                return this.noteValueLookup.get(noteRealValue);
            }
            return null;
        }
    }
    Beat._globalBeatId = 0;

    /**
     * A chord definition.
     */
    class Chord {
        constructor() {
            /**
             * Gets or sets the name of the chord
             */
            this.name = '';
            /**
             * Indicates the first fret of the chord diagram.
             */
            this.firstFret = 1;
            /**
             * Gets or sets the frets played on the individual strings for this chord.
             * - The order in this list goes from the highest string to the lowest string.
             * - -1 indicates that the string is not played.
             */
            this.strings = [];
            /**
             * Gets or sets a list of frets where the finger should hold a barre
             */
            this.barreFrets = [];
            /**
             * Gets or sets whether the chord name is shown above the chord diagram.
             */
            this.showName = true;
            /**
             * Gets or sets whether the chord diagram is shown.
             */
            this.showDiagram = true;
            /**
             * Gets or sets whether the fingering is shown below the chord diagram.
             */
            this.showFingering = true;
        }
        static copyTo(src, dst) {
            dst.firstFret = src.firstFret;
            dst.name = src.name;
            dst.strings = src.strings.slice(0);
            dst.barreFrets = src.barreFrets.slice(0);
            dst.showName = src.showName;
            dst.showDiagram = src.showDiagram;
            dst.showFingering = src.showFingering;
        }
    }

    var LyricsState;
    (function (LyricsState) {
        LyricsState[LyricsState["IgnoreSpaces"] = 0] = "IgnoreSpaces";
        LyricsState[LyricsState["Begin"] = 1] = "Begin";
        LyricsState[LyricsState["Text"] = 2] = "Text";
        LyricsState[LyricsState["Comment"] = 3] = "Comment";
        LyricsState[LyricsState["Dash"] = 4] = "Dash";
    })(LyricsState || (LyricsState = {}));
    /**
     * Represents the lyrics of a song.
     */
    class Lyrics {
        constructor() {
            /**
             * Gets or sets he start bar on which the lyrics should begin.
             */
            this.startBar = 0;
            /**
             * Gets or sets the raw lyrics text in Guitar Pro format.
             * (spaces split word syllables, plus merge syllables, [..] are comments)
             */
            this.text = '';
        }
        finish() {
            this.chunks = [];
            this.parse(this.text, 0, this.chunks);
        }
        parse(str, p, chunks) {
            if (!str) {
                return;
            }
            let state = LyricsState.Begin;
            let next = LyricsState.Begin;
            let skipSpace = false;
            let start = 0;
            while (p < str.length) {
                let c = str.charCodeAt(p);
                switch (state) {
                    case LyricsState.IgnoreSpaces:
                        switch (c) {
                            case Lyrics.CharCodeLF:
                            case Lyrics.CharCodeCR:
                            case Lyrics.CharCodeTab:
                                break;
                            case Lyrics.CharCodeSpace:
                                if (!skipSpace) {
                                    state = next;
                                    continue;
                                }
                                break;
                            default:
                                skipSpace = false;
                                state = next;
                                continue;
                        }
                        break;
                    case LyricsState.Begin:
                        switch (c) {
                            case Lyrics.CharCodeBrackedOpen:
                                state = LyricsState.Comment;
                                break;
                            default:
                                start = p;
                                state = LyricsState.Text;
                                continue;
                        }
                        break;
                    case LyricsState.Comment:
                        switch (c) {
                            case Lyrics.CharCodeBrackedClose:
                                state = LyricsState.Begin;
                                break;
                        }
                        break;
                    case LyricsState.Text:
                        switch (c) {
                            case Lyrics.CharCodeDash:
                                state = LyricsState.Dash;
                                break;
                            case Lyrics.CharCodeCR:
                            case Lyrics.CharCodeLF:
                            case Lyrics.CharCodeSpace:
                                let txt = str.substr(start, p - start);
                                chunks.push(this.prepareChunk(txt));
                                state = LyricsState.IgnoreSpaces;
                                next = LyricsState.Begin;
                                break;
                        }
                        break;
                    case LyricsState.Dash:
                        switch (c) {
                            case Lyrics.CharCodeDash:
                                break;
                            default:
                                let txt = str.substr(start, p - start);
                                chunks.push(this.prepareChunk(txt));
                                skipSpace = true;
                                state = LyricsState.IgnoreSpaces;
                                next = LyricsState.Begin;
                                continue;
                        }
                        break;
                }
                p++;
            }
            if (state === LyricsState.Text) {
                if (p !== start) {
                    chunks.push(str.substr(start, p - start));
                }
            }
        }
        prepareChunk(txt) {
            return txt.split('+').join(' ');
        }
    }
    Lyrics.CharCodeLF = 10;
    Lyrics.CharCodeTab = 9;
    Lyrics.CharCodeCR = 13;
    Lyrics.CharCodeSpace = 32;
    Lyrics.CharCodeBrackedClose = 93;
    Lyrics.CharCodeBrackedOpen = 91;
    Lyrics.CharCodeDash = 45;

    /**
     * This public enumeration lists all available key signatures
     */
    var KeySignature;
    (function (KeySignature) {
        /**
         * Cb (7 flats)
         */
        KeySignature[KeySignature["Cb"] = -7] = "Cb";
        /**
         * Gb (6 flats)
         */
        KeySignature[KeySignature["Gb"] = -6] = "Gb";
        /**
         * Db (5 flats)
         */
        KeySignature[KeySignature["Db"] = -5] = "Db";
        /**
         * Ab (4 flats)
         */
        KeySignature[KeySignature["Ab"] = -4] = "Ab";
        /**
         * Eb (3 flats)
         */
        KeySignature[KeySignature["Eb"] = -3] = "Eb";
        /**
         * Bb (2 flats)
         */
        KeySignature[KeySignature["Bb"] = -2] = "Bb";
        /**
         * F (1 flat)
         */
        KeySignature[KeySignature["F"] = -1] = "F";
        /**
         * C (no signs)
         */
        KeySignature[KeySignature["C"] = 0] = "C";
        /**
         * G (1 sharp)
         */
        KeySignature[KeySignature["G"] = 1] = "G";
        /**
         * D (2 sharp)
         */
        KeySignature[KeySignature["D"] = 2] = "D";
        /**
         * A (3 sharp)
         */
        KeySignature[KeySignature["A"] = 3] = "A";
        /**
         * E (4 sharp)
         */
        KeySignature[KeySignature["E"] = 4] = "E";
        /**
         * B (5 sharp)
         */
        KeySignature[KeySignature["B"] = 5] = "B";
        /**
         * F# (6 sharp)
         */
        KeySignature[KeySignature["FSharp"] = 6] = "FSharp";
        /**
         * C# (8 sharp)
         */
        KeySignature[KeySignature["CSharp"] = 7] = "CSharp";
    })(KeySignature || (KeySignature = {}));

    /**
     * This public enumeration lists all available types of KeySignatures
     */
    var KeySignatureType;
    (function (KeySignatureType) {
        /**
         * Major
         */
        KeySignatureType[KeySignatureType["Major"] = 0] = "Major";
        /**
         * Minor
         */
        KeySignatureType[KeySignatureType["Minor"] = 1] = "Minor";
    })(KeySignatureType || (KeySignatureType = {}));

    /**
     * This public enumeration lists all feels of triplets.
     */
    var TripletFeel;
    (function (TripletFeel) {
        /**
         * No triplet feel
         */
        TripletFeel[TripletFeel["NoTripletFeel"] = 0] = "NoTripletFeel";
        /**
         * Triplet 16th
         */
        TripletFeel[TripletFeel["Triplet16th"] = 1] = "Triplet16th";
        /**
         * Triplet 8th
         */
        TripletFeel[TripletFeel["Triplet8th"] = 2] = "Triplet8th";
        /**
         * Dotted 16th
         */
        TripletFeel[TripletFeel["Dotted16th"] = 3] = "Dotted16th";
        /**
         * Dotted 8th
         */
        TripletFeel[TripletFeel["Dotted8th"] = 4] = "Dotted8th";
        /**
         * Scottish 16th
         */
        TripletFeel[TripletFeel["Scottish16th"] = 5] = "Scottish16th";
        /**
         * Scottish 8th
         */
        TripletFeel[TripletFeel["Scottish8th"] = 6] = "Scottish8th";
    })(TripletFeel || (TripletFeel = {}));

    /**
     * The MasterBar stores information about a bar which affects
     * all tracks.
     */
    class MasterBar {
        constructor() {
            /**
             * Gets or sets the bitflag for the alternate endings. Each bit defines for which repeat counts
             * the bar is played.
             */
            this.alternateEndings = 0;
            /**
             * Gets or sets the next masterbar in the song.
             */
            this.nextMasterBar = null;
            /**
             * Gets or sets the next masterbar in the song.
             */
            this.previousMasterBar = null;
            /**
             * Gets the zero based index of the masterbar.
             */
            this.index = 0;
            /**
             * Gets or sets the key signature used on all bars.
             */
            this.keySignature = KeySignature.C;
            /**
             * Gets or sets the type of key signature (major/minor)
             */
            this.keySignatureType = KeySignatureType.Major;
            /**
             * Gets or sets whether a double bar is shown for this masterbar.
             */
            this.isDoubleBar = false;
            /**
             * Gets or sets whether a repeat section starts on this masterbar.
             */
            this.isRepeatStart = false;
            /**
             * Gets or sets the number of repeats for the current repeat section.
             */
            this.repeatCount = 0;
            /**
             * Gets or sets the time signature numerator.
             */
            this.timeSignatureNumerator = 4;
            /**
             * Gets or sets the time signature denominiator.
             */
            this.timeSignatureDenominator = 4;
            /**
             * Gets or sets whether this is bar has a common time signature.
             */
            this.timeSignatureCommon = false;
            /**
             * Gets or sets the triplet feel that is valid for this bar.
             */
            this.tripletFeel = TripletFeel.NoTripletFeel;
            /**
             * Gets or sets the new section information for this bar.
             */
            this.section = null;
            /**
             * Gets or sets the tempo automation for this bar.
             */
            this.tempoAutomation = null;
            /**
             * Gets or sets the fermatas for this bar. The key is the offset of the fermata in midi ticks.
             */
            this.fermata = new Map();
            /**
             * The timeline position of the voice within the whole score. (unit: midi ticks)
             */
            this.start = 0;
            /**
             * Gets or sets a value indicating whether the master bar is an anacrusis (aka. pickup bar)
             */
            this.isAnacrusis = false;
        }
        get isRepeatEnd() {
            return this.repeatCount > 0;
        }
        get isSectionStart() {
            return !!this.section;
        }
        static copyTo(src, dst) {
            dst.isAnacrusis = src.isAnacrusis;
            dst.alternateEndings = src.alternateEndings;
            dst.index = src.index;
            dst.keySignature = src.keySignature;
            dst.keySignatureType = src.keySignatureType;
            dst.isDoubleBar = src.isDoubleBar;
            dst.isRepeatStart = src.isRepeatStart;
            dst.repeatCount = src.repeatCount;
            dst.timeSignatureNumerator = src.timeSignatureNumerator;
            dst.timeSignatureDenominator = src.timeSignatureDenominator;
            dst.timeSignatureCommon = src.timeSignatureCommon;
            dst.tripletFeel = src.tripletFeel;
            dst.start = src.start;
        }
        /**
         * Calculates the time spent in this bar. (unit: midi ticks)
         */
        calculateDuration() {
            if (this.isAnacrusis) {
                let duration = 0;
                for (let track of this.score.tracks) {
                    for (let staff of track.staves) {
                        let barDuration = staff.bars[0].calculateDuration();
                        if (barDuration > duration) {
                            duration = barDuration;
                        }
                    }
                }
                return duration;
            }
            return this.timeSignatureNumerator * MidiUtils.valueToTicks(this.timeSignatureDenominator);
        }
        /**
         * Adds a fermata to the masterbar.
         * @param offset The offset of the fermata within the bar in midi ticks.
         * @param fermata The fermata.
         */
        addFermata(offset, fermata) {
            this.fermata.set(offset, fermata);
        }
        /**
         * Gets the fermata for a given beat.
         * @param beat The beat to get the fermata for.
         * @returns
         */
        getFermata(beat) {
            if (this.fermata.has(beat.playbackStart)) {
                return this.fermata.get(beat.playbackStart);
            }
            return null;
        }
    }
    MasterBar.MaxAlternateEndings = 8;

    /**
     * This class represents the rendering stylesheet.
     * It contains settings which control the display of the score when rendered.
     */
    class RenderStylesheet {
        constructor() {
            /**
             * Gets or sets whether dynamics are hidden.
             */
            this.hideDynamics = false;
        }
        static copyTo(src, dst) {
            dst.hideDynamics = src.hideDynamics;
        }
    }

    /**
     * This public class can store the information about a group of measures which are repeated
     */
    class RepeatGroup {
        constructor() {
            /**
             * All masterbars repeated within this group
             */
            this.masterBars = [];
            /**
             * a list of masterbars which open the group.
             */
            this.openings = [];
            /**
             * a list of masterbars which close the group.
             */
            this.closings = [];
            /**
             * true if the repeat group was opened well
             */
            this.isOpened = false;
            /**
             * true if the repeat group was closed well
             */
            this.isClosed = false;
        }
        addMasterBar(masterBar) {
            if (this.openings.length === 0) {
                this.openings.push(masterBar);
            }
            this.masterBars.push(masterBar);
            masterBar.repeatGroup = this;
            if (masterBar.isRepeatEnd) {
                this.closings.push(masterBar);
                this.isClosed = true;
                if (!this.isOpened) {
                    this.masterBars[0].isRepeatStart = true;
                    this.isOpened = true;
                }
            }
            else if (this.isClosed) {
                this.isClosed = false;
                this.openings.push(masterBar);
            }
        }
    }

    /**
     * The score is the root node of the complete
     * model. It stores the basic information of
     * a song and stores the sub components.
     */
    class Score {
        constructor() {
            this._currentRepeatGroup = new RepeatGroup();
            /**
             * The album of this song.
             */
            this.album = '';
            /**
             * The artist who performs this song.
             */
            this.artist = '';
            /**
             * The owner of the copyright of this song.
             */
            this.copyright = '';
            /**
             * Additional instructions
             */
            this.instructions = '';
            /**
             * The author of the music.
             */
            this.music = '';
            /**
             * Some additional notes about the song.
             */
            this.notices = '';
            /**
             * The subtitle of the song.
             */
            this.subTitle = '';
            /**
             * The title of the song.
             */
            this.title = '';
            /**
             * The author of the song lyrics
             */
            this.words = '';
            /**
             * The author of this tablature.
             */
            this.tab = '';
            /**
             * Gets or sets the global tempo of the song in BPM. The tempo might change via {@link MasterBar.tempo}.
             */
            this.tempo = 120;
            /**
             * Gets or sets the name/label of the tempo.
             */
            this.tempoLabel = '';
            /**
             * Gets or sets a list of all masterbars contained in this song.
             */
            this.masterBars = [];
            /**
             * Gets or sets a list of all tracks contained in this song.
             */
            this.tracks = [];
            /**
             * Gets or sets the rendering stylesheet for this song.
             */
            this.stylesheet = new RenderStylesheet();
        }
        static copyTo(src, dst) {
            dst.album = src.album;
            dst.artist = src.artist;
            dst.copyright = src.copyright;
            dst.instructions = src.instructions;
            dst.music = src.music;
            dst.notices = src.notices;
            dst.subTitle = src.subTitle;
            dst.title = src.title;
            dst.words = src.words;
            dst.tab = src.tab;
            dst.tempo = src.tempo;
            dst.tempoLabel = src.tempoLabel;
        }
        rebuildRepeatGroups() {
            let currentGroup = new RepeatGroup();
            for (let bar of this.masterBars) {
                // if the group is closed only the next upcoming header can
                // reopen the group in case of a repeat alternative, so we
                // remove the current group
                if (bar.isRepeatStart || (this._currentRepeatGroup.isClosed && bar.alternateEndings <= 0)) {
                    currentGroup = new RepeatGroup();
                }
                currentGroup.addMasterBar(bar);
            }
        }
        addMasterBar(bar) {
            bar.score = this;
            bar.index = this.masterBars.length;
            if (this.masterBars.length !== 0) {
                bar.previousMasterBar = this.masterBars[this.masterBars.length - 1];
                bar.previousMasterBar.nextMasterBar = bar;
                bar.start = bar.previousMasterBar.start + bar.previousMasterBar.calculateDuration();
            }
            // if the group is closed only the next upcoming header can
            // reopen the group in case of a repeat alternative, so we
            // remove the current group
            if (bar.isRepeatStart || (this._currentRepeatGroup.isClosed && bar.alternateEndings <= 0)) {
                this._currentRepeatGroup = new RepeatGroup();
            }
            this._currentRepeatGroup.addMasterBar(bar);
            this.masterBars.push(bar);
        }
        addTrack(track) {
            track.score = this;
            track.index = this.tracks.length;
            this.tracks.push(track);
        }
        finish(settings) {
            for (let i = 0, j = this.tracks.length; i < j; i++) {
                this.tracks[i].finish(settings);
            }
        }
    }

    /**
     * This public class is used to describe the beginning of a
     * section within a song. It acts like a marker.
     */
    class Section {
        constructor() {
            /**
             * Gets or sets the marker ID for this section.
             */
            this.marker = '';
            /**
             * Gets or sets the descriptional text of this section.
             */
            this.text = '';
        }
        static copyTo(src, dst) {
            dst.marker = src.marker;
            dst.text = src.text;
        }
    }

    /**
     * This public class stores the midi specific information of a track needed
     * for playback.
     */
    class PlaybackInformation {
        constructor() {
            /**
             * Gets or sets the volume (0-16)
             */
            this.volume = 15;
            /**
             * Gets or sets the balance (0-16; 8=center)
             */
            this.balance = 8;
            /**
             * Gets or sets the midi port to use.
             */
            this.port = 1;
            /**
             * Gets or sets the midi program to use.
             */
            this.program = 0;
            /**
             * Gets or sets the primary channel for all normal midi events.
             */
            this.primaryChannel = 0;
            /**
             * Gets or sets the secondary channel for special midi events.
             */
            this.secondaryChannel = 0;
            /**
             * Gets or sets whether the track is muted.
             */
            this.isMute = false;
            /**
             * Gets or sets whether the track is playing alone.
             */
            this.isSolo = false;
        }
        static copyTo(src, dst) {
            dst.volume = src.volume;
            dst.balance = src.balance;
            dst.port = src.port;
            dst.program = src.program;
            dst.primaryChannel = src.primaryChannel;
            dst.secondaryChannel = src.secondaryChannel;
            dst.isMute = src.isMute;
            dst.isSolo = src.isSolo;
        }
    }

    /**
     * This class describes a single staff within a track. There are instruments like pianos
     * where a single track can contain multiple staffs.
     */
    class Staff {
        constructor() {
            /**
             * Gets or sets the zero-based index of this staff within the track.
             */
            this.index = 0;
            /**
             * Gets or sets a list of all bars contained in this staff.
             */
            this.bars = [];
            /**
             * Gets or sets a list of all chords defined for this staff. {@link Beat.chordId} refers to entries in this lookup.
             */
            this.chords = new Map();
            /**
             * Gets or sets the fret on which a capo is set. s
             */
            this.capo = 0;
            /**
             * Gets or sets the number of semitones this track should be
             * transposed. This applies to rendering and playback.
             */
            this.transpositionPitch = 0;
            /**
             * Gets or sets the number of semitones this track should be
             * transposed. This applies only to rendering.
             */
            this.displayTranspositionPitch = 0;
            /**
             * Get or set the guitar tuning of the guitar. This tuning also indicates the number of strings shown in the
             * guitar tablature. Unlike the {@link Note.string} property this array directly represents
             * the order of the tracks shown in the tablature. The first item is the most top tablature line.
             */
            this.tuning = [];
            /**
             * Gets or sets the name of the tuning.
             */
            this.tuningName = "";
            /**
             * Gets or sets whether the tabs are shown.
             */
            this.showTablature = true;
            /**
             * Gets or sets whether the standard notation is shown.
             */
            this.showStandardNotation = true;
            /**
             * Gets or sets whether the staff contains percussion notation
             */
            this.isPercussion = false;
        }
        get isStringed() {
            return this.tuning.length > 0;
        }
        static copyTo(src, dst) {
            dst.capo = src.capo;
            dst.index = src.index;
            dst.tuning = src.tuning.slice();
            dst.transpositionPitch = src.transpositionPitch;
            dst.displayTranspositionPitch = src.displayTranspositionPitch;
            dst.showStandardNotation = src.showStandardNotation;
            dst.showTablature = src.showTablature;
            dst.isPercussion = src.isPercussion;
        }
        finish(settings) {
            for (let i = 0, j = this.bars.length; i < j; i++) {
                this.bars[i].finish(settings);
            }
        }
        addChord(chordId, chord) {
            chord.staff = this;
            this.chords.set(chordId, chord);
        }
        addBar(bar) {
            let bars = this.bars;
            bar.staff = this;
            bar.index = bars.length;
            if (bars.length > 0) {
                bar.previousBar = bars[bars.length - 1];
                bar.previousBar.nextBar = bar;
            }
            bars.push(bar);
        }
    }

    /**
     * This public class describes a single track or instrument of score.
     * It is bascially a list of staffs containing individual music notation kinds.
     */
    class Track {
        constructor() {
            /**
             * Gets or sets the zero-based index of this track.
             */
            this.index = 0;
            /**
             * Gets or sets the list of staffs that are defined for this track.
             */
            this.staves = [];
            /**
             * Gets or sets the playback information for this track.
             */
            this.playbackInfo = new PlaybackInformation();
            /**
             * Gets or sets the display color defined for this track.
             */
            this.color = new Color(200, 0, 0, 255);
            /**
             * Gets or sets the long name of this track.
             */
            this.name = '';
            /**
             * Gets or sets the short name of this track.
             */
            this.shortName = '';
        }
        ensureStaveCount(staveCount) {
            while (this.staves.length < staveCount) {
                this.addStaff(new Staff());
            }
        }
        addStaff(staff) {
            staff.index = this.staves.length;
            staff.track = this;
            this.staves.push(staff);
        }
        static copyTo(src, dst) {
            dst.name = src.name;
            dst.shortName = src.shortName;
            dst.index = src.index;
            dst.color.raw = src.color.raw;
            dst.color.rgba = src.color.rgba;
        }
        finish(settings) {
            if (!this.shortName) {
                this.shortName = this.name;
                if (this.shortName.length > Track.ShortNameMaxLength) {
                    this.shortName = this.shortName.substr(0, Track.ShortNameMaxLength);
                }
            }
            for (let i = 0, j = this.staves.length; i < j; i++) {
                this.staves[i].finish(settings);
            }
        }
        applyLyrics(lyrics) {
            for (let lyric of lyrics) {
                lyric.finish();
            }
            let staff = this.staves[0];
            for (let li = 0; li < lyrics.length; li++) {
                let lyric = lyrics[li];
                if (lyric.startBar >= 0) {
                    let beat = staff.bars[lyric.startBar].voices[0].beats[0];
                    for (let ci = 0; ci < lyric.chunks.length && beat; ci++) {
                        // skip rests and empty beats
                        while (beat && (beat.isEmpty || beat.isRest)) {
                            beat = beat.nextBeat;
                        }
                        // mismatch between chunks and beats might lead to missing beats
                        if (beat) {
                            // initialize lyrics list for beat if required
                            if (!beat.lyrics) {
                                beat.lyrics = new Array(lyrics.length);
                            }
                            // assign chunk
                            beat.lyrics[li] = lyric.chunks[ci];
                            beat = beat.nextBeat;
                        }
                    }
                }
            }
        }
    }
    Track.ShortNameMaxLength = 10;

    /**
     * This public class represents a predefined string tuning.
     */
    class Tuning {
        /**
         * Initializes a new instance of the {@link Tuning} class.
         * @param name The name.
         * @param tuning The tuning.
         * @param isStandard if set to`true`[is standard].
         */
        constructor(name, tuning, isStandard) {
            this.isStandard = isStandard;
            this.name = name;
            this.tunings = tuning;
        }
        static getTextForTuning(tuning, includeOctave) {
            let octave = (tuning / 12) | 0;
            let note = tuning % 12;
            let notes = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];
            let result = notes[note];
            if (includeOctave) {
                result += octave - 1;
            }
            return result;
        }
        /**
         * Gets the default tuning for the given string count.
         * @param stringCount The string count.
         * @returns The tuning for the given string count or null if the string count is not defined.
         */
        static getDefaultTuningFor(stringCount) {
            if (Tuning._defaultTunings.has(stringCount)) {
                return Tuning._defaultTunings.get(stringCount);
            }
            return null;
        }
        /**
         * Gets a list of all tuning presets for a given stirng count.
         * @param stringCount The string count.
         * @returns The list of known tunings for the given string count or an empty list if the string count is not defined.
         */
        static getPresetsFor(stringCount) {
            switch (stringCount) {
                case 7:
                    return Tuning._sevenStrings;
                case 6:
                    return Tuning._sixStrings;
                case 5:
                    return Tuning._fiveStrings;
                case 4:
                    return Tuning._fourStrings;
            }
            return [];
        }
        static initialize() {
            Tuning._defaultTunings.set(7, new Tuning('Guitar 7 strings', [64, 59, 55, 50, 45, 40, 35], true));
            Tuning._sevenStrings.push(Tuning._defaultTunings.get(7));
            Tuning._defaultTunings.set(6, new Tuning('Guitar Standard Tuning', [64, 59, 55, 50, 45, 40], true));
            Tuning._sixStrings.push(Tuning._defaultTunings.get(6));
            Tuning._sixStrings.push(new Tuning('Guitar Tune down Â½ step', [63, 58, 54, 49, 44, 39], false));
            Tuning._sixStrings.push(new Tuning('Guitar Tune down 1 step', [62, 57, 53, 48, 43, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Tune down 2 step', [60, 55, 51, 46, 41, 36], false));
            Tuning._sixStrings.push(new Tuning('Guitar Dropped D Tuning', [64, 59, 55, 50, 45, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Dropped D Tuning variant', [64, 57, 55, 50, 45, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Double Dropped D Tuning', [62, 59, 55, 50, 45, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Dropped E Tuning', [66, 61, 57, 52, 47, 40], false));
            Tuning._sixStrings.push(new Tuning('Guitar Dropped C Tuning', [62, 57, 53, 48, 43, 36], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open C Tuning', [64, 60, 55, 48, 43, 36], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open Cm Tuning', [63, 60, 55, 48, 43, 36], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open C6 Tuning', [64, 57, 55, 48, 43, 36], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open Cmaj7 Tuning', [64, 59, 55, 52, 43, 36], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open D Tuning', [62, 57, 54, 50, 45, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open Dm Tuning', [62, 57, 53, 50, 45, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open D5 Tuning', [62, 57, 50, 50, 45, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open D6 Tuning', [62, 59, 54, 50, 45, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open Dsus4 Tuning', [62, 57, 55, 50, 45, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open E Tuning', [64, 59, 56, 52, 47, 40], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open Em Tuning', [64, 59, 55, 52, 47, 40], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open Esus11 Tuning', [64, 59, 55, 52, 45, 40], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open F Tuning', [65, 60, 53, 48, 45, 41], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open G Tuning', [62, 59, 55, 50, 43, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open Gm Tuning', [62, 58, 55, 50, 43, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open G6 Tuning', [64, 59, 55, 50, 43, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open Gsus4 Tuning', [62, 60, 55, 50, 43, 38], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open A Tuning', [64, 61, 57, 52, 45, 40], false));
            Tuning._sixStrings.push(new Tuning('Guitar Open Am Tuning', [64, 60, 57, 52, 45, 40], false));
            Tuning._sixStrings.push(new Tuning('Guitar Nashville Tuning', [64, 59, 67, 62, 57, 52], false));
            Tuning._sixStrings.push(new Tuning('Bass 6 Strings Tuning', [48, 43, 38, 33, 28, 23], false));
            Tuning._sixStrings.push(new Tuning('Lute or Vihuela Tuning', [64, 59, 54, 50, 45, 40], false));
            Tuning._defaultTunings.set(5, new Tuning('Bass 5 Strings Tuning', [43, 38, 33, 28, 23], true));
            Tuning._fiveStrings.push(Tuning._defaultTunings.get(5));
            Tuning._fiveStrings.push(new Tuning('Banjo Dropped C Tuning', [62, 59, 55, 48, 67], false));
            Tuning._fiveStrings.push(new Tuning('Banjo Open D Tuning', [62, 57, 54, 50, 69], false));
            Tuning._fiveStrings.push(new Tuning('Banjo Open G Tuning', [62, 59, 55, 50, 67], false));
            Tuning._fiveStrings.push(new Tuning('Banjo G Minor Tuning', [62, 58, 55, 50, 67], false));
            Tuning._fiveStrings.push(new Tuning('Banjo G Modal Tuning', [62, 57, 55, 50, 67], false));
            Tuning._defaultTunings.set(4, new Tuning('Bass Standard Tuning', [43, 38, 33, 28], true));
            Tuning._fourStrings.push(Tuning._defaultTunings.get(4));
            Tuning._fourStrings.push(new Tuning('Bass Tune down Â½ step', [42, 37, 32, 27], false));
            Tuning._fourStrings.push(new Tuning('Bass Tune down 1 step', [41, 36, 31, 26], false));
            Tuning._fourStrings.push(new Tuning('Bass Tune down 2 step', [39, 34, 29, 24], false));
            Tuning._fourStrings.push(new Tuning('Bass Dropped D Tuning', [43, 38, 33, 26], false));
            Tuning._fourStrings.push(new Tuning('Ukulele C Tuning', [45, 40, 36, 43], false));
            Tuning._fourStrings.push(new Tuning('Ukulele G Tuning', [52, 47, 43, 38], false));
            Tuning._fourStrings.push(new Tuning('Mandolin Standard Tuning', [64, 57, 50, 43], false));
            Tuning._fourStrings.push(new Tuning('Mandolin or Violin Tuning', [76, 69, 62, 55], false));
            Tuning._fourStrings.push(new Tuning('Viola Tuning', [69, 62, 55, 48], false));
            Tuning._fourStrings.push(new Tuning('Cello Tuning', [57, 50, 43, 36], false));
        }
        /**
         * Tries to find a known tuning by a given list of tuning values.
         * @param strings The values defining the tuning.
         * @returns The known tuning.
         */
        static findTuning(strings) {
            let tunings = Tuning.getPresetsFor(strings.length);
            for (let t = 0, tc = tunings.length; t < tc; t++) {
                let tuning = tunings[t];
                let equals = true;
                for (let i = 0, j = strings.length; i < j; i++) {
                    if (strings[i] !== tuning.tunings[i]) {
                        equals = false;
                        break;
                    }
                }
                if (equals) {
                    return tuning;
                }
            }
            return null;
        }
    }
    Tuning._sevenStrings = [];
    Tuning._sixStrings = [];
    Tuning._fiveStrings = [];
    Tuning._fourStrings = [];
    Tuning._defaultTunings = new Map();
    Tuning.initialize();

    /**
     * A voice represents a group of beats
     * that can be played during a bar.
     */
    class Voice {
        constructor() {
            /**
             * Gets or sets the zero-based index of this voice within the bar.
             */
            this.index = 0;
            /**
             * Gets or sets the list of beats contained in this voice.
             */
            this.beats = [];
            /**
             * Gets or sets a value indicating whether this voice is empty.
             */
            this.isEmpty = true;
        }
        static copyTo(src, dst) {
            dst.index = src.index;
            dst.isEmpty = src.isEmpty;
        }
        insertBeat(after, newBeat) {
            newBeat.nextBeat = after.nextBeat;
            if (newBeat.nextBeat) {
                newBeat.nextBeat.previousBeat = newBeat;
            }
            newBeat.previousBeat = after;
            newBeat.voice = this;
            after.nextBeat = newBeat;
            this.beats.splice(after.index + 1, 0, newBeat);
        }
        addBeat(beat) {
            beat.voice = this;
            beat.index = this.beats.length;
            this.beats.push(beat);
            if (!beat.isEmpty) {
                this.isEmpty = false;
            }
        }
        chain(beat) {
            if (!this.bar) {
                return;
            }
            if (beat.index < this.beats.length - 1) {
                beat.nextBeat = this.beats[beat.index + 1];
                beat.nextBeat.previousBeat = beat;
            }
            else if (beat.isLastOfVoice && beat.voice.bar.nextBar) {
                let nextVoice = this.bar.nextBar.voices[this.index];
                if (nextVoice.beats.length > 0) {
                    beat.nextBeat = nextVoice.beats[0];
                    beat.nextBeat.previousBeat = beat;
                }
                else {
                    beat.nextBeat.previousBeat = beat;
                }
            }
        }
        addGraceBeat(beat) {
            if (this.beats.length === 0) {
                this.addBeat(beat);
                return;
            }
            // remove last beat
            let lastBeat = this.beats[this.beats.length - 1];
            this.beats.splice(this.beats.length - 1, 1);
            // insert grace beat
            this.addBeat(beat);
            // reinsert last beat
            this.addBeat(lastBeat);
            this.isEmpty = false;
        }
        getBeatAtDisplayStart(displayStart) {
            if (this._beatLookup.has(displayStart)) {
                return this._beatLookup.get(displayStart);
            }
            return null;
        }
        finish(settings) {
            this._beatLookup = new Map();
            for (let index = 0; index < this.beats.length; index++) {
                let beat = this.beats[index];
                beat.index = index;
                this.chain(beat);
            }
            let currentDisplayTick = 0;
            let currentPlaybackTick = 0;
            for (let i = 0; i < this.beats.length; i++) {
                let beat = this.beats[i];
                beat.index = i;
                beat.finish(settings);
                if (beat.graceType === GraceType.None || beat.graceType === GraceType.BendGrace) {
                    beat.displayStart = currentDisplayTick;
                    beat.playbackStart = currentPlaybackTick;
                    currentDisplayTick += beat.displayDuration;
                    currentPlaybackTick += beat.playbackDuration;
                }
                else {
                    if (!beat.previousBeat || beat.previousBeat.graceType === GraceType.None) {
                        // find note which is not a grace note
                        let nonGrace = beat;
                        let numberOfGraceBeats = 0;
                        while (nonGrace && nonGrace.graceType !== GraceType.None) {
                            nonGrace = nonGrace.nextBeat;
                            numberOfGraceBeats++;
                        }
                        let graceDuration = Duration.Eighth;
                        let stolenDuration = 0;
                        if (numberOfGraceBeats === 1) {
                            graceDuration = Duration.Eighth;
                        }
                        else if (numberOfGraceBeats === 2) {
                            graceDuration = Duration.Sixteenth;
                        }
                        else {
                            graceDuration = Duration.ThirtySecond;
                        }
                        if (nonGrace) {
                            nonGrace.updateDurations();
                        }
                        // grace beats have 1/4 size of the non grace beat preceeding them
                        let perGraceDisplayDuration = !beat.previousBeat
                            ? MidiUtils.toTicks(Duration.ThirtySecond)
                            : (((beat.previousBeat.displayDuration / 4) | 0) / numberOfGraceBeats) | 0;
                        // move all grace beats
                        let graceBeat = this.beats[i];
                        for (let j = 0; j < numberOfGraceBeats && graceBeat; j++) {
                            graceBeat.duration = graceDuration;
                            graceBeat.updateDurations();
                            graceBeat.displayStart =
                                currentDisplayTick - (numberOfGraceBeats - j + 1) * perGraceDisplayDuration;
                            graceBeat.displayDuration = perGraceDisplayDuration;
                            stolenDuration += graceBeat.playbackDuration;
                            graceBeat = graceBeat.nextBeat;
                        }
                        // steal needed duration from beat duration
                        if (beat.graceType === GraceType.BeforeBeat) {
                            if (beat.previousBeat) {
                                beat.previousBeat.playbackDuration -= stolenDuration;
                            }
                            currentPlaybackTick -= stolenDuration;
                        }
                        else if (nonGrace && beat.graceType === GraceType.OnBeat) {
                            nonGrace.playbackDuration -= stolenDuration;
                        }
                    }
                    beat.playbackStart = currentPlaybackTick;
                    currentPlaybackTick = beat.playbackStart + beat.playbackDuration;
                }
                beat.finishTuplet();
                this._beatLookup.set(beat.displayStart, beat);
            }
        }
        calculateDuration() {
            if (this.isEmpty || this.beats.length === 0) {
                return 0;
            }
            let lastBeat = this.beats[this.beats.length - 1];
            return lastBeat.playbackStart + lastBeat.playbackDuration;
        }
    }

    class TuningParseResult {
        constructor() {
            this.note = null;
            this.noteValue = 0;
            this.octave = 0;
        }
        get realValue() {
            return this.octave * 12 + this.noteValue;
        }
    }
    /**
     * This public class contains some utilities for working with model public classes
     */
    class ModelUtils {
        static getIndex(duration) {
            let index = 0;
            let value = duration;
            if (value < 0) {
                return index;
            }
            return Math.log2(duration) | 0;
        }
        static keySignatureIsFlat(ks) {
            return ks < 0;
        }
        static keySignatureIsNatural(ks) {
            return ks === 0;
        }
        static keySignatureIsSharp(ks) {
            return ks > 0;
        }
        static applyPitchOffsets(settings, score) {
            for (let i = 0; i < score.tracks.length; i++) {
                if (i < settings.notation.displayTranspositionPitches.length) {
                    for (let staff of score.tracks[i].staves) {
                        staff.displayTranspositionPitch = -settings.notation.displayTranspositionPitches[i];
                    }
                }
                if (i < settings.notation.transpositionPitches.length) {
                    for (let staff of score.tracks[i].staves) {
                        staff.transpositionPitch = -settings.notation.transpositionPitches[i];
                    }
                }
            }
        }
        static fingerToString(settings, beat, finger, leftHand) {
            if (settings.notation.fingeringMode === exports.FingeringMode.ScoreForcePiano ||
                settings.notation.fingeringMode === exports.FingeringMode.SingleNoteEffectBandForcePiano ||
                GeneralMidi.isPiano(beat.voice.bar.staff.track.playbackInfo.program)) {
                switch (finger) {
                    case Fingers.Unknown:
                    case Fingers.NoOrDead:
                        return null;
                    case Fingers.Thumb:
                        return '1';
                    case Fingers.IndexFinger:
                        return '2';
                    case Fingers.MiddleFinger:
                        return '3';
                    case Fingers.AnnularFinger:
                        return '4';
                    case Fingers.LittleFinger:
                        return '5';
                    default:
                        return null;
                }
            }
            if (leftHand) {
                switch (finger) {
                    case Fingers.Unknown:
                    case Fingers.NoOrDead:
                        return '0';
                    case Fingers.Thumb:
                        return 'T';
                    case Fingers.IndexFinger:
                        return '1';
                    case Fingers.MiddleFinger:
                        return '2';
                    case Fingers.AnnularFinger:
                        return '3';
                    case Fingers.LittleFinger:
                        return '4';
                    default:
                        return null;
                }
            }
            switch (finger) {
                case Fingers.Unknown:
                case Fingers.NoOrDead:
                    return null;
                case Fingers.Thumb:
                    return 'p';
                case Fingers.IndexFinger:
                    return 'i';
                case Fingers.MiddleFinger:
                    return 'm';
                case Fingers.AnnularFinger:
                    return 'a';
                case Fingers.LittleFinger:
                    return 'c';
                default:
                    return null;
            }
        }
        /**
         * Checks if the given string is a tuning inticator.
         * @param name
         * @returns
         */
        static isTuning(name) {
            return !!ModelUtils.parseTuning(name);
        }
        static parseTuning(name) {
            let note = '';
            let octave = '';
            for (let i = 0; i < name.length; i++) {
                let c = name.charCodeAt(i);
                if (Platform.isCharNumber(c, false)) {
                    // number without note?
                    if (!note) {
                        return null;
                    }
                    octave += String.fromCharCode(c);
                }
                else if ((c >= 0x41 && c <= 0x5a) || (c >= 0x61 && c <= 0x7a) || c === 0x23) {
                    note += String.fromCharCode(c);
                }
                else {
                    return null;
                }
            }
            if (!octave || !note) {
                return null;
            }
            let result = new TuningParseResult();
            result.octave = parseInt(octave) + 1;
            result.note = note.toLowerCase();
            result.noteValue = ModelUtils.getToneForText(result.note);
            return result;
        }
        static getTuningForText(str) {
            let result = ModelUtils.parseTuning(str);
            if (!result) {
                return -1;
            }
            return result.realValue;
        }
        static getToneForText(note) {
            let b = 0;
            switch (note.toLowerCase()) {
                case 'c':
                    b = 0;
                    break;
                case 'c#':
                case 'db':
                    b = 1;
                    break;
                case 'd':
                    b = 2;
                    break;
                case 'd#':
                case 'eb':
                    b = 3;
                    break;
                case 'e':
                    b = 4;
                    break;
                case 'f':
                    b = 5;
                    break;
                case 'f#':
                case 'gb':
                    b = 6;
                    break;
                case 'g':
                    b = 7;
                    break;
                case 'g#':
                case 'ab':
                    b = 8;
                    break;
                case 'a':
                    b = 9;
                    break;
                case 'a#':
                case 'bb':
                    b = 10;
                    break;
                case 'b':
                    b = 11;
                    break;
                default:
                    return 0;
            }
            return b;
        }
    }

    /**
     * A list of terminals recognized by the alphaTex-parser
     */
    var AlphaTexSymbols;
    (function (AlphaTexSymbols) {
        AlphaTexSymbols[AlphaTexSymbols["No"] = 0] = "No";
        AlphaTexSymbols[AlphaTexSymbols["Eof"] = 1] = "Eof";
        AlphaTexSymbols[AlphaTexSymbols["Number"] = 2] = "Number";
        AlphaTexSymbols[AlphaTexSymbols["DoubleDot"] = 3] = "DoubleDot";
        AlphaTexSymbols[AlphaTexSymbols["Dot"] = 4] = "Dot";
        AlphaTexSymbols[AlphaTexSymbols["String"] = 5] = "String";
        AlphaTexSymbols[AlphaTexSymbols["Tuning"] = 6] = "Tuning";
        AlphaTexSymbols[AlphaTexSymbols["LParensis"] = 7] = "LParensis";
        AlphaTexSymbols[AlphaTexSymbols["RParensis"] = 8] = "RParensis";
        AlphaTexSymbols[AlphaTexSymbols["LBrace"] = 9] = "LBrace";
        AlphaTexSymbols[AlphaTexSymbols["RBrace"] = 10] = "RBrace";
        AlphaTexSymbols[AlphaTexSymbols["Pipe"] = 11] = "Pipe";
        AlphaTexSymbols[AlphaTexSymbols["MetaCommand"] = 12] = "MetaCommand";
        AlphaTexSymbols[AlphaTexSymbols["Multiply"] = 13] = "Multiply";
        AlphaTexSymbols[AlphaTexSymbols["LowerThan"] = 14] = "LowerThan";
        AlphaTexSymbols[AlphaTexSymbols["Property"] = 15] = "Property";
    })(AlphaTexSymbols || (AlphaTexSymbols = {}));
    class AlphaTexError extends Error {
        constructor(message) {
            super(message);
            this.position = 0;
            this.nonTerm = '';
            this.expected = AlphaTexSymbols.No;
            this.symbol = AlphaTexSymbols.No;
        }
        static symbolError(position, nonTerm, expected, symbol, symbolData = null) {
            let message;
            if (!symbolData) {
                debugger;
                message = `MalFormed AlphaTex: @${position}: Error on block ${nonTerm}, expected a ${AlphaTexSymbols[expected]} found a ${AlphaTexSymbols[symbol]}: '${symbolData}'`;
            }
            else {
                message = `MalFormed AlphaTex: @${position}: Error on block ${nonTerm}, invalid value: ${symbolData}`;
            }
            let exception = new AlphaTexError(message);
            exception.position = position;
            exception.nonTerm = nonTerm;
            exception.expected = expected;
            exception.symbol = symbol;
            exception.symbolData = symbolData;
            return exception;
        }
        static errorMessage(position, message) {
            message = 'MalFormed AlphaTex: @' + position + ': ' + message;
            let exception = new AlphaTexError(message);
            exception.position = position;
            return exception;
        }
    }
    /**
     * This importer can parse alphaTex markup into a score structure.
     */
    class AlphaTexImporter extends ScoreImporter {
        constructor() {
            super();
            this._trackChannel = 0;
            this._ch = 0;
            this._curChPos = 0;
            this._sy = AlphaTexSymbols.No;
            this._allowNegatives = false;
            this._allowTuning = false;
            this._currentDuration = Duration.QuadrupleWhole;
            this._currentDynamics = DynamicValue.PPP;
            this._currentTuplet = 0;
        }
        get name() {
            return 'AlphaTex';
        }
        readScore() {
            try {
                this._allowTuning = true;
                this._lyrics = new Map();
                this.createDefaultScore();
                this._curChPos = 0;
                this._currentDuration = Duration.Quarter;
                this._currentDynamics = DynamicValue.F;
                this._currentTuplet = 1;
                this._ch = this.nextChar();
                this._sy = this.newSy();
                if (this._sy === AlphaTexSymbols.LowerThan) {
                    // potential XML, stop parsing (alphaTex never starts with <)
                    throw new UnsupportedFormatError('Unknown start sign <');
                }
                this.score();
                this.consolidate();
                this._score.finish(this.settings);
                this._score.rebuildRepeatGroups();
                for (let kvp of this._lyrics) {
                    this._score.tracks[kvp[0]].applyLyrics(kvp[1]);
                }
                return this._score;
            }
            catch (e) {
                if (e instanceof AlphaTexError) {
                    throw new UnsupportedFormatError(e.message);
                }
                else {
                    throw e;
                }
            }
        }
        consolidate() {
            // the number of bars per staff and track could be inconsistent,
            // we need to ensure all staffs of all tracks have the correct number of bars
            for (let track of this._score.tracks) {
                for (let staff of track.staves) {
                    while (staff.bars.length < this._score.masterBars.length) {
                        let bar = this.newBar(staff);
                        let emptyBeat = new Beat();
                        emptyBeat.isEmpty = true;
                        bar.voices[0].addBeat(emptyBeat);
                    }
                }
            }
        }
        error(nonterm, expected, symbolError = true) {
            let e;
            if (symbolError) {
                e = AlphaTexError.symbolError(this._curChPos, nonterm, expected, this._sy, null);
            }
            else {
                e = AlphaTexError.symbolError(this._curChPos, nonterm, expected, expected, this._syData);
            }
            Logger.error(this.name, e.message);
            throw e;
        }
        errorMessage(message) {
            let e = AlphaTexError.errorMessage(this._curChPos, message);
            Logger.error(this.name, e.message);
            throw e;
        }
        /**
         * Initializes the song with some required default values.
         * @returns
         */
        createDefaultScore() {
            this._score = new Score();
            this._score.tempo = 120;
            this._score.tempoLabel = '';
            this.newTrack();
        }
        newTrack() {
            this._currentTrack = new Track();
            this._currentTrack.ensureStaveCount(1);
            this._currentTrack.playbackInfo.program = 25;
            this._currentTrack.playbackInfo.primaryChannel = this._trackChannel++;
            this._currentTrack.playbackInfo.secondaryChannel = this._trackChannel++;
            this._currentStaff = this._currentTrack.staves[0];
            this._currentStaff.displayTranspositionPitch = -12;
            this._currentStaff.tuning = Tuning.getDefaultTuningFor(6).tunings;
            this._score.addTrack(this._currentTrack);
            this._lyrics.set(this._currentTrack.index, []);
            this._currentDynamics = DynamicValue.F;
        }
        /**
         * Converts a clef string into the clef value.
         * @param str the string to convert
         * @returns the clef value
         */
        parseClefFromString(str) {
            switch (str.toLowerCase()) {
                case 'g2':
                case 'treble':
                    return Clef.G2;
                case 'f4':
                case 'bass':
                    return Clef.F4;
                case 'c3':
                case 'tenor':
                    return Clef.C3;
                case 'c4':
                case 'alto':
                    return Clef.C4;
                case 'n':
                case 'neutral':
                    return Clef.Neutral;
                default:
                    return Clef.G2;
                // error("clef-value", AlphaTexSymbols.String, false);
            }
        }
        /**
         * Converts a clef tuning into the clef value.
         * @param i the tuning value to convert
         * @returns the clef value
         */
        parseClefFromInt(i) {
            switch (i) {
                case 43:
                    return Clef.G2;
                case 65:
                    return Clef.F4;
                case 48:
                    return Clef.C3;
                case 60:
                    return Clef.C4;
                default:
                    return Clef.G2;
            }
        }
        parseTripletFeelFromString(str) {
            switch (str.toLowerCase()) {
                case 'no':
                case 'none':
                    return TripletFeel.NoTripletFeel;
                case 't16':
                case 'triplet-16th':
                    return TripletFeel.Triplet16th;
                case 't8':
                case 'triplet-8th':
                    return TripletFeel.Triplet8th;
                case 'd16':
                case 'dotted-16th':
                    return TripletFeel.Dotted16th;
                case 'd8':
                case 'dotted-8th':
                    return TripletFeel.Dotted8th;
                case 's16':
                case 'scottish-16th':
                    return TripletFeel.Scottish16th;
                case 's8':
                case 'scottish-8th':
                    return TripletFeel.Scottish8th;
                default:
                    return TripletFeel.NoTripletFeel;
            }
        }
        parseTripletFeelFromInt(i) {
            switch (i) {
                case 0:
                    return TripletFeel.NoTripletFeel;
                case 1:
                    return TripletFeel.Triplet16th;
                case 2:
                    return TripletFeel.Triplet8th;
                case 3:
                    return TripletFeel.Dotted16th;
                case 4:
                    return TripletFeel.Dotted8th;
                case 5:
                    return TripletFeel.Scottish16th;
                case 6:
                    return TripletFeel.Scottish8th;
                default:
                    return TripletFeel.NoTripletFeel;
            }
        }
        /**
         * Converts a keysignature string into the assocciated value.
         * @param str the string to convert
         * @returns the assocciated keysignature value
         */
        parseKeySignature(str) {
            switch (str.toLowerCase()) {
                case 'cb':
                    return -7;
                case 'gb':
                    return -6;
                case 'db':
                    return -5;
                case 'ab':
                    return -4;
                case 'eb':
                    return -3;
                case 'bb':
                    return -2;
                case 'f':
                    return -1;
                case 'c':
                    return 0;
                case 'g':
                    return 1;
                case 'd':
                    return 2;
                case 'a':
                    return 3;
                case 'e':
                    return 4;
                case 'b':
                    return 5;
                case 'f#':
                    return 6;
                case 'c#':
                    return 7;
                default:
                    return 0;
                // error("keysignature-value", AlphaTexSymbols.String, false); return 0
            }
        }
        /**
         * Reads the next character of the source stream.
         */
        nextChar() {
            let b = this.data.readByte();
            if (b === -1) {
                this._ch = 0;
            }
            else {
                this._ch = b;
                this._curChPos++;
            }
            return this._ch;
        }
        /**
         * Reads the next terminal symbol.
         */
        newSy() {
            this._sy = AlphaTexSymbols.No;
            do {
                if (this._ch === AlphaTexImporter.Eof) {
                    this._sy = AlphaTexSymbols.Eof;
                }
                else if (Platform.isWhiteSpace(this._ch)) {
                    // skip whitespaces
                    this._ch = this.nextChar();
                }
                else if (this._ch === 0x2f /* / */) {
                    this._ch = this.nextChar();
                    if (this._ch === 0x2f /* / */) {
                        // single line comment
                        while (this._ch !== 0x0d /* \r */ &&
                            this._ch !== 0x0a /* \n */ &&
                            this._ch !== AlphaTexImporter.Eof) {
                            this._ch = this.nextChar();
                        }
                    }
                    else if (this._ch === 0x2a /* * */) {
                        // multiline comment
                        while (this._ch !== 0) {
                            if (this._ch === 0x2a /* * */) {
                                this._ch = this.nextChar();
                                if (this._ch === 0x2f /* / */) {
                                    this._ch = this.nextChar();
                                    break;
                                }
                            }
                            else {
                                this._ch = this.nextChar();
                            }
                        }
                    }
                    else {
                        this.error('symbol', AlphaTexSymbols.String, false);
                    }
                }
                else if (this._ch === 0x22 /* " */ || this._ch === 0x27 /* ' */) {
                    let startChar = this._ch;
                    this._ch = this.nextChar();
                    let s = '';
                    this._sy = AlphaTexSymbols.String;
                    while (this._ch !== startChar && this._ch !== AlphaTexImporter.Eof) {
                        s += String.fromCharCode(this._ch);
                        this._ch = this.nextChar();
                    }
                    this._syData = s;
                    this._ch = this.nextChar();
                }
                else if (this._ch === 0x2d /* - */) {
                    // negative number
                    // is number?
                    if (this._allowNegatives && this.isDigit(this._ch)) {
                        let num = this.readNumber();
                        this._sy = AlphaTexSymbols.Number;
                        this._syData = num;
                    }
                    else {
                        this._sy = AlphaTexSymbols.String;
                        this._syData = this.readName();
                    }
                }
                else if (this._ch === 0x2e /* . */) {
                    this._sy = AlphaTexSymbols.Dot;
                    this._ch = this.nextChar();
                }
                else if (this._ch === 0x3a /* : */) {
                    this._sy = AlphaTexSymbols.DoubleDot;
                    this._ch = this.nextChar();
                }
                else if (this._ch === 0x28 /* ( */) {
                    this._sy = AlphaTexSymbols.LParensis;
                    this._ch = this.nextChar();
                }
                else if (this._ch === 0x5c /* \ */) {
                    this._ch = this.nextChar();
                    let name = this.readName();
                    this._sy = AlphaTexSymbols.MetaCommand;
                    this._syData = name;
                }
                else if (this._ch === 0x29 /* ) */) {
                    this._sy = AlphaTexSymbols.RParensis;
                    this._ch = this.nextChar();
                }
                else if (this._ch === 0x7b /* { */) {
                    this._sy = AlphaTexSymbols.LBrace;
                    this._ch = this.nextChar();
                }
                else if (this._ch === 0x7d /* } */) {
                    this._sy = AlphaTexSymbols.RBrace;
                    this._ch = this.nextChar();
                }
                else if (this._ch === 0x7c /* | */) {
                    this._sy = AlphaTexSymbols.Pipe;
                    this._ch = this.nextChar();
                }
                else if (this._ch === 0x2a /* * */) {
                    this._sy = AlphaTexSymbols.Multiply;
                    this._ch = this.nextChar();
                }
                else if (this._ch === 0x3c /* < */) {
                    this._sy = AlphaTexSymbols.LowerThan;
                    this._ch = this.nextChar();
                }
                else if (this.isDigit(this._ch)) {
                    let num = this.readNumber();
                    this._sy = AlphaTexSymbols.Number;
                    this._syData = num;
                }
                else if (AlphaTexImporter.isLetter(this._ch)) {
                    let name = this.readName();
                    let tuning = this._allowTuning ? ModelUtils.parseTuning(name) : null;
                    if (tuning) {
                        this._sy = AlphaTexSymbols.Tuning;
                        this._syData = tuning;
                    }
                    else {
                        this._sy = AlphaTexSymbols.String;
                        this._syData = name;
                    }
                }
                else {
                    this.error('symbol', AlphaTexSymbols.String, false);
                }
            } while (this._sy === AlphaTexSymbols.No);
            return this._sy;
        }
        /**
         * Checks if the given character is a letter.
         * (no control characters, whitespaces, numbers or dots)
         * @param code the character
         * @returns true if the given character is a letter, otherwise false.
         */
        static isLetter(code) {
            // no control characters, whitespaces, numbers or dots
            return (!AlphaTexImporter.isTerminal(code) &&
                ((code >= 0x21 && code <= 0x2f) || (code >= 0x3a && code <= 0x7e) || code > 0x80)); /* Unicode Symbols */
        }
        /**
         * Checks if the given charater is a non terminal.
         * @param ch the character
         * @returns true if the given character is a terminal, otherwise false.
         */
        static isTerminal(ch) {
            return (ch === 0x2e /* . */ ||
                ch === 0x7b /* { */ ||
                ch === 0x7d /* } */ ||
                ch === 0x5b /* [ */ ||
                ch === 0x5d /* ] */ ||
                ch === 0x28 /* ( */ ||
                ch === 0x29 /* ) */ ||
                ch === 0x7c /* | */ ||
                ch === 0x27 /* ' */ ||
                ch === 0x22 /* " */ ||
                ch === 0x5c /* \ */);
        }
        /**
         * Checks if the given character is a digit.
         * @param code the character
         * @returns true if the given character is a digit, otherwise false.
         */
        isDigit(code) {
            return (code >= 0x30 && code <= 0x39) /*0-9*/ || (code === 0x2d /* - */ && this._allowNegatives); // allow - if negatives
        }
        /**
         * Reads a string from the stream.
         * @returns the read string.
         */
        readName() {
            let str = '';
            do {
                str += String.fromCharCode(this._ch);
                this._ch = this.nextChar();
            } while (AlphaTexImporter.isLetter(this._ch) || this.isDigit(this._ch) || this._ch === 0x23);
            return str;
        }
        /**
         * Reads a number from the stream.
         * @returns the read number.
         */
        readNumber() {
            let str = '';
            do {
                str += String.fromCharCode(this._ch);
                this._ch = this.nextChar();
            } while (this.isDigit(this._ch));
            return parseInt(str);
        }
        score() {
            this.metaData();
            this.bars();
        }
        metaData() {
            let anyMeta = false;
            let continueReading = true;
            while (this._sy === AlphaTexSymbols.MetaCommand && continueReading) {
                let syData = this._syData.toLowerCase();
                switch (syData) {
                    case 'title':
                        this._sy = this.newSy();
                        if (this._sy === AlphaTexSymbols.String) {
                            this._score.title = this._syData;
                        }
                        else {
                            this.error('title', AlphaTexSymbols.String, true);
                        }
                        this._sy = this.newSy();
                        anyMeta = true;
                        break;
                    case 'subtitle':
                        this._sy = this.newSy();
                        if (this._sy === AlphaTexSymbols.String) {
                            this._score.subTitle = this._syData;
                        }
                        else {
                            this.error('subtitle', AlphaTexSymbols.String, true);
                        }
                        this._sy = this.newSy();
                        anyMeta = true;
                        break;
                    case 'artist':
                        this._sy = this.newSy();
                        if (this._sy === AlphaTexSymbols.String) {
                            this._score.artist = this._syData;
                        }
                        else {
                            this.error('artist', AlphaTexSymbols.String, true);
                        }
                        this._sy = this.newSy();
                        anyMeta = true;
                        break;
                    case 'album':
                        this._sy = this.newSy();
                        if (this._sy === AlphaTexSymbols.String) {
                            this._score.album = this._syData;
                        }
                        else {
                            this.error('album', AlphaTexSymbols.String, true);
                        }
                        this._sy = this.newSy();
                        anyMeta = true;
                        break;
                    case 'words':
                        this._sy = this.newSy();
                        if (this._sy === AlphaTexSymbols.String) {
                            this._score.words = this._syData;
                        }
                        else {
                            this.error('words', AlphaTexSymbols.String, true);
                        }
                        this._sy = this.newSy();
                        anyMeta = true;
                        break;
                    case 'music':
                        this._sy = this.newSy();
                        if (this._sy === AlphaTexSymbols.String) {
                            this._score.music = this._syData;
                        }
                        else {
                            this.error('music', AlphaTexSymbols.String, true);
                        }
                        this._sy = this.newSy();
                        anyMeta = true;
                        break;
                    case 'copyright':
                        this._sy = this.newSy();
                        if (this._sy === AlphaTexSymbols.String) {
                            this._score.copyright = this._syData;
                        }
                        else {
                            this.error('copyright', AlphaTexSymbols.String, true);
                        }
                        this._sy = this.newSy();
                        anyMeta = true;
                        break;
                    case 'tempo':
                        this._sy = this.newSy();
                        if (this._sy === AlphaTexSymbols.Number) {
                            this._score.tempo = this._syData;
                        }
                        else {
                            this.error('tempo', AlphaTexSymbols.Number, true);
                        }
                        this._sy = this.newSy();
                        anyMeta = true;
                        break;
                    default:
                        if (this.handleStaffMeta()) {
                            anyMeta = true;
                        }
                        else if (anyMeta) {
                            // invalid meta encountered
                            this.error('metaDataTags', AlphaTexSymbols.String, false);
                        }
                        else {
                            // fall forward to bar meta if unknown score meta was found
                            continueReading = false;
                        }
                        break;
                }
            }
            if (anyMeta) {
                if (this._sy !== AlphaTexSymbols.Dot) {
                    this.error('song', AlphaTexSymbols.Dot, true);
                }
                this._sy = this.newSy();
            }
            else if (this._sy === AlphaTexSymbols.Dot) {
                this._sy = this.newSy();
            }
        }
        handleStaffMeta() {
            let syData = this._syData.toLowerCase();
            switch (syData) {
                case 'capo':
                    this._sy = this.newSy();
                    if (this._sy === AlphaTexSymbols.Number) {
                        this._currentStaff.capo = this._syData;
                    }
                    else {
                        this.error('capo', AlphaTexSymbols.Number, true);
                    }
                    this._sy = this.newSy();
                    return true;
                case 'tuning':
                    this._sy = this.newSy();
                    let strings = this._currentStaff.tuning.length;
                    switch (this._sy) {
                        case AlphaTexSymbols.String:
                            let text = this._syData.toLowerCase();
                            if (text === 'piano' || text === 'none' || text === 'voice') {
                                // clear tuning
                                this._currentStaff.tuning = [];
                            }
                            else {
                                this.error('tuning', AlphaTexSymbols.Tuning, true);
                            }
                            this._sy = this.newSy();
                            break;
                        case AlphaTexSymbols.Tuning:
                            let tuning = [];
                            do {
                                let t = this._syData;
                                tuning.push(t.realValue);
                                this._sy = this.newSy();
                            } while (this._sy === AlphaTexSymbols.Tuning);
                            this._currentStaff.tuning = tuning;
                            break;
                        default:
                            this.error('tuning', AlphaTexSymbols.Tuning, true);
                            break;
                    }
                    if (strings !== this._currentStaff.tuning.length && this._currentStaff.chords.size > 0) {
                        this.errorMessage('Tuning must be defined before any chord');
                    }
                    return true;
                case 'instrument':
                    this._sy = this.newSy();
                    if (this._sy === AlphaTexSymbols.Number) {
                        let instrument = this._syData;
                        if (instrument >= 0 && instrument <= 128) {
                            this._currentTrack.playbackInfo.program = this._syData;
                        }
                        else {
                            this.error('instrument', AlphaTexSymbols.Number, false);
                        }
                    }
                    else if (this._sy === AlphaTexSymbols.String) {
                        let instrumentName = this._syData.toLowerCase();
                        this._currentTrack.playbackInfo.program = GeneralMidi.getValue(instrumentName);
                    }
                    else {
                        this.error('instrument', AlphaTexSymbols.Number, true);
                    }
                    this._currentStaff.displayTranspositionPitch = GeneralMidi.isGuitar(this._currentTrack.playbackInfo.program)
                        ? -12
                        : 0;
                    this._sy = this.newSy();
                    return true;
                case 'lyrics':
                    this._sy = this.newSy();
                    let lyrics = new Lyrics();
                    lyrics.startBar = 0;
                    lyrics.text = '';
                    if (this._sy === AlphaTexSymbols.Number) {
                        lyrics.startBar = this._syData;
                        this._sy = this.newSy();
                    }
                    if (this._sy === AlphaTexSymbols.String) {
                        lyrics.text = this._syData;
                        this._sy = this.newSy();
                    }
                    else {
                        this.error('lyrics', AlphaTexSymbols.String, true);
                    }
                    this._lyrics.get(this._currentTrack.index).push(lyrics);
                    return true;
                case 'chord':
                    this._sy = this.newSy();
                    let chord = new Chord();
                    this.chordProperties(chord);
                    if (this._sy === AlphaTexSymbols.String) {
                        chord.name = this._syData;
                        this._sy = this.newSy();
                    }
                    else {
                        this.error('chord-name', AlphaTexSymbols.Number, true);
                    }
                    for (let i = 0; i < this._currentStaff.tuning.length; i++) {
                        if (this._sy === AlphaTexSymbols.Number) {
                            chord.strings.push(this._syData);
                        }
                        else if (this._sy === AlphaTexSymbols.String && this._syData.toLowerCase() === 'x') {
                            chord.strings.push(-1);
                        }
                        this._sy = this.newSy();
                    }
                    this._currentStaff.addChord(chord.name.toLowerCase(), chord);
                    return true;
                default:
                    return false;
            }
        }
        chordProperties(chord) {
            if (this._sy !== AlphaTexSymbols.LBrace) {
                return;
            }
            this._sy = this.newSy();
            while (this._sy === AlphaTexSymbols.String) {
                switch (this._syData.toLowerCase()) {
                    case 'firstfret':
                        this._sy = this.newSy();
                        switch (this._sy) {
                            case AlphaTexSymbols.Number:
                                chord.firstFret = this._syData;
                                break;
                            default:
                                this.error('chord-firstfret', AlphaTexSymbols.Number, true);
                                break;
                        }
                        this._sy = this.newSy();
                        break;
                    case 'showdiagram':
                        this._sy = this.newSy();
                        switch (this._sy) {
                            case AlphaTexSymbols.String:
                                chord.showDiagram = this._syData.toLowerCase() !== 'false';
                                break;
                            case AlphaTexSymbols.Number:
                                chord.showDiagram = this._syData !== 0;
                                break;
                            default:
                                this.error('chord-showdiagram', AlphaTexSymbols.String, true);
                                break;
                        }
                        this._sy = this.newSy();
                        break;
                    case 'showfingering':
                        this._sy = this.newSy();
                        switch (this._sy) {
                            case AlphaTexSymbols.String:
                                chord.showDiagram = this._syData.toLowerCase() !== 'false';
                                break;
                            case AlphaTexSymbols.Number:
                                chord.showFingering = this._syData !== 0;
                                break;
                            default:
                                this.error('chord-showfingering', AlphaTexSymbols.String, true);
                                break;
                        }
                        this._sy = this.newSy();
                        break;
                    case 'showname':
                        this._sy = this.newSy();
                        switch (this._sy) {
                            case AlphaTexSymbols.String:
                                chord.showName = this._syData.toLowerCase() !== 'false';
                                break;
                            case AlphaTexSymbols.Number:
                                chord.showName = this._syData !== 0;
                                break;
                            default:
                                this.error('chord-showname', AlphaTexSymbols.String, true);
                                break;
                        }
                        this._sy = this.newSy();
                        break;
                    case 'barre':
                        this._sy = this.newSy();
                        while (this._sy === AlphaTexSymbols.Number) {
                            chord.barreFrets.push(this._syData);
                            this._sy = this.newSy();
                        }
                        break;
                    default:
                        this.error('chord-properties', AlphaTexSymbols.String, false);
                        break;
                }
            }
            if (this._sy !== AlphaTexSymbols.RBrace) {
                this.error('chord-properties', AlphaTexSymbols.RBrace, true);
            }
            this._sy = this.newSy();
        }
        bars() {
            this.bar();
            while (this._sy !== AlphaTexSymbols.Eof) {
                // read pipe from last bar
                if (this._sy === AlphaTexSymbols.Pipe) {
                    this._sy = this.newSy();
                    this.bar();
                }
                else if (this._sy === AlphaTexSymbols.MetaCommand) {
                    this.bar();
                }
                else {
                    break;
                }
            }
        }
        trackStaffMeta() {
            if (this._sy === AlphaTexSymbols.MetaCommand) {
                let syData = this._syData.toLowerCase();
                if (syData === 'track') {
                    this._sy = this.newSy();
                    // new track starting? - if no masterbars it's the \track of the initial track.
                    if (this._score.masterBars.length > 0) {
                        this.newTrack();
                    }
                    // name
                    if (this._sy === AlphaTexSymbols.String) {
                        this._currentTrack.name = this._syData;
                        this._sy = this.newSy();
                    }
                    // short name
                    if (this._sy === AlphaTexSymbols.String) {
                        this._currentTrack.shortName = this._syData;
                        this._sy = this.newSy();
                    }
                }
                if (this._sy === AlphaTexSymbols.MetaCommand) {
                    syData = this._syData.toLowerCase();
                    if (syData === 'staff') {
                        this._sy = this.newSy();
                        if (this._currentTrack.staves[0].bars.length > 0) {
                            this._currentTrack.ensureStaveCount(this._currentTrack.staves.length + 1);
                            this._currentStaff = this._currentTrack.staves[this._currentTrack.staves.length - 1];
                            this._currentDynamics = DynamicValue.F;
                        }
                        this.staffProperties();
                    }
                }
            }
        }
        staffProperties() {
            if (this._sy !== AlphaTexSymbols.LBrace) {
                return;
            }
            this._sy = this.newSy();
            let showStandardNotation = false;
            let showTabs = false;
            while (this._sy === AlphaTexSymbols.String) {
                switch (this._syData.toLowerCase()) {
                    case 'score':
                        showStandardNotation = true;
                        this._sy = this.newSy();
                        break;
                    case 'tabs':
                        showTabs = true;
                        this._sy = this.newSy();
                        break;
                    default:
                        this.error('staff-properties', AlphaTexSymbols.String, false);
                        break;
                }
            }
            if (showStandardNotation || showTabs) {
                this._currentStaff.showStandardNotation = showStandardNotation;
                this._currentStaff.showTablature = showTabs;
            }
            if (this._sy !== AlphaTexSymbols.RBrace) {
                this.error('staff-properties', AlphaTexSymbols.RBrace, true);
            }
            this._sy = this.newSy();
        }
        bar() {
            this.trackStaffMeta();
            let bar = this.newBar(this._currentStaff);
            if (this._currentStaff.bars.length > this._score.masterBars.length) {
                let master = new MasterBar();
                this._score.addMasterBar(master);
                if (master.index > 0) {
                    master.keySignature = master.previousMasterBar.keySignature;
                    master.keySignatureType = master.previousMasterBar.keySignatureType;
                    master.timeSignatureDenominator = master.previousMasterBar.timeSignatureDenominator;
                    master.timeSignatureNumerator = master.previousMasterBar.timeSignatureNumerator;
                    master.tripletFeel = master.previousMasterBar.tripletFeel;
                }
            }
            this.barMeta(bar);
            let voice = bar.voices[0];
            while (this._sy !== AlphaTexSymbols.Pipe && this._sy !== AlphaTexSymbols.Eof) {
                if (!this.beat(voice)) {
                    break;
                }
            }
            if (voice.beats.length === 0) {
                let emptyBeat = new Beat();
                emptyBeat.isEmpty = true;
                voice.addBeat(emptyBeat);
            }
        }
        newBar(staff) {
            let bar = new Bar();
            staff.addBar(bar);
            if (bar.index > 0) {
                bar.clef = bar.previousBar.clef;
            }
            let voice = new Voice();
            bar.addVoice(voice);
            return bar;
        }
        beat(voice) {
            // duration specifier?
            this.beatDuration();
            let beat = new Beat();
            voice.addBeat(beat);
            if (voice.bar.masterBar.tempoAutomation && voice.beats.length === 1) {
                beat.automations.push(voice.bar.masterBar.tempoAutomation);
            }
            // notes
            if (this._sy === AlphaTexSymbols.LParensis) {
                this._sy = this.newSy();
                this.note(beat);
                while (this._sy !== AlphaTexSymbols.RParensis && this._sy !== AlphaTexSymbols.Eof) {
                    if (!this.note(beat)) {
                        break;
                    }
                }
                if (this._sy !== AlphaTexSymbols.RParensis) {
                    this.error('note-list', AlphaTexSymbols.RParensis, true);
                }
                this._sy = this.newSy();
            }
            else if (this._sy === AlphaTexSymbols.String && this._syData.toLowerCase() === 'r') {
                // rest voice -> no notes
                this._sy = this.newSy();
            }
            else {
                if (!this.note(beat)) {
                    voice.beats.splice(voice.beats.length - 1, 1);
                    return false;
                }
            }
            // new duration
            if (this._sy === AlphaTexSymbols.Dot) {
                this._allowNegatives = true;
                this._sy = this.newSy();
                this._allowNegatives = false;
                if (this._sy !== AlphaTexSymbols.Number) {
                    this.error('duration', AlphaTexSymbols.Number, true);
                }
                this._currentDuration = this.parseDuration(this._syData);
                this._sy = this.newSy();
            }
            beat.duration = this._currentDuration;
            beat.dynamics = this._currentDynamics;
            if (this._currentTuplet !== 1 && !beat.hasTuplet) {
                this.applyTuplet(beat, this._currentTuplet);
            }
            // beat multiplier (repeat beat n times)
            let beatRepeat = 1;
            if (this._sy === AlphaTexSymbols.Multiply) {
                this._sy = this.newSy();
                // multiplier count
                if (this._sy !== AlphaTexSymbols.Number) {
                    this.error('multiplier', AlphaTexSymbols.Number, true);
                }
                else {
                    beatRepeat = this._syData;
                }
                this._sy = this.newSy();
            }
            this.beatEffects(beat);
            for (let i = 0; i < beatRepeat - 1; i++) {
                voice.addBeat(beat.clone());
            }
            return true;
        }
        beatDuration() {
            if (this._sy !== AlphaTexSymbols.DoubleDot) {
                return;
            }
            this._allowNegatives = true;
            this._sy = this.newSy();
            this._allowNegatives = false;
            if (this._sy !== AlphaTexSymbols.Number) {
                this.error('duration', AlphaTexSymbols.Number, true);
            }
            this._currentDuration = this.parseDuration(this._syData);
            this._currentTuplet = 1;
            this._sy = this.newSy();
            if (this._sy !== AlphaTexSymbols.LBrace) {
                return;
            }
            this._sy = this.newSy();
            while (this._sy === AlphaTexSymbols.String) {
                let effect = this._syData.toLowerCase();
                switch (effect) {
                    case 'tu':
                        this._sy = this.newSy();
                        if (this._sy !== AlphaTexSymbols.Number) {
                            this.error('duration-tuplet', AlphaTexSymbols.Number, true);
                        }
                        this._currentTuplet = this._syData;
                        this._sy = this.newSy();
                        break;
                    default:
                        this.error('beat-duration', AlphaTexSymbols.String, false);
                        break;
                }
            }
            if (this._sy !== AlphaTexSymbols.RBrace) {
                this.error('beat-duration', AlphaTexSymbols.RBrace, true);
            }
            this._sy = this.newSy();
        }
        beatEffects(beat) {
            if (this._sy !== AlphaTexSymbols.LBrace) {
                return;
            }
            this._sy = this.newSy();
            while (this._sy === AlphaTexSymbols.String) {
                this._syData = this._syData.toLowerCase();
                if (!this.applyBeatEffect(beat)) {
                    this.error('beat-effects', AlphaTexSymbols.String, false);
                }
            }
            if (this._sy !== AlphaTexSymbols.RBrace) {
                this.error('beat-effects', AlphaTexSymbols.RBrace, true);
            }
            this._sy = this.newSy();
        }
        /**
         * Tries to apply a beat effect to the given beat.
         * @returns true if a effect could be applied, otherwise false
         */
        applyBeatEffect(beat) {
            let syData = this._syData.toLowerCase();
            if (syData === 'f') {
                beat.fadeIn = true;
                this._sy = this.newSy();
                return true;
            }
            if (syData === 'v') {
                beat.vibrato = VibratoType.Slight;
                this._sy = this.newSy();
                return true;
            }
            if (syData === 's') {
                beat.slap = true;
                this._sy = this.newSy();
                return true;
            }
            if (syData === 'p') {
                beat.pop = true;
                this._sy = this.newSy();
                return true;
            }
            if (syData === 'tt') {
                beat.tap = true;
                this._sy = this.newSy();
                return true;
            }
            if (syData === 'dd') {
                beat.dots = 2;
                this._sy = this.newSy();
                return true;
            }
            if (syData === 'd') {
                beat.dots = 1;
                this._sy = this.newSy();
                return true;
            }
            if (syData === 'su') {
                beat.pickStroke = PickStroke.Up;
                this._sy = this.newSy();
                return true;
            }
            if (syData === 'sd') {
                beat.pickStroke = PickStroke.Down;
                this._sy = this.newSy();
                return true;
            }
            if (syData === 'tu') {
                this._sy = this.newSy();
                if (this._sy !== AlphaTexSymbols.Number) {
                    this.error('tuplet', AlphaTexSymbols.Number, true);
                    return false;
                }
                this.applyTuplet(beat, this._syData);
                this._sy = this.newSy();
                return true;
            }
            if (syData === 'tb' || syData === 'tbe') {
                let exact = syData === 'tbe';
                // read points
                this._sy = this.newSy();
                if (this._sy !== AlphaTexSymbols.LParensis) {
                    this.error('tremolobar-effect', AlphaTexSymbols.LParensis, true);
                    return false;
                }
                this._allowNegatives = true;
                this._sy = this.newSy();
                while (this._sy !== AlphaTexSymbols.RParensis && this._sy !== AlphaTexSymbols.Eof) {
                    let offset = 0;
                    let value = 0;
                    if (exact) {
                        if (this._sy !== AlphaTexSymbols.Number) {
                            this.error('tremolobar-effect', AlphaTexSymbols.Number, true);
                            return false;
                        }
                        offset = this._syData;
                        this._sy = this.newSy();
                        if (this._sy !== AlphaTexSymbols.Number) {
                            this.error('tremolobar-effect', AlphaTexSymbols.Number, true);
                            return false;
                        }
                        value = this._syData;
                    }
                    else {
                        if (this._sy !== AlphaTexSymbols.Number) {
                            this.error('tremolobar-effect', AlphaTexSymbols.Number, true);
                            return false;
                        }
                        offset = 0;
                        value = this._syData;
                    }
                    beat.addWhammyBarPoint(new BendPoint(offset, value));
                    this._sy = this.newSy();
                }
                while (beat.whammyBarPoints.length > 60) {
                    beat.removeWhammyBarPoint(beat.whammyBarPoints.length - 1);
                }
                // set positions
                if (!exact) {
                    let count = beat.whammyBarPoints.length;
                    let step = (60 / count) | 0;
                    let i = 0;
                    while (i < count) {
                        beat.whammyBarPoints[i].offset = Math.min(60, i * step);
                        i++;
                    }
                }
                else {
                    beat.whammyBarPoints.sort((a, b) => {
                        return a.offset - b.offset;
                    });
                }
                this._allowNegatives = false;
                if (this._sy !== AlphaTexSymbols.RParensis) {
                    this.error('tremolobar-effect', AlphaTexSymbols.RParensis, true);
                    return false;
                }
                this._sy = this.newSy();
                return true;
            }
            if (syData === 'ch') {
                this._sy = this.newSy();
                let chordName = this._syData;
                let chordId = chordName.toLowerCase();
                if (!this._currentStaff.chords.has(chordId)) {
                    let chord = new Chord();
                    chord.showDiagram = false;
                    chord.name = chordName;
                    this._currentStaff.addChord(chordId, chord);
                }
                beat.chordId = chordId;
                this._sy = this.newSy();
                return true;
            }
            if (syData === 'gr') {
                this._sy = this.newSy();
                if (this._syData.toLowerCase() === 'ob') {
                    beat.graceType = GraceType.OnBeat;
                    this._sy = this.newSy();
                }
                else if (this._syData.toLowerCase() === 'b') {
                    beat.graceType = GraceType.BendGrace;
                    this._sy = this.newSy();
                }
                else {
                    beat.graceType = GraceType.BeforeBeat;
                }
                return true;
            }
            if (syData === 'dy') {
                this.newSy();
                switch (this._syData.toLowerCase()) {
                    case 'ppp':
                        beat.dynamics = DynamicValue.PPP;
                        break;
                    case 'pp':
                        beat.dynamics = DynamicValue.PP;
                        break;
                    case 'p':
                        beat.dynamics = DynamicValue.P;
                        break;
                    case 'mp':
                        beat.dynamics = DynamicValue.MP;
                        break;
                    case 'mf':
                        beat.dynamics = DynamicValue.MF;
                        break;
                    case 'f':
                        beat.dynamics = DynamicValue.F;
                        break;
                    case 'ff':
                        beat.dynamics = DynamicValue.FF;
                        break;
                    case 'fff':
                        beat.dynamics = DynamicValue.FFF;
                        break;
                }
                this._currentDynamics = beat.dynamics;
                this.newSy();
                return true;
            }
            if (syData === 'cre') {
                beat.crescendo = CrescendoType.Crescendo;
                this.newSy();
                return true;
            }
            if (syData === 'dec') {
                beat.crescendo = CrescendoType.Decrescendo;
                this.newSy();
                return true;
            }
            if (syData === 'tp') {
                this._sy = this.newSy();
                let duration = Duration.Eighth;
                if (this._sy === AlphaTexSymbols.Number) {
                    switch (this._syData) {
                        case 8:
                            duration = Duration.Eighth;
                            break;
                        case 16:
                            duration = Duration.Sixteenth;
                            break;
                        case 32:
                            duration = Duration.ThirtySecond;
                            break;
                        default:
                            duration = Duration.Eighth;
                            break;
                    }
                    this._sy = this.newSy();
                }
                beat.tremoloSpeed = duration;
                return true;
            }
            return false;
        }
        applyTuplet(beat, tuplet) {
            switch (tuplet) {
                case 3:
                    beat.tupletNumerator = 3;
                    beat.tupletDenominator = 2;
                    break;
                case 5:
                    beat.tupletNumerator = 5;
                    beat.tupletDenominator = 4;
                    break;
                case 6:
                    beat.tupletNumerator = 6;
                    beat.tupletDenominator = 4;
                    break;
                case 7:
                    beat.tupletNumerator = 7;
                    beat.tupletDenominator = 4;
                    break;
                case 9:
                    beat.tupletNumerator = 9;
                    beat.tupletDenominator = 8;
                    break;
                case 10:
                    beat.tupletNumerator = 10;
                    beat.tupletDenominator = 8;
                    break;
                case 11:
                    beat.tupletNumerator = 11;
                    beat.tupletDenominator = 8;
                    break;
                case 12:
                    beat.tupletNumerator = 12;
                    beat.tupletDenominator = 8;
                    break;
                default:
                    beat.tupletNumerator = 1;
                    beat.tupletDenominator = 1;
                    break;
            }
        }
        note(beat) {
            // fret.string
            let isDead = false;
            let isTie = false;
            let fret = -1;
            let octave = -1;
            let tone = -1;
            switch (this._sy) {
                case AlphaTexSymbols.Number:
                    fret = this._syData;
                    break;
                case AlphaTexSymbols.String:
                    isDead = this._syData === 'x';
                    isTie = this._syData === '-';
                    if (isTie || isDead) {
                        fret = 0;
                    }
                    else {
                        this.error('note-fret', AlphaTexSymbols.Number, true);
                    }
                    break;
                case AlphaTexSymbols.Tuning:
                    let tuning = this._syData;
                    octave = tuning.octave;
                    tone = tuning.noteValue;
                    break;
                default:
                    return false;
            }
            this._sy = this.newSy(); // Fret done
            let isFretted = octave === -1 && this._currentStaff.tuning.length > 0;
            let noteString = -1;
            if (isFretted) {
                // Fret [Dot] String
                if (this._sy !== AlphaTexSymbols.Dot) {
                    this.error('note', AlphaTexSymbols.Dot, true);
                }
                this._sy = this.newSy(); // dot done
                if (this._sy !== AlphaTexSymbols.Number) {
                    this.error('note-string', AlphaTexSymbols.Number, true);
                }
                noteString = this._syData;
                if (noteString < 1 || noteString > this._currentStaff.tuning.length) {
                    this.error('note-string', AlphaTexSymbols.Number, false);
                }
                this._sy = this.newSy(); // string done
            }
            // read effects
            let note = new Note();
            if (isFretted) {
                note.string = this._currentStaff.tuning.length - (noteString - 1);
                note.isDead = isDead;
                note.isTieDestination = isTie;
                if (!isTie) {
                    note.fret = fret;
                }
            }
            else {
                note.octave = octave;
                note.tone = tone;
                note.isTieDestination = isTie;
            }
            beat.addNote(note);
            this.noteEffects(note);
            return true;
        }
        noteEffects(note) {
            if (this._sy !== AlphaTexSymbols.LBrace) {
                return;
            }
            this._sy = this.newSy();
            while (this._sy === AlphaTexSymbols.String) {
                let syData = this._syData.toLowerCase();
                this._syData = syData;
                if (syData === 'b' || syData === 'be') {
                    let exact = this._syData === 'be';
                    // read points
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.LParensis) {
                        this.error('bend-effect', AlphaTexSymbols.LParensis, true);
                    }
                    this._sy = this.newSy();
                    while (this._sy !== AlphaTexSymbols.RParensis && this._sy !== AlphaTexSymbols.Eof) {
                        let offset = 0;
                        let value = 0;
                        if (exact) {
                            if (this._sy !== AlphaTexSymbols.Number) {
                                this.error('bend-effect-value', AlphaTexSymbols.Number, true);
                            }
                            offset = this._syData;
                            this._sy = this.newSy();
                            if (this._sy !== AlphaTexSymbols.Number) {
                                this.error('bend-effect-value', AlphaTexSymbols.Number, true);
                            }
                            value = this._syData;
                        }
                        else {
                            if (this._sy !== AlphaTexSymbols.Number) {
                                this.error('bend-effect-value', AlphaTexSymbols.Number, true);
                            }
                            value = this._syData;
                        }
                        note.addBendPoint(new BendPoint(offset, value));
                        this._sy = this.newSy();
                    }
                    while (note.bendPoints.length > 60) {
                        note.bendPoints.splice(note.bendPoints.length - 1, 1);
                    }
                    // set positions
                    if (exact) {
                        note.bendPoints.sort((a, b) => {
                            return a.offset - b.offset;
                        });
                    }
                    else {
                        let count = note.bendPoints.length;
                        let step = (60 / (count - 1)) | 0;
                        let i = 0;
                        while (i < count) {
                            note.bendPoints[i].offset = Math.min(60, i * step);
                            i++;
                        }
                    }
                    if (this._sy !== AlphaTexSymbols.RParensis) {
                        this.error('bend-effect', AlphaTexSymbols.RParensis, true);
                    }
                    this._sy = this.newSy();
                }
                else if (syData === 'nh') {
                    note.harmonicType = HarmonicType.Natural;
                    this._sy = this.newSy();
                }
                else if (syData === 'ah') {
                    // todo: Artificial Key
                    note.harmonicType = HarmonicType.Artificial;
                    this._sy = this.newSy();
                }
                else if (syData === 'th') {
                    // todo: store tapped fret in data
                    note.harmonicType = HarmonicType.Tap;
                    this._sy = this.newSy();
                }
                else if (syData === 'ph') {
                    note.harmonicType = HarmonicType.Pinch;
                    this._sy = this.newSy();
                }
                else if (syData === 'sh') {
                    note.harmonicType = HarmonicType.Semi;
                    this._sy = this.newSy();
                }
                else if (syData === 'tr') {
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.Number) {
                        this.error('trill-effect', AlphaTexSymbols.Number, true);
                    }
                    let fret = this._syData;
                    this._sy = this.newSy();
                    let duration = Duration.Sixteenth;
                    if (this._sy === AlphaTexSymbols.Number) {
                        switch (this._syData) {
                            case 16:
                                duration = Duration.Sixteenth;
                                break;
                            case 32:
                                duration = Duration.ThirtySecond;
                                break;
                            case 64:
                                duration = Duration.SixtyFourth;
                                break;
                            default:
                                duration = Duration.Sixteenth;
                                break;
                        }
                        this._sy = this.newSy();
                    }
                    note.trillValue = fret + note.stringTuning;
                    note.trillSpeed = duration;
                }
                else if (syData === 'v') {
                    this._sy = this.newSy();
                    note.vibrato = VibratoType.Slight;
                }
                else if (syData === 'sl') {
                    this._sy = this.newSy();
                    note.slideOutType = SlideOutType.Legato;
                }
                else if (syData === 'ss') {
                    this._sy = this.newSy();
                    note.slideOutType = SlideOutType.Shift;
                }
                else if (syData === 'sib') {
                    this._sy = this.newSy();
                    note.slideInType = SlideInType.IntoFromBelow;
                }
                else if (syData === 'sia') {
                    this._sy = this.newSy();
                    note.slideInType = SlideInType.IntoFromAbove;
                }
                else if (syData === 'sou') {
                    this._sy = this.newSy();
                    note.slideOutType = SlideOutType.OutUp;
                }
                else if (syData === 'sod') {
                    this._sy = this.newSy();
                    note.slideOutType = SlideOutType.OutDown;
                }
                else if (syData === 'psd') {
                    this._sy = this.newSy();
                    note.slideOutType = SlideOutType.PickSlideDown;
                }
                else if (syData === 'psu') {
                    this._sy = this.newSy();
                    note.slideOutType = SlideOutType.PickSlideUp;
                }
                else if (syData === 'h') {
                    this._sy = this.newSy();
                    note.isHammerPullOrigin = true;
                }
                else if (syData === 'g') {
                    this._sy = this.newSy();
                    note.isGhost = true;
                }
                else if (syData === 'ac') {
                    this._sy = this.newSy();
                    note.accentuated = AccentuationType.Normal;
                }
                else if (syData === 'hac') {
                    this._sy = this.newSy();
                    note.accentuated = AccentuationType.Heavy;
                }
                else if (syData === 'pm') {
                    this._sy = this.newSy();
                    note.isPalmMute = true;
                }
                else if (syData === 'st') {
                    this._sy = this.newSy();
                    note.isStaccato = true;
                }
                else if (syData === 'lr') {
                    this._sy = this.newSy();
                    note.isLetRing = true;
                }
                else if (syData === 'x') {
                    this._sy = this.newSy();
                    note.fret = 0;
                    note.isDead = true;
                }
                else if (syData === '-' || syData === 't') {
                    this._sy = this.newSy();
                    note.isTieDestination = true;
                }
                else if (syData === 'lf') {
                    this._sy = this.newSy();
                    let finger = Fingers.Thumb;
                    if (this._sy === AlphaTexSymbols.Number) {
                        finger = this.toFinger(this._syData);
                        this._sy = this.newSy();
                    }
                    note.leftHandFinger = finger;
                }
                else if (syData === 'rf') {
                    this._sy = this.newSy();
                    let finger = Fingers.Thumb;
                    if (this._sy === AlphaTexSymbols.Number) {
                        finger = this.toFinger(this._syData);
                        this._sy = this.newSy();
                    }
                    note.rightHandFinger = finger;
                }
                else if (this.applyBeatEffect(note.beat)) ;
                else {
                    this.error(syData, AlphaTexSymbols.String, false);
                }
            }
            if (this._sy !== AlphaTexSymbols.RBrace) {
                this.error('note-effect', AlphaTexSymbols.RBrace, false);
            }
            this._sy = this.newSy();
        }
        toFinger(syData) {
            switch (syData) {
                case 1:
                    return Fingers.Thumb;
                case 2:
                    return Fingers.IndexFinger;
                case 3:
                    return Fingers.MiddleFinger;
                case 4:
                    return Fingers.AnnularFinger;
                case 5:
                    return Fingers.LittleFinger;
            }
            return Fingers.Thumb;
        }
        parseDuration(duration) {
            switch (duration) {
                case -4:
                    return Duration.QuadrupleWhole;
                case -2:
                    return Duration.DoubleWhole;
                case 1:
                    return Duration.Whole;
                case 2:
                    return Duration.Half;
                case 4:
                    return Duration.Quarter;
                case 8:
                    return Duration.Eighth;
                case 16:
                    return Duration.Sixteenth;
                case 32:
                    return Duration.ThirtySecond;
                case 64:
                    return Duration.SixtyFourth;
                case 128:
                    return Duration.OneHundredTwentyEighth;
                default:
                    return Duration.Quarter;
            }
        }
        barMeta(bar) {
            let master = bar.masterBar;
            while (this._sy === AlphaTexSymbols.MetaCommand) {
                let syData = this._syData.toLowerCase();
                if (syData === 'ts') {
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.Number) {
                        this.error('timesignature-numerator', AlphaTexSymbols.Number, true);
                    }
                    master.timeSignatureNumerator = this._syData;
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.Number) {
                        this.error('timesignature-denominator', AlphaTexSymbols.Number, true);
                    }
                    master.timeSignatureDenominator = this._syData;
                    this._sy = this.newSy();
                }
                else if (syData === 'ro') {
                    master.isRepeatStart = true;
                    this._sy = this.newSy();
                }
                else if (syData === 'rc') {
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.Number) {
                        this.error('repeatclose', AlphaTexSymbols.Number, true);
                    }
                    master.repeatCount = this._syData;
                    this._sy = this.newSy();
                }
                else if (syData === 'ks') {
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.String) {
                        this.error('keysignature', AlphaTexSymbols.String, true);
                    }
                    master.keySignature = this.parseKeySignature(this._syData.toLowerCase());
                    this._sy = this.newSy();
                }
                else if (syData === 'clef') {
                    this._sy = this.newSy();
                    switch (this._sy) {
                        case AlphaTexSymbols.String:
                            bar.clef = this.parseClefFromString(this._syData.toLowerCase());
                            break;
                        case AlphaTexSymbols.Number:
                            bar.clef = this.parseClefFromInt(this._syData);
                            break;
                        case AlphaTexSymbols.Tuning:
                            let parseResult = this._syData;
                            bar.clef = this.parseClefFromInt(parseResult.realValue);
                            break;
                        default:
                            this.error('clef', AlphaTexSymbols.String, true);
                            break;
                    }
                    this._sy = this.newSy();
                }
                else if (syData === 'tempo') {
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.Number) {
                        this.error('tempo', AlphaTexSymbols.Number, true);
                    }
                    let tempoAutomation = new Automation();
                    tempoAutomation.isLinear = true;
                    tempoAutomation.type = AutomationType.Tempo;
                    tempoAutomation.value = this._syData;
                    master.tempoAutomation = tempoAutomation;
                    this._sy = this.newSy();
                }
                else if (syData === 'section') {
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.String) {
                        this.error('section', AlphaTexSymbols.String, true);
                    }
                    let text = this._syData;
                    this._sy = this.newSy();
                    let marker = '';
                    if (this._sy === AlphaTexSymbols.String) {
                        marker = text;
                        text = this._syData;
                        this._sy = this.newSy();
                    }
                    let section = new Section();
                    section.marker = marker;
                    section.text = text;
                    master.section = section;
                }
                else if (syData === 'tf') {
                    this._allowTuning = false;
                    this._sy = this.newSy();
                    this._allowTuning = true;
                    switch (this._sy) {
                        case AlphaTexSymbols.String:
                            master.tripletFeel = this.parseTripletFeelFromString(this._syData.toLowerCase());
                            break;
                        case AlphaTexSymbols.Number:
                            master.tripletFeel = this.parseTripletFeelFromInt(this._syData);
                            break;
                        default:
                            this.error('triplet-feel', AlphaTexSymbols.String, true);
                            break;
                    }
                    this._sy = this.newSy();
                }
                else if (syData === 'ac') {
                    master.isAnacrusis = true;
                    this._sy = this.newSy();
                }
                else {
                    if (bar.index === 0 && !this.handleStaffMeta()) {
                        this.error('measure-effects', AlphaTexSymbols.String, false);
                    }
                }
            }
        }
    }
    AlphaTexImporter.Eof = 0;

    class TypeConversions {
        static uint16ToInt16(v) {
            TypeConversions._dataView.setUint16(0, v, true);
            return TypeConversions._dataView.getInt16(0, true);
        }
        static int16ToUint32(v) {
            TypeConversions._dataView.setInt16(0, v, true);
            return TypeConversions._dataView.getUint32(0, true);
        }
        static int32ToUint16(v) {
            TypeConversions._dataView.setInt32(0, v, true);
            return TypeConversions._dataView.getUint16(0, true);
        }
        static int32ToInt16(v) {
            TypeConversions._dataView.setInt32(0, v, true);
            return TypeConversions._dataView.getInt16(0, true);
        }
        static int32ToUint32(v) {
            TypeConversions._dataView.setInt32(0, v, true);
            return TypeConversions._dataView.getUint32(0, true);
        }
        static uint8ToInt8(v) {
            TypeConversions._dataView.setUint8(0, v);
            return TypeConversions._dataView.getInt8(0);
        }
    }
    TypeConversions._conversionBuffer = new ArrayBuffer(8);
    TypeConversions._dataView = new DataView(TypeConversions._conversionBuffer);

    class IOHelper {
        static readInt32BE(input) {
            let ch1 = input.readByte();
            let ch2 = input.readByte();
            let ch3 = input.readByte();
            let ch4 = input.readByte();
            return (ch1 << 24) | (ch2 << 16) | (ch3 << 8) | ch4;
        }
        static readInt32LE(input) {
            let ch1 = input.readByte();
            let ch2 = input.readByte();
            let ch3 = input.readByte();
            let ch4 = input.readByte();
            return (ch4 << 24) | (ch3 << 16) | (ch2 << 8) | ch1;
        }
        static readUInt32LE(input) {
            let ch1 = input.readByte();
            let ch2 = input.readByte();
            let ch3 = input.readByte();
            let ch4 = input.readByte();
            return (ch4 << 24) | (ch3 << 16) | (ch2 << 8) | ch1;
        }
        static readUInt16LE(input) {
            let ch1 = input.readByte();
            let ch2 = input.readByte();
            return TypeConversions.int32ToUint16((ch2 << 8) | ch1);
        }
        static readInt16LE(input) {
            let ch1 = input.readByte();
            let ch2 = input.readByte();
            return TypeConversions.int32ToInt16((ch2 << 8) | ch1);
        }
        static readUInt32BE(input) {
            let ch1 = input.readByte();
            let ch2 = input.readByte();
            let ch3 = input.readByte();
            let ch4 = input.readByte();
            return TypeConversions.int32ToUint32((ch1 << 24) | (ch2 << 16) | (ch3 << 8) | ch4);
        }
        static readUInt16BE(input) {
            let ch1 = input.readByte();
            let ch2 = input.readByte();
            return TypeConversions.int32ToInt16((ch1 << 8) | ch2);
        }
        static readInt16BE(input) {
            let ch1 = input.readByte();
            let ch2 = input.readByte();
            return TypeConversions.int32ToInt16((ch1 << 8) | ch2);
        }
        static readByteArray(input, length) {
            let v = new Uint8Array(length);
            input.read(v, 0, length);
            return v;
        }
        static read8BitChars(input, length) {
            let b = new Uint8Array(length);
            input.read(b, 0, b.length);
            return Platform.toString(b, 'utf-8');
        }
        static read8BitString(input) {
            let s = '';
            let c = input.readByte();
            while (c !== 0) {
                s += String.fromCharCode(c);
                c = input.readByte();
            }
            return s;
        }
        static read8BitStringLength(input, length) {
            let s = '';
            let z = -1;
            for (let i = 0; i < length; i++) {
                let c = input.readByte();
                if (c === 0 && z === -1) {
                    z = i;
                }
                s += String.fromCharCode(c);
            }
            let t = s;
            if (z >= 0) {
                return t.substr(0, z);
            }
            return t;
        }
        static readSInt8(input) {
            let v = input.readByte();
            return ((v & 255) >> 7) * -256 + (v & 255);
        }
        static readInt24(input, index) {
            let i = input[index] | (input[index + 1] << 8) | (input[index + 2] << 16);
            if ((i & 0x800000) === 0x800000) {
                i = i | (0xff << 24);
            }
            return i;
        }
        static readInt16(input, index) {
            return TypeConversions.int32ToInt16(input[index] | (input[index + 1] << 8));
        }
    }

    class Gp3To5Importer extends ScoreImporter {
        constructor() {
            super();
            this._versionNumber = 0;
            this._globalTripletFeel = TripletFeel.NoTripletFeel;
            this._lyricsTrack = 0;
            this._lyrics = [];
            this._barCount = 0;
            this._trackCount = 0;
            this._playbackInfos = [];
        }
        get name() {
            return 'Guitar Pro 3-5';
        }
        readScore() {
            this.readVersion();
            this._score = new Score();
            // basic song info
            this.readScoreInformation();
            // triplet feel before Gp5
            if (this._versionNumber < 500) {
                this._globalTripletFeel = GpBinaryHelpers.gpReadBool(this.data)
                    ? TripletFeel.Triplet8th
                    : TripletFeel.NoTripletFeel;
            }
            // beat lyrics
            if (this._versionNumber >= 400) {
                this.readLyrics();
            }
            // rse master settings since GP5.1
            if (this._versionNumber >= 510) {
                // master volume (4)
                // master effect (4)
                // master equalizer (10)
                // master equalizer preset (1)
                this.data.skip(19);
            }
            // page setup since GP5
            if (this._versionNumber >= 500) {
                this.readPageSetup();
                this._score.tempoLabel = GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            }
            // tempo stuff
            this._score.tempo = IOHelper.readInt32LE(this.data);
            if (this._versionNumber >= 510) {
                GpBinaryHelpers.gpReadBool(this.data); // hide tempo?
            }
            // keysignature and octave
            IOHelper.readInt32LE(this.data);
            if (this._versionNumber >= 400) {
                this.data.readByte();
            }
            this.readPlaybackInfos();
            // repetition stuff
            if (this._versionNumber >= 500) {
                // "Coda" bar index (2)
                // "Double Coda" bar index (2)
                // "Segno" bar index (2)
                // "Segno Segno" bar index (2)
                // "Fine" bar index (2)
                // "Da Capo" bar index (2)
                // "Da Capo al Coda" bar index (2)
                // "Da Capo al Double Coda" bar index (2)
                // "Da Capo al Fine" bar index (2)
                // "Da Segno" bar index (2)
                // "Da Segno al Coda" bar index (2)
                // "Da Segno al Double Coda" bar index (2)
                // "Da Segno al Fine "bar index (2)
                // "Da Segno Segno" bar index (2)
                // "Da Segno Segno al Coda" bar index (2)
                // "Da Segno Segno al Double Coda" bar index (2)
                // "Da Segno Segno al Fine" bar index (2)
                // "Da Coda" bar index (2)
                // "Da Double Coda" bar index (2)
                this.data.skip(38);
                // unknown (4)
                this.data.skip(4);
            }
            // contents
            this._barCount = IOHelper.readInt32LE(this.data);
            this._trackCount = IOHelper.readInt32LE(this.data);
            this.readMasterBars();
            this.readTracks();
            this.readBars();
            this._score.finish(this.settings);
            if (this._lyrics && this._lyricsTrack >= 0) {
                this._score.tracks[this._lyricsTrack].applyLyrics(this._lyrics);
            }
            return this._score;
        }
        readVersion() {
            let version = GpBinaryHelpers.gpReadStringByteLength(this.data, 30, this.settings.importer.encoding);
            if (!version.startsWith(Gp3To5Importer.VersionString)) {
                throw new UnsupportedFormatError('Unsupported format');
            }
            version = version.substr(Gp3To5Importer.VersionString.length + 1);
            let dot = version.indexOf(String.fromCharCode(46));
            this._versionNumber = 100 * parseInt(version.substr(0, dot)) + parseInt(version.substr(dot + 1));
            Logger.info(this.name, 'Guitar Pro version ' + version + ' detected');
        }
        readScoreInformation() {
            var _a;
            this._score.title = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
            this._score.subTitle = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
            this._score.artist = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
            this._score.album = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
            this._score.words = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
            this._score.music =
                this._versionNumber >= 500
                    ? GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding)
                    : this._score.words;
            this._score.copyright = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
            this._score.tab = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
            this._score.instructions = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
            let noticeLines = IOHelper.readInt32LE(this.data);
            let notice = '';
            for (let i = 0; i < noticeLines; i++) {
                if (i > 0) {
                    notice += '\r\n';
                }
                notice += (_a = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding)) === null || _a === void 0 ? void 0 : _a.toString();
            }
            this._score.notices = notice;
        }
        readLyrics() {
            this._lyrics = [];
            this._lyricsTrack = IOHelper.readInt32LE(this.data) - 1;
            for (let i = 0; i < 5; i++) {
                let lyrics = new Lyrics();
                lyrics.startBar = IOHelper.readInt32LE(this.data) - 1;
                lyrics.text = GpBinaryHelpers.gpReadStringInt(this.data, this.settings.importer.encoding);
                this._lyrics.push(lyrics);
            }
        }
        readPageSetup() {
            // Page Width (4)
            // Page Heigth (4)
            // Padding Left (4)
            // Padding Right (4)
            // Padding Top (4)
            // Padding Bottom (4)
            // Size Proportion(4)
            // Header and Footer display flags (2)
            this.data.skip(30);
            // title format
            // subtitle format
            // artist format
            // album format
            // words format
            // music format
            // words and music format
            // copyright format
            // pagpublic enumber format
            for (let i = 0; i < 10; i++) {
                GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            }
        }
        readPlaybackInfos() {
            this._playbackInfos = [];
            for (let i = 0; i < 64; i++) {
                let info = new PlaybackInformation();
                info.primaryChannel = i;
                info.secondaryChannel = i;
                info.program = IOHelper.readInt32LE(this.data);
                info.volume = this.data.readByte();
                info.balance = this.data.readByte();
                this.data.skip(6);
                this._playbackInfos.push(info);
            }
        }
        readMasterBars() {
            for (let i = 0; i < this._barCount; i++) {
                this.readMasterBar();
            }
        }
        readMasterBar() {
            let previousMasterBar = null;
            if (this._score.masterBars.length > 0) {
                previousMasterBar = this._score.masterBars[this._score.masterBars.length - 1];
            }
            let newMasterBar = new MasterBar();
            let flags = this.data.readByte();
            // time signature
            if ((flags & 0x01) !== 0) {
                newMasterBar.timeSignatureNumerator = this.data.readByte();
            }
            else if (previousMasterBar) {
                newMasterBar.timeSignatureNumerator = previousMasterBar.timeSignatureNumerator;
            }
            if ((flags & 0x02) !== 0) {
                newMasterBar.timeSignatureDenominator = this.data.readByte();
            }
            else if (previousMasterBar) {
                newMasterBar.timeSignatureDenominator = previousMasterBar.timeSignatureDenominator;
            }
            // repeatings
            newMasterBar.isRepeatStart = (flags & 0x04) !== 0;
            if ((flags & 0x08) !== 0) {
                newMasterBar.repeatCount = this.data.readByte() + (this._versionNumber >= 500 ? 0 : 1);
            }
            // alternate endings
            if ((flags & 0x10) !== 0) {
                if (this._versionNumber < 500) {
                    let currentMasterBar = previousMasterBar;
                    // get the already existing alternatives to ignore them
                    let existentAlternatives = 0;
                    while (currentMasterBar) {
                        // found another repeat ending?
                        if (currentMasterBar.isRepeatEnd && currentMasterBar !== previousMasterBar) {
                            break;
                        }
                        // found the opening?
                        if (currentMasterBar.isRepeatStart) {
                            break;
                        }
                        existentAlternatives = existentAlternatives | currentMasterBar.alternateEndings;
                        currentMasterBar = currentMasterBar.previousMasterBar;
                    }
                    // now calculate the alternative for this bar
                    let repeatAlternative = 0;
                    let repeatMask = this.data.readByte();
                    for (let i = 0; i < 8; i++) {
                        // only add the repeating if it is not existing
                        let repeating = 1 << i;
                        if (repeatMask > i && (existentAlternatives & repeating) === 0) {
                            repeatAlternative = repeatAlternative | repeating;
                        }
                    }
                    newMasterBar.alternateEndings = repeatAlternative;
                }
                else {
                    newMasterBar.alternateEndings = this.data.readByte();
                }
            }
            // marker
            if ((flags & 0x20) !== 0) {
                let section = new Section();
                section.text = GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
                section.marker = '';
                GpBinaryHelpers.gpReadColor(this.data, false);
                newMasterBar.section = section;
            }
            // keysignature
            if ((flags & 0x40) !== 0) {
                newMasterBar.keySignature = IOHelper.readSInt8(this.data);
                newMasterBar.keySignatureType = this.data.readByte();
            }
            else if (previousMasterBar) {
                newMasterBar.keySignature = previousMasterBar.keySignature;
                newMasterBar.keySignatureType = previousMasterBar.keySignatureType;
            }
            if (this._versionNumber >= 500 && (flags & 0x03) !== 0) {
                this.data.skip(4);
            }
            // better alternate ending mask in GP5
            if (this._versionNumber >= 500 && (flags & 0x10) === 0) {
                newMasterBar.alternateEndings = this.data.readByte();
            }
            // tripletfeel
            if (this._versionNumber >= 500) {
                let tripletFeel = this.data.readByte();
                switch (tripletFeel) {
                    case 1:
                        newMasterBar.tripletFeel = TripletFeel.Triplet8th;
                        break;
                    case 2:
                        newMasterBar.tripletFeel = TripletFeel.Triplet16th;
                        break;
                }
                this.data.readByte();
            }
            else {
                newMasterBar.tripletFeel = this._globalTripletFeel;
            }
            newMasterBar.isDoubleBar = (flags & 0x80) !== 0;
            this._score.addMasterBar(newMasterBar);
        }
        readTracks() {
            for (let i = 0; i < this._trackCount; i++) {
                this.readTrack();
            }
        }
        readTrack() {
            let newTrack = new Track();
            newTrack.ensureStaveCount(1);
            this._score.addTrack(newTrack);
            let mainStaff = newTrack.staves[0];
            let flags = this.data.readByte();
            newTrack.name = GpBinaryHelpers.gpReadStringByteLength(this.data, 40, this.settings.importer.encoding);
            if ((flags & 0x01) !== 0) {
                mainStaff.isPercussion = true;
            }
            let stringCount = IOHelper.readInt32LE(this.data);
            let tuning = [];
            for (let i = 0; i < 7; i++) {
                let stringTuning = IOHelper.readInt32LE(this.data);
                if (stringCount > i) {
                    tuning.push(stringTuning);
                }
            }
            mainStaff.tuning = tuning;
            let port = IOHelper.readInt32LE(this.data);
            let index = IOHelper.readInt32LE(this.data) - 1;
            let effectChannel = IOHelper.readInt32LE(this.data) - 1;
            this.data.skip(4); // Fretcount
            if (index >= 0 && index < this._playbackInfos.length) {
                let info = this._playbackInfos[index];
                info.port = port;
                info.isSolo = (flags & 0x10) !== 0;
                info.isMute = (flags & 0x20) !== 0;
                info.secondaryChannel = effectChannel;
                if (GeneralMidi.isGuitar(info.program)) {
                    mainStaff.displayTranspositionPitch = -12;
                }
                newTrack.playbackInfo = info;
            }
            mainStaff.capo = IOHelper.readInt32LE(this.data);
            newTrack.color = GpBinaryHelpers.gpReadColor(this.data, false);
            if (this._versionNumber >= 500) {
                // flags for
                //  0x01 -> show tablature
                //  0x02 -> show standard notation
                this.data.readByte();
                // flags for
                //  0x02 -> auto let ring
                //  0x04 -> auto brush
                this.data.readByte();
                // unknown
                this.data.skip(43);
            }
            // unknown
            if (this._versionNumber >= 510) {
                this.data.skip(4);
                GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
                GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            }
        }
        readBars() {
            for (let i = 0; i < this._barCount; i++) {
                for (let t = 0; t < this._trackCount; t++) {
                    this.readBar(this._score.tracks[t]);
                }
            }
        }
        readBar(track) {
            let newBar = new Bar();
            let mainStaff = track.staves[0];
            if (mainStaff.isPercussion) {
                newBar.clef = Clef.Neutral;
            }
            mainStaff.addBar(newBar);
            let voiceCount = 1;
            if (this._versionNumber >= 500) {
                this.data.readByte();
                voiceCount = 2;
            }
            for (let v = 0; v < voiceCount; v++) {
                this.readVoice(track, newBar);
            }
        }
        readVoice(track, bar) {
            let beatCount = IOHelper.readInt32LE(this.data);
            if (beatCount === 0) {
                return;
            }
            let newVoice = new Voice();
            bar.addVoice(newVoice);
            for (let i = 0; i < beatCount; i++) {
                this.readBeat(track, bar, newVoice);
            }
        }
        readBeat(track, bar, voice) {
            let newBeat = new Beat();
            let flags = this.data.readByte();
            if ((flags & 0x01) !== 0) {
                newBeat.dots = 1;
            }
            if ((flags & 0x40) !== 0) {
                let type = this.data.readByte();
                newBeat.isEmpty = (type & 0x02) === 0;
            }
            voice.addBeat(newBeat);
            let duration = IOHelper.readSInt8(this.data);
            switch (duration) {
                case -2:
                    newBeat.duration = Duration.Whole;
                    break;
                case -1:
                    newBeat.duration = Duration.Half;
                    break;
                case 0:
                    newBeat.duration = Duration.Quarter;
                    break;
                case 1:
                    newBeat.duration = Duration.Eighth;
                    break;
                case 2:
                    newBeat.duration = Duration.Sixteenth;
                    break;
                case 3:
                    newBeat.duration = Duration.ThirtySecond;
                    break;
                case 4:
                    newBeat.duration = Duration.SixtyFourth;
                    break;
                default:
                    newBeat.duration = Duration.Quarter;
                    break;
            }
            if ((flags & 0x20) !== 0) {
                newBeat.tupletNumerator = IOHelper.readInt32LE(this.data);
                switch (newBeat.tupletNumerator) {
                    case 1:
                        newBeat.tupletDenominator = 1;
                        break;
                    case 3:
                        newBeat.tupletDenominator = 2;
                        break;
                    case 5:
                    case 6:
                    case 7:
                        newBeat.tupletDenominator = 4;
                        break;
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                        newBeat.tupletDenominator = 8;
                        break;
                    case 2:
                    case 4:
                    case 8:
                        break;
                    default:
                        newBeat.tupletNumerator = 1;
                        newBeat.tupletDenominator = 1;
                        break;
                }
            }
            if ((flags & 0x02) !== 0) {
                this.readChord(newBeat);
            }
            if ((flags & 0x04) !== 0) {
                newBeat.text = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
            }
            if ((flags & 0x08) !== 0) {
                this.readBeatEffects(newBeat);
            }
            if ((flags & 0x10) !== 0) {
                this.readMixTableChange(newBeat);
            }
            let stringFlags = this.data.readByte();
            for (let i = 6; i >= 0; i--) {
                if ((stringFlags & (1 << i)) !== 0 && 6 - i < bar.staff.tuning.length) {
                    this.readNote(track, bar, voice, newBeat, 6 - i);
                }
            }
            if (this._versionNumber >= 500) {
                this.data.readByte();
                let flag = this.data.readByte();
                if ((flag & 0x08) !== 0) {
                    this.data.readByte();
                }
            }
        }
        readChord(beat) {
            let chord = new Chord();
            let chordId = Platform.newGuid();
            if (this._versionNumber >= 500) {
                this.data.skip(17);
                chord.name = GpBinaryHelpers.gpReadStringByteLength(this.data, 21, this.settings.importer.encoding);
                this.data.skip(4);
                chord.firstFret = IOHelper.readInt32LE(this.data);
                for (let i = 0; i < 7; i++) {
                    let fret = IOHelper.readInt32LE(this.data);
                    if (i < beat.voice.bar.staff.tuning.length) {
                        chord.strings.push(fret);
                    }
                }
                let numberOfBarres = this.data.readByte();
                let barreFrets = new Uint8Array(5);
                this.data.read(barreFrets, 0, barreFrets.length);
                for (let i = 0; i < numberOfBarres; i++) {
                    chord.barreFrets.push(barreFrets[i]);
                }
                this.data.skip(26);
            }
            else {
                if (this.data.readByte() !== 0) {
                    // gp4
                    if (this._versionNumber >= 400) {
                        // Sharp (1)
                        // Unused (3)
                        // Root (1)
                        // Major/Minor (1)
                        // Nin,Eleven or Thirteen (1)
                        // Bass (4)
                        // Diminished/Augmented (4)
                        // Add (1)
                        this.data.skip(16);
                        chord.name = GpBinaryHelpers.gpReadStringByteLength(this.data, 21, this.settings.importer.encoding);
                        // Unused (2)
                        // Fifth (1)
                        // Ninth (1)
                        // Eleventh (1)
                        this.data.skip(4);
                        chord.firstFret = IOHelper.readInt32LE(this.data);
                        for (let i = 0; i < 7; i++) {
                            let fret = IOHelper.readInt32LE(this.data);
                            if (i < beat.voice.bar.staff.tuning.length) {
                                chord.strings.push(fret);
                            }
                        }
                        let numberOfBarres = this.data.readByte();
                        let barreFrets = new Uint8Array(5);
                        this.data.read(barreFrets, 0, barreFrets.length);
                        for (let i = 0; i < numberOfBarres; i++) {
                            chord.barreFrets.push(barreFrets[i]);
                        }
                        // Barree end (5)
                        // Omission1,3,5,7,9,11,13 (7)
                        // Unused (1)
                        // Fingering (7)
                        // Show Diagram Fingering (1)
                        // ??
                        this.data.skip(26);
                    }
                    else {
                        // unknown
                        this.data.skip(25);
                        chord.name = GpBinaryHelpers.gpReadStringByteLength(this.data, 34, this.settings.importer.encoding);
                        chord.firstFret = IOHelper.readInt32LE(this.data);
                        for (let i = 0; i < 6; i++) {
                            let fret = IOHelper.readInt32LE(this.data);
                            if (i < beat.voice.bar.staff.tuning.length) {
                                chord.strings.push(fret);
                            }
                        }
                        // unknown
                        this.data.skip(36);
                    }
                }
                else {
                    let strings = this._versionNumber >= 406 ? 7 : 6;
                    chord.name = GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
                    chord.firstFret = IOHelper.readInt32LE(this.data);
                    if (chord.firstFret > 0) {
                        for (let i = 0; i < strings; i++) {
                            let fret = IOHelper.readInt32LE(this.data);
                            if (i < beat.voice.bar.staff.tuning.length) {
                                chord.strings.push(fret);
                            }
                        }
                    }
                }
            }
            if (chord.name) {
                beat.chordId = chordId;
                beat.voice.bar.staff.addChord(beat.chordId, chord);
            }
        }
        readBeatEffects(beat) {
            let flags = this.data.readByte();
            let flags2 = 0;
            if (this._versionNumber >= 400) {
                flags2 = this.data.readByte();
            }
            beat.fadeIn = (flags & 0x10) !== 0;
            if ((this._versionNumber < 400 && (flags & 0x01) !== 0) || (flags & 0x02) !== 0) {
                beat.vibrato = VibratoType.Slight;
            }
            beat.hasRasgueado = (flags2 & 0x01) !== 0;
            if ((flags & 0x20) !== 0 && this._versionNumber >= 400) {
                let slapPop = IOHelper.readSInt8(this.data);
                switch (slapPop) {
                    case 1:
                        beat.tap = true;
                        break;
                    case 2:
                        beat.slap = true;
                        break;
                    case 3:
                        beat.pop = true;
                        break;
                }
            }
            else if ((flags & 0x20) !== 0) {
                let slapPop = IOHelper.readSInt8(this.data);
                switch (slapPop) {
                    case 1:
                        beat.tap = true;
                        break;
                    case 2:
                        beat.slap = true;
                        break;
                    case 3:
                        beat.pop = true;
                        break;
                }
                this.data.skip(4);
            }
            if ((flags2 & 0x04) !== 0) {
                this.readTremoloBarEffect(beat);
            }
            if ((flags & 0x40) !== 0) {
                let strokeUp = 0;
                let strokeDown = 0;
                if (this._versionNumber < 500) {
                    strokeDown = this.data.readByte();
                    strokeUp = this.data.readByte();
                }
                else {
                    strokeUp = this.data.readByte();
                    strokeDown = this.data.readByte();
                }
                if (strokeUp > 0) {
                    beat.brushType = BrushType.BrushUp;
                    beat.brushDuration = Gp3To5Importer.toStrokeValue(strokeUp);
                }
                else if (strokeDown > 0) {
                    beat.brushType = BrushType.BrushDown;
                    beat.brushDuration = Gp3To5Importer.toStrokeValue(strokeDown);
                }
            }
            if ((flags2 & 0x02) !== 0) {
                switch (IOHelper.readSInt8(this.data)) {
                    case 0:
                        beat.pickStroke = PickStroke.None;
                        break;
                    case 1:
                        beat.pickStroke = PickStroke.Up;
                        break;
                    case 2:
                        beat.pickStroke = PickStroke.Down;
                        break;
                }
            }
        }
        readTremoloBarEffect(beat) {
            this.data.readByte(); // type
            IOHelper.readInt32LE(this.data); // value
            let pointCount = IOHelper.readInt32LE(this.data);
            if (pointCount > 0) {
                for (let i = 0; i < pointCount; i++) {
                    let point = new BendPoint(0, 0);
                    point.offset = IOHelper.readInt32LE(this.data); // 0...60
                    point.value = (IOHelper.readInt32LE(this.data) / Gp3To5Importer.BendStep) | 0; // 0..12 (amount of quarters)
                    GpBinaryHelpers.gpReadBool(this.data); // vibrato
                    beat.addWhammyBarPoint(point);
                }
            }
        }
        static toStrokeValue(value) {
            switch (value) {
                case 1:
                    return 30;
                case 2:
                    return 30;
                case 3:
                    return 60;
                case 4:
                    return 120;
                case 5:
                    return 240;
                case 6:
                    return 480;
                default:
                    return 0;
            }
        }
        readMixTableChange(beat) {
            let tableChange = new MixTableChange();
            tableChange.instrument = IOHelper.readSInt8(this.data);
            if (this._versionNumber >= 500) {
                this.data.skip(16); // Rse Info
            }
            tableChange.volume = IOHelper.readSInt8(this.data);
            tableChange.balance = IOHelper.readSInt8(this.data);
            let chorus = IOHelper.readSInt8(this.data);
            let reverb = IOHelper.readSInt8(this.data);
            let phaser = IOHelper.readSInt8(this.data);
            let tremolo = IOHelper.readSInt8(this.data);
            if (this._versionNumber >= 500) {
                tableChange.tempoName = GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            }
            tableChange.tempo = IOHelper.readInt32LE(this.data);
            // durations
            if (tableChange.volume >= 0) {
                this.data.readByte();
            }
            if (tableChange.balance >= 0) {
                this.data.readByte();
            }
            if (chorus >= 0) {
                this.data.readByte();
            }
            if (reverb >= 0) {
                this.data.readByte();
            }
            if (phaser >= 0) {
                this.data.readByte();
            }
            if (tremolo >= 0) {
                this.data.readByte();
            }
            if (tableChange.tempo >= 0) {
                tableChange.duration = IOHelper.readSInt8(this.data);
                if (this._versionNumber >= 510) {
                    this.data.readByte(); // hideTempo (bool)
                }
            }
            if (this._versionNumber >= 400) {
                this.data.readByte(); // all tracks flag
            }
            // unknown
            if (this._versionNumber >= 500) {
                this.data.readByte();
            }
            // unknown
            if (this._versionNumber >= 510) {
                GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
                GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            }
            if (tableChange.volume >= 0) {
                let volumeAutomation = new Automation();
                volumeAutomation.isLinear = true;
                volumeAutomation.type = AutomationType.Volume;
                volumeAutomation.value = tableChange.volume;
                beat.automations.push(volumeAutomation);
            }
            if (tableChange.balance >= 0) {
                let balanceAutomation = new Automation();
                balanceAutomation.isLinear = true;
                balanceAutomation.type = AutomationType.Balance;
                balanceAutomation.value = tableChange.balance;
                beat.automations.push(balanceAutomation);
            }
            if (tableChange.instrument >= 0) {
                let instrumentAutomation = new Automation();
                instrumentAutomation.isLinear = true;
                instrumentAutomation.type = AutomationType.Instrument;
                instrumentAutomation.value = tableChange.instrument;
                beat.automations.push(instrumentAutomation);
            }
            if (tableChange.tempo >= 0) {
                let tempoAutomation = new Automation();
                tempoAutomation.isLinear = true;
                tempoAutomation.type = AutomationType.Tempo;
                tempoAutomation.value = tableChange.tempo;
                beat.automations.push(tempoAutomation);
                beat.voice.bar.masterBar.tempoAutomation = tempoAutomation;
            }
        }
        readNote(track, bar, voice, beat, stringIndex) {
            let newNote = new Note();
            newNote.string = bar.staff.tuning.length - stringIndex;
            let flags = this.data.readByte();
            if ((flags & 0x02) !== 0) {
                newNote.accentuated = AccentuationType.Heavy;
            }
            else if ((flags & 0x40) !== 0) {
                newNote.accentuated = AccentuationType.Normal;
            }
            newNote.isGhost = (flags & 0x04) !== 0;
            if ((flags & 0x20) !== 0) {
                let noteType = this.data.readByte();
                if (noteType === 3) {
                    newNote.isDead = true;
                }
                else if (noteType === 2) {
                    newNote.isTieDestination = true;
                }
            }
            if ((flags & 0x01) !== 0 && this._versionNumber < 500) {
                this.data.readByte(); // duration
                this.data.readByte(); // tuplet
            }
            if ((flags & 0x10) !== 0) {
                let dynamicNumber = IOHelper.readSInt8(this.data);
                newNote.dynamics = this.toDynamicValue(dynamicNumber);
                beat.dynamics = newNote.dynamics;
            }
            if ((flags & 0x20) !== 0) {
                newNote.fret = IOHelper.readSInt8(this.data);
            }
            if ((flags & 0x80) !== 0) {
                newNote.leftHandFinger = IOHelper.readSInt8(this.data);
                newNote.rightHandFinger = IOHelper.readSInt8(this.data);
                newNote.isFingering = true;
            }
            if (this._versionNumber >= 500) {
                if ((flags & 0x01) !== 0) {
                    newNote.durationPercent = GpBinaryHelpers.gpReadDouble(this.data);
                }
                let flags2 = this.data.readByte();
                newNote.accidentalMode =
                    (flags2 & 0x02) !== 0 ? NoteAccidentalMode.SwapAccidentals : NoteAccidentalMode.Default;
            }
            beat.addNote(newNote);
            if ((flags & 0x08) !== 0) {
                this.readNoteEffects(track, voice, beat, newNote);
            }
        }
        toDynamicValue(value) {
            switch (value) {
                case 1:
                    return DynamicValue.PPP;
                case 2:
                    return DynamicValue.PP;
                case 3:
                    return DynamicValue.P;
                case 4:
                    return DynamicValue.MP;
                case 5:
                    return DynamicValue.MF;
                case 6:
                    return DynamicValue.F;
                case 7:
                    return DynamicValue.FF;
                case 8:
                    return DynamicValue.FFF;
                default:
                    return DynamicValue.F;
            }
        }
        readNoteEffects(track, voice, beat, note) {
            let flags = this.data.readByte();
            let flags2 = 0;
            if (this._versionNumber >= 400) {
                flags2 = this.data.readByte();
            }
            if ((flags & 0x01) !== 0) {
                this.readBend(note);
            }
            if ((flags & 0x10) !== 0) {
                this.readGrace(voice, note);
            }
            if ((flags2 & 0x04) !== 0) {
                this.readTremoloPicking(beat);
            }
            if ((flags2 & 0x08) !== 0) {
                this.readSlide(note);
            }
            else if (this._versionNumber < 400) {
                if ((flags & 0x04) !== 0) {
                    note.slideOutType = SlideOutType.Shift;
                }
            }
            if ((flags2 & 0x10) !== 0) {
                this.readArtificialHarmonic(note);
            }
            else if (this._versionNumber < 400) {
                if ((flags & 0x04) !== 0) {
                    note.harmonicType = HarmonicType.Natural;
                    note.harmonicValue = this.deltaFretToHarmonicValue(note.fret);
                }
                if ((flags & 0x08) !== 0) {
                    note.harmonicType = HarmonicType.Artificial;
                }
            }
            if ((flags2 & 0x20) !== 0) {
                this.readTrill(note);
            }
            note.isLetRing = (flags & 0x08) !== 0;
            note.isHammerPullOrigin = (flags & 0x02) !== 0;
            if ((flags2 & 0x40) !== 0) {
                note.vibrato = VibratoType.Slight;
            }
            note.isPalmMute = (flags2 & 0x02) !== 0;
            note.isStaccato = (flags2 & 0x01) !== 0;
        }
        readBend(note) {
            this.data.readByte(); // type
            IOHelper.readInt32LE(this.data); // value
            let pointCount = IOHelper.readInt32LE(this.data);
            if (pointCount > 0) {
                for (let i = 0; i < pointCount; i++) {
                    let point = new BendPoint(0, 0);
                    point.offset = IOHelper.readInt32LE(this.data); // 0...60
                    point.value = (IOHelper.readInt32LE(this.data) / Gp3To5Importer.BendStep) | 0; // 0..12 (amount of quarters)
                    GpBinaryHelpers.gpReadBool(this.data); // vibrato
                    note.addBendPoint(point);
                }
            }
        }
        readGrace(voice, note) {
            let graceBeat = new Beat();
            let graceNote = new Note();
            graceNote.string = note.string;
            graceNote.fret = IOHelper.readSInt8(this.data);
            graceBeat.duration = Duration.ThirtySecond;
            graceBeat.dynamics = this.toDynamicValue(IOHelper.readSInt8(this.data));
            let transition = IOHelper.readSInt8(this.data);
            switch (transition) {
                case 0:
                    break;
                case 1:
                    graceNote.slideOutType = SlideOutType.Legato;
                    graceNote.slideTarget = note;
                    break;
                case 2:
                    break;
                case 3:
                    graceNote.isHammerPullOrigin = true;
                    break;
            }
            graceNote.dynamics = graceBeat.dynamics;
            this.data.skip(1); // duration
            if (this._versionNumber < 500) {
                graceBeat.graceType = GraceType.BeforeBeat;
            }
            else {
                let flags = this.data.readByte();
                graceNote.isDead = (flags & 0x01) !== 0;
                graceBeat.graceType = (flags & 0x02) !== 0 ? GraceType.OnBeat : GraceType.BeforeBeat;
            }
            voice.addGraceBeat(graceBeat);
            graceBeat.addNote(graceNote);
        }
        readTremoloPicking(beat) {
            let speed = this.data.readByte();
            switch (speed) {
                case 1:
                    beat.tremoloSpeed = Duration.Eighth;
                    break;
                case 2:
                    beat.tremoloSpeed = Duration.Sixteenth;
                    break;
                case 3:
                    beat.tremoloSpeed = Duration.ThirtySecond;
                    break;
            }
        }
        readSlide(note) {
            if (this._versionNumber >= 500) {
                let type = IOHelper.readSInt8(this.data);
                if ((type & 1) !== 0) {
                    note.slideOutType = SlideOutType.Shift;
                }
                else if ((type & 2) !== 0) {
                    note.slideOutType = SlideOutType.Legato;
                }
                else if ((type & 4) !== 0) {
                    note.slideOutType = SlideOutType.OutDown;
                }
                else if ((type & 8) !== 0) {
                    note.slideOutType = SlideOutType.OutUp;
                }
                if ((type & 16) !== 0) {
                    note.slideInType = SlideInType.IntoFromBelow;
                }
                else if ((type & 32) !== 0) {
                    note.slideInType = SlideInType.IntoFromAbove;
                }
            }
            else {
                let type = IOHelper.readSInt8(this.data);
                switch (type) {
                    case 1:
                        note.slideOutType = SlideOutType.Shift;
                        break;
                    case 2:
                        note.slideOutType = SlideOutType.Legato;
                        break;
                    case 3:
                        note.slideOutType = SlideOutType.OutDown;
                        break;
                    case 4:
                        note.slideOutType = SlideOutType.OutUp;
                        break;
                    case -1:
                        note.slideInType = SlideInType.IntoFromBelow;
                        break;
                    case -2:
                        note.slideInType = SlideInType.IntoFromAbove;
                        break;
                }
            }
        }
        readArtificialHarmonic(note) {
            let type = this.data.readByte();
            if (this._versionNumber >= 500) {
                switch (type) {
                    case 1:
                        note.harmonicType = HarmonicType.Natural;
                        note.harmonicValue = this.deltaFretToHarmonicValue(note.fret);
                        break;
                    case 2:
                        /*let _harmonicTone: number = */ this.data.readByte();
                        /*let _harmonicKey: number =  */ this.data.readByte();
                        /*let _harmonicOctaveOffset: number = */ this.data.readByte();
                        note.harmonicType = HarmonicType.Artificial;
                        break;
                    case 3:
                        note.harmonicType = HarmonicType.Tap;
                        note.harmonicValue = this.deltaFretToHarmonicValue(this.data.readByte());
                        break;
                    case 4:
                        note.harmonicType = HarmonicType.Pinch;
                        note.harmonicValue = 12;
                        break;
                    case 5:
                        note.harmonicType = HarmonicType.Semi;
                        note.harmonicValue = 12;
                        break;
                }
            }
            else if (this._versionNumber >= 400) {
                switch (type) {
                    case 1:
                        note.harmonicType = HarmonicType.Natural;
                        break;
                    case 3:
                        note.harmonicType = HarmonicType.Tap;
                        break;
                    case 4:
                        note.harmonicType = HarmonicType.Pinch;
                        break;
                    case 5:
                        note.harmonicType = HarmonicType.Semi;
                        break;
                    case 15:
                        note.harmonicType = HarmonicType.Artificial;
                        break;
                    case 17:
                        note.harmonicType = HarmonicType.Artificial;
                        break;
                    case 22:
                        note.harmonicType = HarmonicType.Artificial;
                        break;
                }
            }
        }
        deltaFretToHarmonicValue(deltaFret) {
            switch (deltaFret) {
                case 2:
                    return 2.4;
                case 3:
                    return 3.2;
                case 4:
                case 5:
                case 7:
                case 9:
                case 12:
                case 16:
                case 17:
                case 19:
                case 24:
                    return deltaFret;
                case 8:
                    return 8.2;
                case 10:
                    return 9.6;
                case 14:
                case 15:
                    return 14.7;
                case 21:
                case 22:
                    return 21.7;
                default:
                    return 12;
            }
        }
        readTrill(note) {
            note.trillValue = this.data.readByte() + note.stringTuning;
            switch (this.data.readByte()) {
                case 1:
                    note.trillSpeed = Duration.Sixteenth;
                    break;
                case 2:
                    note.trillSpeed = Duration.ThirtySecond;
                    break;
                case 3:
                    note.trillSpeed = Duration.SixtyFourth;
                    break;
            }
        }
    }
    Gp3To5Importer.VersionString = 'FICHIER GUITAR PRO ';
    Gp3To5Importer.BendStep = 25;
    class GpBinaryHelpers {
        static gpReadDouble(data) {
            let bytes = new Uint8Array(8);
            data.read(bytes, 0, bytes.length);
            return Platform.toDouble(bytes);
        }
        static gpReadFloat(data) {
            let bytes = new Uint8Array(4);
            bytes[3] = data.readByte();
            bytes[2] = data.readByte();
            bytes[2] = data.readByte();
            bytes[1] = data.readByte();
            return Platform.toFloat(bytes);
        }
        static gpReadColor(data, readAlpha = false) {
            let r = data.readByte();
            let g = data.readByte();
            let b = data.readByte();
            let a = 255;
            if (readAlpha) {
                a = data.readByte();
            }
            else {
                data.skip(1);
            }
            return new Color(r, g, b, a);
        }
        static gpReadBool(data) {
            return data.readByte() !== 0;
        }
        /**
         * Skips an integer (4byte) and reads a string using
         * a bytesize
         */
        static gpReadStringIntUnused(data, encoding) {
            data.skip(4);
            return GpBinaryHelpers.gpReadString(data, data.readByte(), encoding);
        }
        /**
         * Reads an integer as size, and then the string itself
         */
        static gpReadStringInt(data, encoding) {
            return GpBinaryHelpers.gpReadString(data, IOHelper.readInt32LE(data), encoding);
        }
        /**
         * Reads an integer as size, skips a byte and reads the string itself
         */
        static gpReadStringIntByte(data, encoding) {
            let length = IOHelper.readInt32LE(data) - 1;
            data.readByte();
            return GpBinaryHelpers.gpReadString(data, length, encoding);
        }
        static gpReadString(data, length, encoding) {
            let b = new Uint8Array(length);
            data.read(b, 0, b.length);
            return Platform.toString(b, encoding);
        }
        /**
         * Reads a byte as size and the string itself.
         * Additionally it is ensured the specified amount of bytes is read.
         * @param data the data to read from.
         * @param length the amount of bytes to read
         * @param encoding The encoding to use to decode the byte into a string
         * @returns
         */
        static gpReadStringByteLength(data, length, encoding) {
            let stringLength = data.readByte();
            let s = GpBinaryHelpers.gpReadString(data, stringLength, encoding);
            if (stringLength < length) {
                data.skip(length - stringLength);
            }
            return s;
        }
    }
    /**
     * A mixtablechange describes several track changes.
     */
    class MixTableChange {
        constructor() {
            this.volume = -1;
            this.balance = -1;
            this.instrument = -1;
            this.tempoName = "";
            this.tempo = -1;
            this.duration = -1;
        }
    }

    class ByteBuffer {
        constructor() {
            this._capacity = 0;
            this.length = 0;
            this.position = 0;
        }
        getBuffer() {
            return this._buffer;
        }
        static empty() {
            return ByteBuffer.withCapactiy(0);
        }
        static withCapactiy(capacity) {
            let buffer = new ByteBuffer();
            buffer._buffer = new Uint8Array(capacity);
            buffer._capacity = capacity;
            return buffer;
        }
        static fromBuffer(data) {
            let buffer = new ByteBuffer();
            buffer._buffer = data;
            buffer._capacity = buffer.length = data.length;
            return buffer;
        }
        reset() {
            this.position = 0;
        }
        skip(offset) {
            this.position += offset;
        }
        setCapacity(value) {
            if (value !== this._capacity) {
                if (value > 0) {
                    let newBuffer = new Uint8Array(value);
                    if (this.length > 0) {
                        newBuffer.set(this._buffer.subarray(0, 0 + this.length), 0);
                    }
                    this._buffer = newBuffer;
                }
                this._capacity = value;
            }
        }
        readByte() {
            let n = this.length - this.position;
            if (n <= 0) {
                return -1;
            }
            return this._buffer[this.position++];
        }
        read(buffer, offset, count) {
            let n = this.length - this.position;
            if (n > count) {
                n = count;
            }
            if (n <= 0) {
                return 0;
            }
            if (n <= 8) {
                let byteCount = n;
                while (--byteCount >= 0) {
                    buffer[offset + byteCount] = this._buffer[this.position + byteCount];
                }
            }
            else {
                buffer.set(this._buffer.subarray(this.position, this.position + n), offset);
            }
            this.position += n;
            return n;
        }
        writeByte(value) {
            let buffer = new Uint8Array(1);
            buffer[0] = value;
            this.write(buffer, 0, 1);
        }
        write(buffer, offset, count) {
            let i = this.position + count;
            if (i > this.length) {
                if (i > this._capacity) {
                    this.ensureCapacity(i);
                }
                this.length = i;
            }
            if (count <= 8 && buffer !== this._buffer) {
                let byteCount = count;
                while (--byteCount >= 0) {
                    this._buffer[this.position + byteCount] = buffer[offset + byteCount];
                }
            }
            else {
                let count1 = Math.min(count, buffer.length - offset);
                this._buffer.set(buffer.subarray(offset, offset + count1), this.position);
            }
            this.position = i;
        }
        ensureCapacity(value) {
            if (value > this._capacity) {
                let newCapacity = value;
                if (newCapacity < 256) {
                    newCapacity = 256;
                }
                if (newCapacity < this._capacity * 2) {
                    newCapacity = this._capacity * 2;
                }
                this.setCapacity(newCapacity);
            }
        }
        readAll() {
            return this.toArray();
        }
        toArray() {
            let copy = new Uint8Array(this.length);
            copy.set(this._buffer.subarray(0, 0 + this.length), 0);
            return copy;
        }
    }

    /**
     * Represents a rectangular area within the renderer music notation.
     */
    class Bounds {
        constructor() {
            /**
             * Gets or sets the X-position of the rectangle within the music notation.
             */
            this.x = 0;
            /**
             * Gets or sets the Y-position of the rectangle within the music notation.
             */
            this.y = 0;
            /**
             * Gets or sets the width of the rectangle.
             */
            this.w = 0;
            /**
             * Gets or sets the height of the rectangle.
             */
            this.h = 0;
        }
    }

    var DataType;
    (function (DataType) {
        DataType[DataType["Boolean"] = 0] = "Boolean";
        DataType[DataType["Integer"] = 1] = "Integer";
        DataType[DataType["Float"] = 2] = "Float";
        DataType[DataType["String"] = 3] = "String";
        DataType[DataType["Point"] = 4] = "Point";
        DataType[DataType["Size"] = 5] = "Size";
        DataType[DataType["Rectangle"] = 6] = "Rectangle";
        DataType[DataType["Color"] = 7] = "Color";
    })(DataType || (DataType = {}));
    /**
     * A BinaryStylesheet from Guitar Pro 6 and 7 files.
     * The BinaryStylesheet is a simple binary key-value store for additional settings
     * related to the display of the music sheet.
     *
     * File:
     *     int32 (big endian) | Number of KeyValuePairs
     *     KeyValuePair[]     | The raw records
     *
     * KeyValuePair:
     *     1 Byte  | length of the key
     *     n Bytes | key as utf8 encoded string
     *     1 Byte  | Data Type
     *     n Bytes | Value
     *
     * Values based on Data Type:
     *     0 = bool
     *         0===false
     *     1 = int32 (big endian)
     *     2 = float (big endian, IEEE)
     *     3 = string
     *       int16 (big endian) | length of string
     *       n bytes            | utf-8 encoded string
     *     4 = point
     *       int32 (big endian) | X-coordinate
     *       int32 (big endian) | Y-coordinate
     *     5 = size
     *       int32 (big endian) | Width
     *       int32 (big endian) | Height
     *     6 = rectangle
     *       int32 (big endian) | X-coordinate
     *       int32 (big endian) | Y-coordinate
     *       int32 (big endian) | Width
     *       int32 (big endian) | Height
     *     7 = color
     *       1 byte | Red
     *       1 byte | Green
     *       1 byte | Blue
     *       1 byte | Alpha
     */
    class BinaryStylesheet {
        constructor(data) {
            this.raw = new Map();
            // BinaryStylesheet apears to be big-endien
            let readable = ByteBuffer.fromBuffer(data);
            let entryCount = IOHelper.readInt32BE(readable);
            for (let i = 0; i < entryCount; i++) {
                let key = GpBinaryHelpers.gpReadString(readable, readable.readByte(), 'utf-8');
                let type = readable.readByte();
                switch (type) {
                    case DataType.Boolean:
                        let flag = readable.readByte() === 1;
                        this.addValue(key, flag);
                        break;
                    case DataType.Integer:
                        let ivalue = IOHelper.readInt32BE(readable);
                        this.addValue(key, ivalue);
                        break;
                    case DataType.Float:
                        let fvalue = GpBinaryHelpers.gpReadFloat(readable);
                        this.addValue(key, fvalue);
                        break;
                    case DataType.String:
                        let s = GpBinaryHelpers.gpReadString(readable, IOHelper.readInt16BE(readable), 'utf-8');
                        this.addValue(key, s);
                        break;
                    case DataType.Point:
                        let x = IOHelper.readInt32BE(readable);
                        let y = IOHelper.readInt32BE(readable);
                        this.addValue(key, new BendPoint(x, y));
                        break;
                    case DataType.Size:
                        let width = IOHelper.readInt32BE(readable);
                        let height = IOHelper.readInt32BE(readable);
                        this.addValue(key, new BendPoint(width, height));
                        break;
                    case DataType.Rectangle:
                        let rect = new Bounds();
                        rect.x = IOHelper.readInt32BE(readable);
                        rect.y = IOHelper.readInt32BE(readable);
                        rect.w = IOHelper.readInt32BE(readable);
                        rect.h = IOHelper.readInt32BE(readable);
                        this.addValue(key, rect);
                        break;
                    case DataType.Color:
                        let color = GpBinaryHelpers.gpReadColor(readable, true);
                        this.addValue(key, color);
                        break;
                }
            }
        }
        apply(score) {
            for (let kvp of this.raw) {
                switch (kvp[0]) {
                    case 'StandardNotation/hideDynamics':
                        score.stylesheet.hideDynamics = kvp[1];
                        break;
                }
            }
        }
        addValue(key, value) {
            this.raw.set(key, value);
        }
    }

    /**
     * Lists all types of fermatas
     */
    var FermataType;
    (function (FermataType) {
        /**
         * A short fermata (triangle symbol)
         */
        FermataType[FermataType["Short"] = 0] = "Short";
        /**
         * A medium fermata (round symbol)
         */
        FermataType[FermataType["Medium"] = 1] = "Medium";
        /**
         * A long fermata (rectangular symbol)
         */
        FermataType[FermataType["Long"] = 2] = "Long";
    })(FermataType || (FermataType = {}));
    /**
     * Represents a fermata.
     */
    class Fermata {
        constructor() {
            /**
             * Gets or sets the type of fermata.
             */
            this.type = FermataType.Short;
            /**
             * Gets or sets the actual lenght of the fermata.
             */
            this.length = 0;
        }
        static copyTo(src, dst) {
            dst.type = src.type;
            dst.length = src.length;
        }
    }

    // This XML parser is based on the XML Parser of the Haxe Standard Library (MIT)
    /*
     * Copyright (C)2005-2019 Haxe Foundation
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */
    var XmlNodeType;
    (function (XmlNodeType) {
        XmlNodeType[XmlNodeType["None"] = 0] = "None";
        XmlNodeType[XmlNodeType["Element"] = 1] = "Element";
        XmlNodeType[XmlNodeType["Attribute"] = 2] = "Attribute";
        XmlNodeType[XmlNodeType["Text"] = 3] = "Text";
        XmlNodeType[XmlNodeType["CDATA"] = 4] = "CDATA";
        XmlNodeType[XmlNodeType["EntityReference"] = 5] = "EntityReference";
        XmlNodeType[XmlNodeType["Entity"] = 6] = "Entity";
        XmlNodeType[XmlNodeType["ProcessingInstruction"] = 7] = "ProcessingInstruction";
        XmlNodeType[XmlNodeType["Comment"] = 8] = "Comment";
        XmlNodeType[XmlNodeType["Document"] = 9] = "Document";
        XmlNodeType[XmlNodeType["DocumentType"] = 10] = "DocumentType";
        XmlNodeType[XmlNodeType["DocumentFragment"] = 11] = "DocumentFragment";
        XmlNodeType[XmlNodeType["Notation"] = 12] = "Notation";
        XmlNodeType[XmlNodeType["Whitespace"] = 13] = "Whitespace";
        XmlNodeType[XmlNodeType["SignificantWhitespace"] = 14] = "SignificantWhitespace";
        XmlNodeType[XmlNodeType["EndElement"] = 15] = "EndElement";
        XmlNodeType[XmlNodeType["EndEntity"] = 16] = "EndEntity";
        XmlNodeType[XmlNodeType["XmlDeclaration"] = 17] = "XmlDeclaration";
    })(XmlNodeType || (XmlNodeType = {}));
    class XmlNode {
        constructor() {
            this.nodeType = XmlNodeType.None;
            this.localName = null;
            this.value = null;
            this.childNodes = [];
            this.attributes = new Map();
            this.firstChild = null;
            this.firstElement = null;
        }
        addChild(node) {
            this.childNodes.push(node);
            this.firstChild = node;
            if (node.nodeType === XmlNodeType.Element) {
                this.firstElement = node;
            }
        }
        getAttribute(name) {
            if (this.attributes.has(name)) {
                return this.attributes.get(name);
            }
            return '';
        }
        getElementsByTagName(name, recursive = false) {
            let tags = [];
            this.searchElementsByTagName(this.childNodes, tags, name, recursive);
            return tags;
        }
        searchElementsByTagName(all, result, name, recursive = false) {
            for (let c of all) {
                if (c && c.nodeType === XmlNodeType.Element && c.localName === name) {
                    result.push(c);
                }
                if (recursive) {
                    this.searchElementsByTagName(c.childNodes, result, name, true);
                }
            }
        }
        findChildElement(name) {
            for (let c of this.childNodes) {
                if (c && c.nodeType === XmlNodeType.Element && c.localName === name) {
                    return c;
                }
            }
            return null;
        }
        get innerText() {
            var _a, _b;
            if (this.nodeType === XmlNodeType.Element || this.nodeType === XmlNodeType.Document) {
                let txt = '';
                for (let c of this.childNodes) {
                    txt += (_a = c.innerText) === null || _a === void 0 ? void 0 : _a.toString();
                }
                let s = txt;
                return s.trim();
            }
            return (_b = this.value) !== null && _b !== void 0 ? _b : '';
        }
    }

    // This XML parser is based on the XML Parser of the Haxe Standard Library (MIT)
    /*
     * Copyright (C)2005-2019 Haxe Foundation
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */
    class XmlError extends Error {
        constructor(message, xml, pos) {
            super(message);
            this.pos = 0;
            this.xml = xml;
            this.pos = pos;
        }
    }

    // This XML parser is based on the XML Parser of the Haxe Standard Library (MIT)
    var XmlState;
    (function (XmlState) {
        XmlState[XmlState["IgnoreSpaces"] = 0] = "IgnoreSpaces";
        XmlState[XmlState["Begin"] = 1] = "Begin";
        XmlState[XmlState["BeginNode"] = 2] = "BeginNode";
        XmlState[XmlState["TagName"] = 3] = "TagName";
        XmlState[XmlState["Body"] = 4] = "Body";
        XmlState[XmlState["AttribName"] = 5] = "AttribName";
        XmlState[XmlState["Equals"] = 6] = "Equals";
        XmlState[XmlState["AttvalBegin"] = 7] = "AttvalBegin";
        XmlState[XmlState["AttribVal"] = 8] = "AttribVal";
        XmlState[XmlState["Childs"] = 9] = "Childs";
        XmlState[XmlState["Close"] = 10] = "Close";
        XmlState[XmlState["WaitEnd"] = 11] = "WaitEnd";
        XmlState[XmlState["WaitEndRet"] = 12] = "WaitEndRet";
        XmlState[XmlState["Pcdata"] = 13] = "Pcdata";
        XmlState[XmlState["Header"] = 14] = "Header";
        XmlState[XmlState["Comment"] = 15] = "Comment";
        XmlState[XmlState["Doctype"] = 16] = "Doctype";
        XmlState[XmlState["Cdata"] = 17] = "Cdata";
        XmlState[XmlState["Escape"] = 18] = "Escape";
    })(XmlState || (XmlState = {}));
    class XmlParser {
        static parse(str, p, parent) {
            var _a;
            let c = str.charCodeAt(p);
            let state = XmlState.Begin;
            let next = XmlState.Begin;
            let start = 0;
            let buf = '';
            let escapeNext = XmlState.Begin;
            let xml = null;
            let aname = null;
            let nbrackets = 0;
            let attrValQuote = 0;
            while (p < str.length) {
                c = str.charCodeAt(p);
                switch (state) {
                    case XmlState.IgnoreSpaces:
                        switch (c) {
                            case XmlParser.CharCodeLF:
                            case XmlParser.CharCodeCR:
                            case XmlParser.CharCodeTab:
                            case XmlParser.CharCodeSpace:
                                break;
                            default:
                                state = next;
                                continue;
                        }
                        break;
                    case XmlState.Begin:
                        switch (c) {
                            case XmlParser.CharCodeLowerThan:
                                state = XmlState.IgnoreSpaces;
                                next = XmlState.BeginNode;
                                break;
                            default:
                                start = p;
                                state = XmlState.Pcdata;
                                continue;
                        }
                        break;
                    case XmlState.Pcdata:
                        if (c === XmlParser.CharCodeLowerThan) {
                            buf += str.substr(start, p - start);
                            let child = new XmlNode();
                            child.nodeType = XmlNodeType.Text;
                            child.value = buf;
                            buf = '';
                            parent.addChild(child);
                            state = XmlState.IgnoreSpaces;
                            next = XmlState.BeginNode;
                        }
                        else if (c === XmlParser.CharCodeAmp) {
                            buf += str.substr(start, p - start);
                            state = XmlState.Escape;
                            escapeNext = XmlState.Pcdata;
                            start = p + 1;
                        }
                        break;
                    case XmlState.Cdata:
                        if (c === XmlParser.CharCodeBrackedClose &&
                            str.charCodeAt(p + 1) === XmlParser.CharCodeBrackedClose &&
                            str.charCodeAt(p + 2) === XmlParser.CharCodeGreaterThan) {
                            // ]]>
                            let child = new XmlNode();
                            child.nodeType = XmlNodeType.CDATA;
                            child.value = str.substr(start, p - start);
                            parent.addChild(child);
                            p += 2;
                            state = XmlState.Begin;
                        }
                        break;
                    case XmlState.BeginNode:
                        switch (c) {
                            case XmlParser.CharCodeExclamation:
                                if (str.charCodeAt(p + 1) === XmlParser.CharCodeBrackedOpen) {
                                    p += 2;
                                    if (str.substr(p, 6).toUpperCase() !== 'CDATA[') {
                                        throw new XmlError('Expected <![CDATA[', str, p);
                                    }
                                    p += 5;
                                    state = XmlState.Cdata;
                                    start = p + 1;
                                }
                                else if (str.charCodeAt(p + 1) === XmlParser.CharCodeUpperD ||
                                    str.charCodeAt(p + 1) === XmlParser.CharCodeLowerD) {
                                    if (str.substr(p + 2, 6).toUpperCase() !== 'OCTYPE') {
                                        throw new XmlError('Expected <!DOCTYPE', str, p);
                                    }
                                    p += 8;
                                    state = XmlState.Doctype;
                                    start = p + 1;
                                }
                                else if (str.charCodeAt(p + 1) !== XmlParser.CharCodeMinus ||
                                    str.charCodeAt(p + 2) !== XmlParser.CharCodeMinus) {
                                    throw new XmlError('Expected <!--', str, p);
                                }
                                else {
                                    p += 2;
                                    state = XmlState.Comment;
                                    start = p + 1;
                                }
                                break;
                            case XmlParser.CharCodeQuestion:
                                state = XmlState.Header;
                                start = p;
                                break;
                            case XmlParser.CharCodeSlash:
                                if (!parent) {
                                    throw new XmlError('Expected node name', str, p);
                                }
                                start = p + 1;
                                state = XmlState.IgnoreSpaces;
                                next = XmlState.Close;
                                break;
                            default:
                                state = XmlState.TagName;
                                start = p;
                                continue;
                        }
                        break;
                    case XmlState.TagName:
                        if (!XmlParser.isValidChar(c)) {
                            if (p === start) {
                                throw new XmlError('Expected node name', str, p);
                            }
                            xml = new XmlNode();
                            xml.nodeType = XmlNodeType.Element;
                            xml.localName = str.substr(start, p - start);
                            parent.addChild(xml);
                            state = XmlState.IgnoreSpaces;
                            next = XmlState.Body;
                            continue;
                        }
                        break;
                    case XmlState.Body:
                        switch (c) {
                            case XmlParser.CharCodeSlash:
                                state = XmlState.WaitEnd;
                                break;
                            case XmlParser.CharCodeGreaterThan:
                                state = XmlState.Childs;
                                break;
                            default:
                                state = XmlState.AttribName;
                                start = p;
                                continue;
                        }
                        break;
                    case XmlState.AttribName:
                        if (!XmlParser.isValidChar(c)) {
                            if (start === p) {
                                throw new XmlError('Expected attribute name', str, p);
                            }
                            let tmp = str.substr(start, p - start);
                            aname = tmp;
                            if (xml.attributes.has(aname)) {
                                throw new XmlError(`Duplicate attribute [${aname}]`, str, p);
                            }
                            state = XmlState.IgnoreSpaces;
                            next = XmlState.Equals;
                            continue;
                        }
                        break;
                    case XmlState.Equals:
                        switch (c) {
                            case XmlParser.CharCodeEquals:
                                state = XmlState.IgnoreSpaces;
                                next = XmlState.AttvalBegin;
                                break;
                            default:
                                throw new XmlError('Expected =', str, p);
                        }
                        break;
                    case XmlState.AttvalBegin:
                        switch (c) {
                            case XmlParser.CharCodeDoubleQuote:
                            case XmlParser.CharCodeSingleQuote:
                                buf = '';
                                state = XmlState.AttribVal;
                                start = p + 1;
                                attrValQuote = c;
                                break;
                        }
                        break;
                    case XmlState.AttribVal:
                        switch (c) {
                            case XmlParser.CharCodeAmp:
                                buf += str.substr(start, p - start);
                                state = XmlState.Escape;
                                escapeNext = XmlState.AttribVal;
                                start = p + 1;
                                break;
                            default:
                                if (c === attrValQuote) {
                                    buf += str.substr(start, p - start);
                                    let val = buf;
                                    buf = '';
                                    xml.attributes.set(aname, val);
                                    state = XmlState.IgnoreSpaces;
                                    next = XmlState.Body;
                                }
                                break;
                        }
                        break;
                    case XmlState.Childs:
                        p = XmlParser.parse(str, p, xml);
                        start = p;
                        state = XmlState.Begin;
                        break;
                    case XmlState.WaitEnd:
                        switch (c) {
                            case XmlParser.CharCodeGreaterThan:
                                state = XmlState.Begin;
                                break;
                            default:
                                throw new XmlError('Expected >', str, p);
                        }
                        break;
                    case XmlState.WaitEndRet:
                        switch (c) {
                            case XmlParser.CharCodeGreaterThan:
                                return p;
                            default:
                                throw new XmlError('Expected >', str, p);
                        }
                    case XmlState.Close:
                        if (!XmlParser.isValidChar(c)) {
                            if (start === p) {
                                throw new XmlError('Expected node name', str, p);
                            }
                            let v = str.substr(start, p - start);
                            if (v !== parent.localName) {
                                throw new XmlError('Expected </' + parent.localName + '>', str, p);
                            }
                            state = XmlState.IgnoreSpaces;
                            next = XmlState.WaitEndRet;
                            continue;
                        }
                        break;
                    case XmlState.Comment:
                        if (c === XmlParser.CharCodeMinus &&
                            str.charCodeAt(p + 1) === XmlParser.CharCodeMinus &&
                            str.charCodeAt(p + 2) === XmlParser.CharCodeGreaterThan) {
                            p += 2;
                            state = XmlState.Begin;
                        }
                        break;
                    case XmlState.Doctype:
                        if (c === XmlParser.CharCodeBrackedOpen) {
                            nbrackets++;
                        }
                        else if (c === XmlParser.CharCodeBrackedClose) {
                            nbrackets--;
                        }
                        else if (c === XmlParser.CharCodeGreaterThan && nbrackets === 0) {
                            // >
                            let node = new XmlNode();
                            node.nodeType = XmlNodeType.DocumentType;
                            node.value = str.substr(start, p - start);
                            parent.addChild(node);
                            state = XmlState.Begin;
                        }
                        break;
                    case XmlState.Header:
                        if (c === XmlParser.CharCodeQuestion && str.charCodeAt(p + 1) === XmlParser.CharCodeGreaterThan) {
                            p++;
                            state = XmlState.Begin;
                        }
                        break;
                    case XmlState.Escape:
                        if (c === XmlParser.CharCodeSemi) {
                            let s = str.substr(start, p - start);
                            if (s.charCodeAt(0) === XmlParser.CharCodeSharp) {
                                let code = s.charCodeAt(1) === XmlParser.CharCodeLowerX
                                    ? parseInt('0' + s.substr(1, s.length - 1))
                                    : parseInt(s.substr(1, s.length - 1));
                                buf += String.fromCharCode(code);
                            }
                            else if (XmlParser.Escapes.has(s)) {
                                buf += XmlParser.Escapes.get(s);
                            }
                            else {
                                buf += (_a = ('&' + s + ';')) === null || _a === void 0 ? void 0 : _a.toString();
                            }
                            start = p + 1;
                            state = escapeNext;
                        }
                        else if (!XmlParser.isValidChar(c) && c !== XmlParser.CharCodeSharp) {
                            buf += '&';
                            buf += str.substr(start, p - start);
                            p--;
                            start = p + 1;
                            state = escapeNext;
                        }
                        break;
                }
                p++;
            }
            if (state === XmlState.Begin) {
                start = p;
                state = XmlState.Pcdata;
            }
            if (state === XmlState.Pcdata) {
                if (p !== start) {
                    buf += str.substr(start, p - start);
                    let node = new XmlNode();
                    node.nodeType = XmlNodeType.Text;
                    node.value = buf;
                    parent.addChild(node);
                }
                return p;
            }
            if (state === XmlState.Escape && escapeNext === XmlState.Pcdata) {
                buf += '&';
                buf += str.substr(start, p - start);
                let node = new XmlNode();
                node.nodeType = XmlNodeType.Text;
                node.value = buf;
                parent.addChild(node);
                return p;
            }
            throw new XmlError('Unexpected end', str, p);
        }
        static isValidChar(c) {
            return ((c >= XmlParser.CharCodeLowerA && c <= XmlParser.CharCodeLowerZ) ||
                (c >= XmlParser.CharCodeUpperA && c <= XmlParser.CharCodeUpperZ) ||
                (c >= XmlParser.CharCode0 && c <= XmlParser.CharCode9) ||
                c === XmlParser.CharCodeColon ||
                c === XmlParser.CharCodeDot ||
                c === XmlParser.CharCodeUnderscore ||
                c === XmlParser.CharCodeMinus);
        }
    }
    XmlParser.CharCodeLF = 10;
    XmlParser.CharCodeTab = 9;
    XmlParser.CharCodeCR = 13;
    XmlParser.CharCodeSpace = 32;
    XmlParser.CharCodeLowerThan = 60;
    XmlParser.CharCodeAmp = 38;
    XmlParser.CharCodeBrackedClose = 93;
    XmlParser.CharCodeBrackedOpen = 91;
    XmlParser.CharCodeGreaterThan = 62;
    XmlParser.CharCodeExclamation = 33;
    XmlParser.CharCodeUpperD = 68;
    XmlParser.CharCodeLowerD = 100;
    XmlParser.CharCodeMinus = 45;
    XmlParser.CharCodeQuestion = 63;
    XmlParser.CharCodeSlash = 47;
    XmlParser.CharCodeEquals = 61;
    XmlParser.CharCodeDoubleQuote = 34;
    XmlParser.CharCodeSingleQuote = 39;
    XmlParser.CharCodeSharp = 35;
    XmlParser.CharCodeLowerX = 120;
    XmlParser.CharCodeLowerA = 97;
    XmlParser.CharCodeLowerZ = 122;
    XmlParser.CharCodeUpperA = 65;
    XmlParser.CharCodeUpperZ = 90;
    XmlParser.CharCode0 = 48;
    XmlParser.CharCode9 = 57;
    XmlParser.CharCodeColon = 58;
    XmlParser.CharCodeDot = 46;
    XmlParser.CharCodeUnderscore = 95;
    XmlParser.CharCodeSemi = 59;
    XmlParser.Escapes = new Map([
        ['lt', '<'],
        ['gt', '>'],
        ['amp', '&'],
        ['quot', '"'],
        ['apos', "'"]
    ]);

    // This XML parser is based on the XML Parser of the Haxe Standard Library (MIT)
    class XmlDocument extends XmlNode {
        constructor(xml) {
            super();
            this.documentElement = null;
            this.nodeType = XmlNodeType.Document;
            XmlParser.parse(xml, 0, this);
            for (let child of this.childNodes) {
                if (child.nodeType === XmlNodeType.Element) {
                    this.documentElement = child;
                    break;
                }
            }
        }
    }

    /**
     * This structure represents a duration within a gpif
     */
    class GpifRhythm {
        constructor() {
            this.dots = 0;
            this.tupletDenominator = -1;
            this.tupletNumerator = -1;
            this.value = Duration.Quarter;
        }
    }
    /**
     * This public class can parse a score.gpif xml file into the model structure
     */
    class GpifParser {
        constructor() {
            this._hasAnacrusis = false;
        }
        parseXml(xml, settings) {
            this._masterTrackAutomations = new Map();
            this._tracksMapping = [];
            this._tracksById = new Map();
            this._masterBars = [];
            this._barsOfMasterBar = [];
            this._voicesOfBar = new Map();
            this._barsById = new Map();
            this._voiceById = new Map();
            this._beatsOfVoice = new Map();
            this._beatById = new Map();
            this._rhythmOfBeat = new Map();
            this._rhythmById = new Map();
            this._notesOfBeat = new Map();
            this._noteById = new Map();
            this._tappedNotes = new Map();
            this._lyricsByTrack = new Map();
            let dom;
            try {
                dom = new XmlDocument(xml);
            }
            catch (e) {
                throw new UnsupportedFormatError('Could not parse XML', e);
            }
            this.parseDom(dom);
            this.buildModel();
            this.score.finish(settings);
            if (this._lyricsByTrack.size > 0) {
                for (let kvp of this._lyricsByTrack) {
                    let track = this._tracksById.get(kvp[0]);
                    track.applyLyrics(kvp[1]);
                }
            }
        }
        parseDom(dom) {
            let root = dom.documentElement;
            if (!root) {
                return;
            }
            // the XML uses IDs for referring elements within the
            //  Therefore we do the parsing in 2 steps:
            // - at first we read all model elements and store them by ID in a lookup table
            // - after that we need to join up the information.
            if (root.localName === 'GPIF') {
                this.score = new Score();
                // parse all children
                for (let n of root.childNodes) {
                    if (n.nodeType === XmlNodeType.Element) {
                        switch (n.localName) {
                            case 'Score':
                                this.parseScoreNode(n);
                                break;
                            case 'MasterTrack':
                                this.parseMasterTrackNode(n);
                                break;
                            case 'Tracks':
                                this.parseTracksNode(n);
                                break;
                            case 'MasterBars':
                                this.parseMasterBarsNode(n);
                                break;
                            case 'Bars':
                                this.parseBars(n);
                                break;
                            case 'Voices':
                                this.parseVoices(n);
                                break;
                            case 'Beats':
                                this.parseBeats(n);
                                break;
                            case 'Notes':
                                this.parseNotes(n);
                                break;
                            case 'Rhythms':
                                this.parseRhythms(n);
                                break;
                        }
                    }
                }
            }
            else {
                throw new UnsupportedFormatError('Root node of XML was not GPIF');
            }
        }
        //
        // <Score>...</Score>
        //
        parseScoreNode(element) {
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Title':
                            this.score.title = c.firstChild.innerText;
                            break;
                        case 'SubTitle':
                            this.score.subTitle = c.firstChild.innerText;
                            break;
                        case 'Artist':
                            this.score.artist = c.firstChild.innerText;
                            break;
                        case 'Album':
                            this.score.album = c.firstChild.innerText;
                            break;
                        case 'Words':
                            this.score.words = c.firstChild.innerText;
                            break;
                        case 'Music':
                            this.score.music = c.firstChild.innerText;
                            break;
                        case 'WordsAndMusic':
                            if (c.firstChild && c.firstChild.innerText !== '') {
                                let wordsAndMusic = c.firstChild.innerText;
                                if (wordsAndMusic && !this.score.words) {
                                    this.score.words = wordsAndMusic;
                                }
                                if (wordsAndMusic && !this.score.music) {
                                    this.score.music = wordsAndMusic;
                                }
                            }
                            break;
                        case 'Copyright':
                            this.score.copyright = c.firstChild.innerText;
                            break;
                        case 'Tabber':
                            this.score.tab = c.firstChild.innerText;
                            break;
                        case 'Instructions':
                            this.score.instructions = c.firstChild.innerText;
                            break;
                        case 'Notices':
                            this.score.notices = c.firstChild.innerText;
                            break;
                    }
                }
            }
        }
        //
        // <MasterTrack>...</MasterTrack>
        //
        parseMasterTrackNode(node) {
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Automations':
                            this.parseAutomations(c, this._masterTrackAutomations);
                            break;
                        case 'Tracks':
                            this._tracksMapping = c.innerText.split(' ');
                            break;
                        case 'Anacrusis':
                            this._hasAnacrusis = true;
                            break;
                    }
                }
            }
        }
        parseAutomations(node, automations) {
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Automation':
                            this.parseAutomation(c, automations);
                            break;
                    }
                }
            }
        }
        parseAutomation(node, automations) {
            let type = null;
            let isLinear = false;
            let barId = null;
            let ratioPosition = 0;
            let value = 0;
            let reference = 0;
            let text = null;
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Type':
                            type = c.innerText;
                            break;
                        case 'Linear':
                            isLinear = c.innerText.toLowerCase() === 'true';
                            break;
                        case 'Bar':
                            barId = c.innerText;
                            break;
                        case 'Position':
                            ratioPosition = parseFloat(c.innerText);
                            break;
                        case 'Value':
                            let parts = c.innerText.split(' ');
                            value = parseFloat(parts[0]);
                            reference = parseInt(parts[1]);
                            break;
                        case 'Text':
                            text = c.innerText;
                            break;
                    }
                }
            }
            if (!type) {
                return;
            }
            let automation = null;
            switch (type) {
                case 'Tempo':
                    automation = Automation.buildTempoAutomation(isLinear, ratioPosition, value, reference);
                    break;
            }
            if (automation) {
                if (text) {
                    automation.text = text;
                }
                if (barId) {
                    if (!automations.has(barId)) {
                        automations.set(barId, []);
                    }
                    automations.get(barId).push(automation);
                }
            }
        }
        //
        // <Tracks>...</Tracks>
        //
        parseTracksNode(node) {
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Track':
                            this.parseTrack(c);
                            break;
                    }
                }
            }
        }
        parseTrack(node) {
            let track = new Track();
            track.ensureStaveCount(1);
            let staff = track.staves[0];
            staff.showStandardNotation = true;
            let trackId = node.getAttribute('id');
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Name':
                            track.name = c.innerText;
                            break;
                        case 'Color':
                            let parts = c.innerText.split(' ');
                            if (parts.length >= 3) {
                                let r = parseInt(parts[0]);
                                let g = parseInt(parts[1]);
                                let b = parseInt(parts[2]);
                                track.color = new Color(r, g, b, 0xff);
                            }
                            break;
                        case 'Instrument':
                            let instrumentName = c.getAttribute('ref');
                            if (instrumentName.endsWith('-gs') || instrumentName.endsWith('GrandStaff')) {
                                track.ensureStaveCount(2);
                                track.staves[1].showStandardNotation = true;
                            }
                            break;
                        case 'InstrumentSet':
                            this.parseInstrumentSet(track, c);
                            break;
                        case 'ShortName':
                            track.shortName = c.innerText;
                            break;
                        case 'Lyrics':
                            this.parseLyrics(trackId, c);
                            break;
                        case 'Properties':
                            this.parseTrackProperties(track, c);
                            break;
                        case 'GeneralMidi':
                        case 'MidiConnection':
                        case 'MIDISettings':
                            this.parseGeneralMidi(track, c);
                            break;
                        case 'Sounds':
                            this.parseSounds(track, c);
                            break;
                        case 'PlaybackState':
                            let state = c.innerText;
                            track.playbackInfo.isSolo = state === 'Solo';
                            track.playbackInfo.isMute = state === 'Mute';
                            break;
                        case 'PartSounding':
                            this.parsePartSounding(track, c);
                            break;
                        case 'Staves':
                            this.parseStaves(track, c);
                            break;
                        case 'Transpose':
                            this.parseTranspose(track, c);
                            break;
                    }
                }
            }
            this._tracksById.set(trackId, track);
        }
        parseInstrumentSet(track, node) {
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Type':
                            switch (c.innerText) {
                                case 'drumKit':
                                    for (let staff of track.staves) {
                                        staff.isPercussion = true;
                                    }
                                    break;
                            }
                            if (c.innerText === 'drumKit') {
                                for (let staff of track.staves) {
                                    staff.isPercussion = true;
                                }
                            }
                            break;
                    }
                }
            }
        }
        parseStaves(track, node) {
            let staffIndex = 0;
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Staff':
                            track.ensureStaveCount(staffIndex + 1);
                            let staff = track.staves[staffIndex];
                            this.parseStaff(staff, c);
                            staffIndex++;
                            break;
                    }
                }
            }
        }
        parseStaff(staff, node) {
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Properties':
                            this.parseStaffProperties(staff, c);
                            break;
                    }
                }
            }
        }
        parseStaffProperties(staff, node) {
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Property':
                            this.parseStaffProperty(staff, c);
                            break;
                    }
                }
            }
        }
        parseStaffProperty(staff, node) {
            let propertyName = node.getAttribute('name');
            switch (propertyName) {
                case 'Tuning':
                    let tuningParts = node.findChildElement('Pitches').innerText.split(' ');
                    let tuning = new Array(tuningParts.length);
                    for (let i = 0; i < tuning.length; i++) {
                        tuning[tuning.length - 1 - i] = parseInt(tuningParts[i]);
                    }
                    staff.tuning = tuning;
                    if (!staff.isPercussion) {
                        staff.showTablature = true;
                    }
                    break;
                case 'DiagramCollection':
                case 'ChordCollection':
                    this.parseDiagramCollection_Staff_XmlNode(staff, node);
                    break;
                case 'CapoFret':
                    let capo = parseInt(node.findChildElement('Fret').innerText);
                    staff.capo = capo;
                    break;
            }
        }
        parseLyrics(trackId, node) {
            let tracks = [];
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Line':
                            tracks.push(this.parseLyricsLine(c));
                            break;
                    }
                }
            }
            this._lyricsByTrack.set(trackId, tracks);
        }
        parseLyricsLine(node) {
            let lyrics = new Lyrics();
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Offset':
                            lyrics.startBar = parseInt(c.innerText);
                            break;
                        case 'Text':
                            lyrics.text = c.innerText;
                            break;
                    }
                }
            }
            return lyrics;
        }
        parseDiagramCollection_Track_XmlNode(track, node) {
            let items = node.findChildElement('Items');
            for (let c of items.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Item':
                            this.parseDiagramItem_Track_XmlNode(track, c);
                            break;
                    }
                }
            }
        }
        parseDiagramCollection_Staff_XmlNode(staff, node) {
            let items = node.findChildElement('Items');
            for (let c of items.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Item':
                            this.parseDiagramItem_Staff_XmlNode(staff, c);
                            break;
                    }
                }
            }
        }
        parseDiagramItem_Track_XmlNode(track, node) {
            let chord = new Chord();
            let chordId = node.getAttribute('id');
            for (let staff of track.staves) {
                staff.addChord(chordId, chord);
            }
            this.parseDiagramItem_Chord_XmlNode(chord, node);
        }
        parseDiagramItem_Staff_XmlNode(staff, node) {
            let chord = new Chord();
            let chordId = node.getAttribute('id');
            staff.addChord(chordId, chord);
            this.parseDiagramItem_Chord_XmlNode(chord, node);
        }
        parseDiagramItem_Chord_XmlNode(chord, node) {
            chord.name = node.getAttribute('name');
            let diagram = node.findChildElement('Diagram');
            let stringCount = parseInt(diagram.getAttribute('stringCount'));
            let baseFret = parseInt(diagram.getAttribute('baseFret'));
            chord.firstFret = baseFret + 1;
            for (let i = 0; i < stringCount; i++) {
                chord.strings.push(-1);
            }
            for (let c of diagram.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Fret':
                            let guitarString = parseInt(c.getAttribute('string'));
                            chord.strings[stringCount - guitarString - 1] = baseFret + parseInt(c.getAttribute('fret'));
                            break;
                        case 'Fingering':
                            let existingFingers = new Map();
                            for (let p of c.childNodes) {
                                if (p.nodeType === XmlNodeType.Element) {
                                    switch (p.localName) {
                                        case 'Position':
                                            let finger = Fingers.Unknown;
                                            let fret = baseFret + parseInt(p.getAttribute('fret'));
                                            switch (p.getAttribute('finger')) {
                                                case 'Index':
                                                    finger = Fingers.IndexFinger;
                                                    break;
                                                case 'Middle':
                                                    finger = Fingers.MiddleFinger;
                                                    break;
                                                case 'Rank':
                                                    finger = Fingers.AnnularFinger;
                                                    break;
                                                case 'Pinky':
                                                    finger = Fingers.LittleFinger;
                                                    break;
                                                case 'Thumb':
                                                    finger = Fingers.Thumb;
                                                    break;
                                            }
                                            if (finger !== Fingers.Unknown) {
                                                if (existingFingers.has(finger)) {
                                                    chord.barreFrets.push(fret);
                                                }
                                                else {
                                                    existingFingers.set(finger, true);
                                                }
                                            }
                                            break;
                                    }
                                }
                            }
                            break;
                        case 'Property':
                            switch (c.getAttribute('name')) {
                                case 'ShowName':
                                    chord.showName = c.getAttribute('value') === 'true';
                                    break;
                                case 'ShowDiagram':
                                    chord.showDiagram = c.getAttribute('value') === 'true';
                                    break;
                                case 'ShowFingering':
                                    chord.showFingering = c.getAttribute('value') === 'true';
                                    break;
                            }
                            break;
                    }
                }
            }
        }
        parseTrackProperties(track, node) {
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Property':
                            this.parseTrackProperty(track, c);
                            break;
                    }
                }
            }
        }
        parseTrackProperty(track, node) {
            let propertyName = node.getAttribute('name');
            switch (propertyName) {
                case 'Tuning':
                    let tuningParts = node.findChildElement('Pitches').innerText.split(' ');
                    let tuning = new Array(tuningParts.length);
                    for (let i = 0; i < tuning.length; i++) {
                        tuning[tuning.length - 1 - i] = parseInt(tuningParts[i]);
                    }
                    for (let staff of track.staves) {
                        staff.tuning = tuning;
                        staff.showStandardNotation = true;
                        staff.showTablature = true;
                    }
                    break;
                case 'DiagramCollection':
                case 'ChordCollection':
                    this.parseDiagramCollection_Track_XmlNode(track, node);
                    break;
                case 'CapoFret':
                    let capo = parseInt(node.findChildElement('Fret').innerText);
                    for (let staff of track.staves) {
                        staff.capo = capo;
                    }
                    break;
            }
        }
        parseGeneralMidi(track, node) {
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Program':
                            track.playbackInfo.program = parseInt(c.innerText);
                            break;
                        case 'Port':
                            track.playbackInfo.port = parseInt(c.innerText);
                            break;
                        case 'PrimaryChannel':
                            track.playbackInfo.primaryChannel = parseInt(c.innerText);
                            break;
                        case 'SecondaryChannel':
                            track.playbackInfo.secondaryChannel = parseInt(c.innerText);
                            break;
                    }
                }
            }
            let isPercussion = node.getAttribute('table') === 'Percussion';
            if (isPercussion) {
                for (let staff of track.staves) {
                    staff.isPercussion = true;
                }
            }
        }
        parseSounds(track, node) {
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Sound':
                            this.parseSound(track, c);
                            break;
                    }
                }
            }
        }
        parseSound(track, node) {
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'MIDI':
                            this.parseSoundMidi(track, c);
                            break;
                    }
                }
            }
        }
        parseSoundMidi(track, node) {
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Program':
                            track.playbackInfo.program = parseInt(c.innerText);
                            break;
                    }
                }
            }
        }
        parsePartSounding(track, node) {
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'TranspositionPitch':
                            for (let staff of track.staves) {
                                staff.displayTranspositionPitch = parseInt(c.innerText);
                            }
                            break;
                    }
                }
            }
        }
        parseTranspose(track, node) {
            let octave = 0;
            let chromatic = 0;
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Chromatic':
                            chromatic = parseInt(c.innerText);
                            break;
                        case 'Octave':
                            octave = parseInt(c.innerText);
                            break;
                    }
                }
            }
            for (let staff of track.staves) {
                staff.displayTranspositionPitch = octave * 12 + chromatic;
            }
        }
        //
        // <MasterBars>...</MasterBars>
        //
        parseMasterBarsNode(node) {
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'MasterBar':
                            this.parseMasterBar(c);
                            break;
                    }
                }
            }
        }
        parseMasterBar(node) {
            let masterBar = new MasterBar();
            if (this._masterBars.length === 0 && this._hasAnacrusis) {
                masterBar.isAnacrusis = true;
            }
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Time':
                            let timeParts = c.innerText.split('/');
                            masterBar.timeSignatureNumerator = parseInt(timeParts[0]);
                            masterBar.timeSignatureDenominator = parseInt(timeParts[1]);
                            break;
                        case 'DoubleBar':
                            masterBar.isDoubleBar = true;
                            break;
                        case 'Section':
                            masterBar.section = new Section();
                            masterBar.section.marker = c.findChildElement('Letter').innerText;
                            masterBar.section.text = c.findChildElement('Text').innerText;
                            break;
                        case 'Repeat':
                            if (c.getAttribute('start').toLowerCase() === 'true') {
                                masterBar.isRepeatStart = true;
                            }
                            if (c.getAttribute('end').toLowerCase() === 'true' && c.getAttribute('count')) {
                                masterBar.repeatCount = parseInt(c.getAttribute('count'));
                            }
                            break;
                        case 'AlternateEndings':
                            let alternateEndings = c.innerText.split(' ');
                            let i = 0;
                            for (let k = 0; k < alternateEndings.length; k++) {
                                i = i | (1 << (-1 + parseInt(alternateEndings[k])));
                            }
                            masterBar.alternateEndings = i;
                            break;
                        case 'Bars':
                            this._barsOfMasterBar.push(c.innerText.split(' '));
                            break;
                        case 'TripletFeel':
                            switch (c.innerText) {
                                case 'NoTripletFeel':
                                    masterBar.tripletFeel = TripletFeel.NoTripletFeel;
                                    break;
                                case 'Triplet8th':
                                    masterBar.tripletFeel = TripletFeel.Triplet8th;
                                    break;
                                case 'Triplet16th':
                                    masterBar.tripletFeel = TripletFeel.Triplet16th;
                                    break;
                                case 'Dotted8th':
                                    masterBar.tripletFeel = TripletFeel.Dotted8th;
                                    break;
                                case 'Dotted16th':
                                    masterBar.tripletFeel = TripletFeel.Dotted16th;
                                    break;
                                case 'Scottish8th':
                                    masterBar.tripletFeel = TripletFeel.Scottish8th;
                                    break;
                                case 'Scottish16th':
                                    masterBar.tripletFeel = TripletFeel.Scottish16th;
                                    break;
                            }
                            break;
                        case 'Key':
                            masterBar.keySignature = parseInt(c.findChildElement('AccidentalCount').innerText);
                            let mode = c.findChildElement('Mode');
                            if (mode) {
                                switch (mode.innerText.toLowerCase()) {
                                    case 'major':
                                        masterBar.keySignatureType = KeySignatureType.Major;
                                        break;
                                    case 'minor':
                                        masterBar.keySignatureType = KeySignatureType.Minor;
                                        break;
                                }
                            }
                            break;
                        case 'Fermatas':
                            this.parseFermatas(masterBar, c);
                            break;
                    }
                }
            }
            this._masterBars.push(masterBar);
        }
        parseFermatas(masterBar, node) {
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Fermata':
                            this.parseFermata(masterBar, c);
                            break;
                    }
                }
            }
        }
        parseFermata(masterBar, node) {
            let offset = 0;
            let fermata = new Fermata();
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Type':
                            switch (c.innerText) {
                                case 'Short':
                                    fermata.type = FermataType.Short;
                                    break;
                                case 'Medium':
                                    fermata.type = FermataType.Medium;
                                    break;
                                case 'Long':
                                    fermata.type = FermataType.Long;
                                    break;
                            }
                            break;
                        case 'Length':
                            fermata.length = parseFloat(c.innerText);
                            break;
                        case 'Offset':
                            let parts = c.innerText.split('/');
                            if (parts.length === 2) {
                                let numerator = parseInt(parts[0]);
                                let denominator = parseInt(parts[1]);
                                offset = ((numerator / denominator) * MidiUtils.QuarterTime) | 0;
                            }
                            break;
                    }
                }
            }
            masterBar.addFermata(offset, fermata);
        }
        //
        // <Bars>...</Bars>
        //
        parseBars(node) {
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Bar':
                            this.parseBar(c);
                            break;
                    }
                }
            }
        }
        parseBar(node) {
            let bar = new Bar();
            let barId = node.getAttribute('id');
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Voices':
                            this._voicesOfBar.set(barId, c.innerText.split(' '));
                            break;
                        case 'Clef':
                            switch (c.innerText) {
                                case 'Neutral':
                                    bar.clef = Clef.Neutral;
                                    break;
                                case 'G2':
                                    bar.clef = Clef.G2;
                                    break;
                                case 'F4':
                                    bar.clef = Clef.F4;
                                    break;
                                case 'C4':
                                    bar.clef = Clef.C4;
                                    break;
                                case 'C3':
                                    bar.clef = Clef.C3;
                                    break;
                            }
                            break;
                        case 'Ottavia':
                            switch (c.innerText) {
                                case '8va':
                                    bar.clefOttava = Ottavia._8va;
                                    break;
                                case '15ma':
                                    bar.clefOttava = Ottavia._15ma;
                                    break;
                                case '8vb':
                                    bar.clefOttava = Ottavia._8vb;
                                    break;
                                case '15mb':
                                    bar.clefOttava = Ottavia._15mb;
                                    break;
                            }
                            break;
                        case 'SimileMark':
                            switch (c.innerText) {
                                case 'Simple':
                                    bar.simileMark = SimileMark.Simple;
                                    break;
                                case 'FirstOfDouble':
                                    bar.simileMark = SimileMark.FirstOfDouble;
                                    break;
                                case 'SecondOfDouble':
                                    bar.simileMark = SimileMark.SecondOfDouble;
                                    break;
                            }
                            break;
                    }
                }
            }
            this._barsById.set(barId, bar);
        }
        //
        // <Voices>...</Voices>
        //
        parseVoices(node) {
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Voice':
                            this.parseVoice(c);
                            break;
                    }
                }
            }
        }
        parseVoice(node) {
            let voice = new Voice();
            let voiceId = node.getAttribute('id');
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Beats':
                            this._beatsOfVoice.set(voiceId, c.innerText.split(' '));
                            break;
                    }
                }
            }
            this._voiceById.set(voiceId, voice);
        }
        //
        // <Beats>...</Beats>
        //
        parseBeats(node) {
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Beat':
                            this.parseBeat(c);
                            break;
                    }
                }
            }
        }
        parseBeat(node) {
            let beat = new Beat();
            let beatId = node.getAttribute('id');
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Notes':
                            this._notesOfBeat.set(beatId, c.innerText.split(' '));
                            break;
                        case 'Rhythm':
                            this._rhythmOfBeat.set(beatId, c.getAttribute('ref'));
                            break;
                        case 'Fadding':
                            if (c.innerText === 'FadeIn') {
                                beat.fadeIn = true;
                            }
                            break;
                        case 'Tremolo':
                            switch (c.innerText) {
                                case '1/2':
                                    beat.tremoloSpeed = Duration.Eighth;
                                    break;
                                case '1/4':
                                    beat.tremoloSpeed = Duration.Sixteenth;
                                    break;
                                case '1/8':
                                    beat.tremoloSpeed = Duration.ThirtySecond;
                                    break;
                            }
                            break;
                        case 'Chord':
                            beat.chordId = c.innerText;
                            break;
                        case 'Hairpin':
                            switch (c.innerText) {
                                case 'Crescendo':
                                    beat.crescendo = CrescendoType.Crescendo;
                                    break;
                                case 'Decrescendo':
                                    beat.crescendo = CrescendoType.Decrescendo;
                                    break;
                            }
                            break;
                        case 'Arpeggio':
                            if (c.innerText === 'Up') {
                                beat.brushType = BrushType.ArpeggioUp;
                            }
                            else {
                                beat.brushType = BrushType.ArpeggioDown;
                            }
                            break;
                        case 'Properties':
                            this.parseBeatProperties(c, beat);
                            break;
                        case 'XProperties':
                            this.parseBeatXProperties(c, beat);
                            break;
                        case 'FreeText':
                            beat.text = c.innerText;
                            break;
                        case 'Dynamic':
                            switch (c.innerText) {
                                case 'PPP':
                                    beat.dynamics = DynamicValue.PPP;
                                    break;
                                case 'PP':
                                    beat.dynamics = DynamicValue.PP;
                                    break;
                                case 'P':
                                    beat.dynamics = DynamicValue.P;
                                    break;
                                case 'MP':
                                    beat.dynamics = DynamicValue.MP;
                                    break;
                                case 'MF':
                                    beat.dynamics = DynamicValue.MF;
                                    break;
                                case 'F':
                                    beat.dynamics = DynamicValue.F;
                                    break;
                                case 'FF':
                                    beat.dynamics = DynamicValue.FF;
                                    break;
                                case 'FFF':
                                    beat.dynamics = DynamicValue.FFF;
                                    break;
                            }
                            break;
                        case 'GraceNotes':
                            switch (c.innerText) {
                                case 'OnBeat':
                                    beat.graceType = GraceType.OnBeat;
                                    break;
                                case 'BeforeBeat':
                                    beat.graceType = GraceType.BeforeBeat;
                                    break;
                            }
                            break;
                        case 'Legato':
                            if (c.getAttribute('origin') === 'true') {
                                beat.isLegatoOrigin = true;
                            }
                            break;
                        case 'Whammy':
                            let whammyOrigin = new BendPoint(0, 0);
                            whammyOrigin.value = this.toBendValue(parseFloat(c.getAttribute('originValue')));
                            whammyOrigin.offset = this.toBendOffset(parseFloat(c.getAttribute('originOffset')));
                            beat.addWhammyBarPoint(whammyOrigin);
                            let whammyMiddle1 = new BendPoint(0, 0);
                            whammyMiddle1.value = this.toBendValue(parseFloat(c.getAttribute('middleValue')));
                            whammyMiddle1.offset = this.toBendOffset(parseFloat(c.getAttribute('middleOffset1')));
                            beat.addWhammyBarPoint(whammyMiddle1);
                            let whammyMiddle2 = new BendPoint(0, 0);
                            whammyMiddle2.value = this.toBendValue(parseFloat(c.getAttribute('middleValue')));
                            whammyMiddle2.offset = this.toBendOffset(parseFloat(c.getAttribute('middleOffset2')));
                            beat.addWhammyBarPoint(whammyMiddle2);
                            let whammyDestination = new BendPoint(0, 0);
                            whammyDestination.value = this.toBendValue(parseFloat(c.getAttribute('destinationValue')));
                            whammyDestination.offset = this.toBendOffset(parseFloat(c.getAttribute('destinationOffset')));
                            beat.addWhammyBarPoint(whammyDestination);
                            break;
                        case 'Ottavia':
                            switch (c.innerText) {
                                case '8va':
                                    beat.ottava = Ottavia._8va;
                                    break;
                                case '8vb':
                                    beat.ottava = Ottavia._8vb;
                                    break;
                                case '15ma':
                                    beat.ottava = Ottavia._15ma;
                                    break;
                                case '15mb':
                                    beat.ottava = Ottavia._15mb;
                                    break;
                            }
                            break;
                    }
                }
            }
            this._beatById.set(beatId, beat);
        }
        parseBeatXProperties(node, beat) {
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'XProperty':
                            let id = c.getAttribute('id');
                            let val = 0;
                            switch (id) {
                                case '1124204545':
                                    val = parseInt(c.findChildElement('Int').innerText);
                                    beat.invertBeamDirection = val === 1;
                                    break;
                                case '687935489':
                                    val = parseInt(c.findChildElement('Int').innerText);
                                    beat.brushDuration = val;
                                    break;
                            }
                            break;
                    }
                }
            }
        }
        parseBeatProperties(node, beat) {
            let isWhammy = false;
            let whammyOrigin = null;
            let whammyMiddleValue = null;
            let whammyMiddleOffset1 = null;
            let whammyMiddleOffset2 = null;
            let whammyDestination = null;
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Property':
                            let name = c.getAttribute('name');
                            switch (name) {
                                case 'Brush':
                                    if (c.findChildElement('Direction').innerText === 'Up') {
                                        beat.brushType = BrushType.BrushUp;
                                    }
                                    else {
                                        beat.brushType = BrushType.BrushDown;
                                    }
                                    break;
                                case 'PickStroke':
                                    if (c.findChildElement('Direction').innerText === 'Up') {
                                        beat.pickStroke = PickStroke.Up;
                                    }
                                    else {
                                        beat.pickStroke = PickStroke.Down;
                                    }
                                    break;
                                case 'Slapped':
                                    if (c.findChildElement('Enable')) {
                                        beat.slap = true;
                                    }
                                    break;
                                case 'Popped':
                                    if (c.findChildElement('Enable')) {
                                        beat.pop = true;
                                    }
                                    break;
                                case 'VibratoWTremBar':
                                    switch (c.findChildElement('Strength').innerText) {
                                        case 'Wide':
                                            beat.vibrato = VibratoType.Wide;
                                            break;
                                        case 'Slight':
                                            beat.vibrato = VibratoType.Slight;
                                            break;
                                    }
                                    break;
                                case 'WhammyBar':
                                    isWhammy = true;
                                    break;
                                case 'WhammyBarExtend':
                                    // not clear what this is used for
                                    break;
                                case 'WhammyBarOriginValue':
                                    if (!whammyOrigin) {
                                        whammyOrigin = new BendPoint(0, 0);
                                    }
                                    whammyOrigin.value = this.toBendValue(parseFloat(c.findChildElement('Float').innerText));
                                    break;
                                case 'WhammyBarOriginOffset':
                                    if (!whammyOrigin) {
                                        whammyOrigin = new BendPoint(0, 0);
                                    }
                                    whammyOrigin.offset = this.toBendOffset(parseFloat(c.findChildElement('Float').innerText));
                                    break;
                                case 'WhammyBarMiddleValue':
                                    whammyMiddleValue = this.toBendValue(parseFloat(c.findChildElement('Float').innerText));
                                    break;
                                case 'WhammyBarMiddleOffset1':
                                    whammyMiddleOffset1 = this.toBendOffset(parseFloat(c.findChildElement('Float').innerText));
                                    break;
                                case 'WhammyBarMiddleOffset2':
                                    whammyMiddleOffset2 = this.toBendOffset(parseFloat(c.findChildElement('Float').innerText));
                                    break;
                                case 'WhammyBarDestinationValue':
                                    if (!whammyDestination) {
                                        whammyDestination = new BendPoint(BendPoint.MaxPosition, 0);
                                    }
                                    whammyDestination.value = this.toBendValue(parseFloat(c.findChildElement('Float').innerText));
                                    break;
                                case 'WhammyBarDestinationOffset':
                                    if (!whammyDestination) {
                                        whammyDestination = new BendPoint(0, 0);
                                    }
                                    whammyDestination.offset = this.toBendOffset(parseFloat(c.findChildElement('Float').innerText));
                                    break;
                            }
                            break;
                    }
                }
            }
            if (isWhammy) {
                if (!whammyOrigin) {
                    whammyOrigin = new BendPoint(0, 0);
                }
                if (!whammyDestination) {
                    whammyDestination = new BendPoint(BendPoint.MaxPosition, 0);
                }
                beat.addWhammyBarPoint(whammyOrigin);
                if (whammyMiddleOffset1 && whammyMiddleValue) {
                    beat.addWhammyBarPoint(new BendPoint(whammyMiddleOffset1, whammyMiddleValue));
                }
                if (whammyMiddleOffset2 && whammyMiddleValue) {
                    beat.addWhammyBarPoint(new BendPoint(whammyMiddleOffset2, whammyMiddleValue));
                }
                if (!whammyMiddleOffset1 && !whammyMiddleOffset2 && whammyMiddleValue) {
                    beat.addWhammyBarPoint(new BendPoint((BendPoint.MaxPosition / 2) | 0, whammyMiddleValue));
                }
                beat.addWhammyBarPoint(whammyDestination);
            }
        }
        //
        // <Notes>...</Notes>
        //
        parseNotes(node) {
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Note':
                            this.parseNote(c);
                            break;
                    }
                }
            }
        }
        parseNote(node) {
            let note = new Note();
            let noteId = node.getAttribute('id');
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Properties':
                            this.parseNoteProperties(c, note, noteId);
                            break;
                        case 'AntiAccent':
                            if (c.innerText.toLowerCase() === 'normal') {
                                note.isGhost = true;
                            }
                            break;
                        case 'LetRing':
                            note.isLetRing = true;
                            break;
                        case 'Trill':
                            note.trillValue = parseInt(c.innerText);
                            note.trillSpeed = Duration.Sixteenth;
                            break;
                        case 'Accent':
                            let accentFlags = parseInt(c.innerText);
                            if ((accentFlags & 0x01) !== 0) {
                                note.isStaccato = true;
                            }
                            if ((accentFlags & 0x04) !== 0) {
                                note.accentuated = AccentuationType.Heavy;
                            }
                            if ((accentFlags & 0x08) !== 0) {
                                note.accentuated = AccentuationType.Normal;
                            }
                            break;
                        case 'Tie':
                            if (c.getAttribute('destination').toLowerCase() === 'true') {
                                note.isTieDestination = true;
                            }
                            break;
                        case 'Vibrato':
                            switch (c.innerText) {
                                case 'Slight':
                                    note.vibrato = VibratoType.Slight;
                                    break;
                                case 'Wide':
                                    note.vibrato = VibratoType.Wide;
                                    break;
                            }
                            break;
                        case 'LeftFingering':
                            note.isFingering = true;
                            switch (c.innerText) {
                                case 'P':
                                    note.leftHandFinger = Fingers.Thumb;
                                    break;
                                case 'I':
                                    note.leftHandFinger = Fingers.IndexFinger;
                                    break;
                                case 'M':
                                    note.leftHandFinger = Fingers.MiddleFinger;
                                    break;
                                case 'A':
                                    note.leftHandFinger = Fingers.AnnularFinger;
                                    break;
                                case 'C':
                                    note.leftHandFinger = Fingers.LittleFinger;
                                    break;
                            }
                            break;
                        case 'RightFingering':
                            note.isFingering = true;
                            switch (c.innerText) {
                                case 'P':
                                    note.rightHandFinger = Fingers.Thumb;
                                    break;
                                case 'I':
                                    note.rightHandFinger = Fingers.IndexFinger;
                                    break;
                                case 'M':
                                    note.rightHandFinger = Fingers.MiddleFinger;
                                    break;
                                case 'A':
                                    note.rightHandFinger = Fingers.AnnularFinger;
                                    break;
                                case 'C':
                                    note.rightHandFinger = Fingers.LittleFinger;
                                    break;
                            }
                            break;
                    }
                }
            }
            this._noteById.set(noteId, note);
        }
        parseNoteProperties(node, note, noteId) {
            let isBended = false;
            let bendOrigin = null;
            let bendMiddleValue = null;
            let bendMiddleOffset1 = null;
            let bendMiddleOffset2 = null;
            let bendDestination = null;
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Property':
                            let name = c.getAttribute('name');
                            switch (name) {
                                case 'String':
                                    note.string = parseInt(c.findChildElement('String').innerText) + 1;
                                    break;
                                case 'Fret':
                                    note.fret = parseInt(c.findChildElement('Fret').innerText);
                                    break;
                                case 'Element':
                                    note.element = parseInt(c.findChildElement('Element').innerText);
                                    break;
                                case 'Variation':
                                    note.variation = parseInt(c.findChildElement('Variation').innerText);
                                    break;
                                case 'Tapped':
                                    this._tappedNotes.set(noteId, true);
                                    break;
                                case 'HarmonicType':
                                    let htype = c.findChildElement('HType');
                                    if (htype) {
                                        switch (htype.innerText) {
                                            case 'NoHarmonic':
                                                note.harmonicType = HarmonicType.None;
                                                break;
                                            case 'Natural':
                                                note.harmonicType = HarmonicType.Natural;
                                                break;
                                            case 'Artificial':
                                                note.harmonicType = HarmonicType.Artificial;
                                                break;
                                            case 'Pinch':
                                                note.harmonicType = HarmonicType.Pinch;
                                                break;
                                            case 'Tap':
                                                note.harmonicType = HarmonicType.Tap;
                                                break;
                                            case 'Semi':
                                                note.harmonicType = HarmonicType.Semi;
                                                break;
                                            case 'Feedback':
                                                note.harmonicType = HarmonicType.Feedback;
                                                break;
                                        }
                                    }
                                    break;
                                case 'HarmonicFret':
                                    let hfret = c.findChildElement('HFret');
                                    if (hfret) {
                                        note.harmonicValue = parseFloat(hfret.innerText);
                                    }
                                    break;
                                case 'Muted':
                                    if (c.findChildElement('Enable')) {
                                        note.isDead = true;
                                    }
                                    break;
                                case 'PalmMuted':
                                    if (c.findChildElement('Enable')) {
                                        note.isPalmMute = true;
                                    }
                                    break;
                                case 'Octave':
                                    note.octave = parseInt(c.findChildElement('Number').innerText);
                                    break;
                                case 'Tone':
                                    note.tone = parseInt(c.findChildElement('Step').innerText);
                                    break;
                                case 'Bended':
                                    isBended = true;
                                    break;
                                case 'BendOriginValue':
                                    if (!bendOrigin) {
                                        bendOrigin = new BendPoint(0, 0);
                                    }
                                    bendOrigin.value = this.toBendValue(parseFloat(c.findChildElement('Float').innerText));
                                    break;
                                case 'BendOriginOffset':
                                    if (!bendOrigin) {
                                        bendOrigin = new BendPoint(0, 0);
                                    }
                                    bendOrigin.offset = this.toBendOffset(parseFloat(c.findChildElement('Float').innerText));
                                    break;
                                case 'BendMiddleValue':
                                    bendMiddleValue = this.toBendValue(parseFloat(c.findChildElement('Float').innerText));
                                    break;
                                case 'BendMiddleOffset1':
                                    bendMiddleOffset1 = this.toBendOffset(parseFloat(c.findChildElement('Float').innerText));
                                    break;
                                case 'BendMiddleOffset2':
                                    bendMiddleOffset2 = this.toBendOffset(parseFloat(c.findChildElement('Float').innerText));
                                    break;
                                case 'BendDestinationValue':
                                    if (!bendDestination) {
                                        bendDestination = new BendPoint(BendPoint.MaxPosition, 0);
                                    }
                                    bendDestination.value = this.toBendValue(parseFloat(c.findChildElement('Float').innerText));
                                    break;
                                case 'BendDestinationOffset':
                                    if (!bendDestination) {
                                        bendDestination = new BendPoint(0, 0);
                                    }
                                    bendDestination.offset = this.toBendOffset(parseFloat(c.findChildElement('Float').innerText));
                                    break;
                                case 'HopoOrigin':
                                    if (c.findChildElement('Enable')) {
                                        note.isHammerPullOrigin = true;
                                    }
                                    break;
                                case 'HopoDestination':
                                    // NOTE: gets automatically calculated
                                    // if (FindChildElement(node, "Enable"))
                                    //     note.isHammerPullDestination = true;
                                    break;
                                case 'Slide':
                                    let slideFlags = parseInt(c.findChildElement('Flags').innerText);
                                    if ((slideFlags & 1) !== 0) {
                                        note.slideOutType = SlideOutType.Shift;
                                    }
                                    else if ((slideFlags & 2) !== 0) {
                                        note.slideOutType = SlideOutType.Legato;
                                    }
                                    else if ((slideFlags & 4) !== 0) {
                                        note.slideOutType = SlideOutType.OutDown;
                                    }
                                    else if ((slideFlags & 8) !== 0) {
                                        note.slideOutType = SlideOutType.OutUp;
                                    }
                                    if ((slideFlags & 16) !== 0) {
                                        note.slideInType = SlideInType.IntoFromBelow;
                                    }
                                    else if ((slideFlags & 32) !== 0) {
                                        note.slideInType = SlideInType.IntoFromAbove;
                                    }
                                    if ((slideFlags & 64) !== 0) {
                                        note.slideOutType = SlideOutType.PickSlideDown;
                                    }
                                    else if ((slideFlags & 128) !== 0) {
                                        note.slideOutType = SlideOutType.PickSlideUp;
                                    }
                                    break;
                            }
                            break;
                    }
                }
            }
            if (isBended) {
                if (!bendOrigin) {
                    bendOrigin = new BendPoint(0, 0);
                }
                if (!bendDestination) {
                    bendDestination = new BendPoint(BendPoint.MaxPosition, 0);
                }
                note.addBendPoint(bendOrigin);
                if (bendMiddleOffset1 && bendMiddleValue) {
                    note.addBendPoint(new BendPoint(bendMiddleOffset1, bendMiddleValue));
                }
                if (bendMiddleOffset2 && bendMiddleValue) {
                    note.addBendPoint(new BendPoint(bendMiddleOffset2, bendMiddleValue));
                }
                if (!bendMiddleOffset1 && !bendMiddleOffset2 && bendMiddleValue) {
                    note.addBendPoint(new BendPoint((BendPoint.MaxPosition / 2) | 0, bendMiddleValue));
                }
                note.addBendPoint(bendDestination);
            }
        }
        toBendValue(gpxValue) {
            return (gpxValue * GpifParser.BendPointValueFactor) | 0;
        }
        toBendOffset(gpxOffset) {
            return (gpxOffset * GpifParser.BendPointPositionFactor) | 0;
        }
        parseRhythms(node) {
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Rhythm':
                            this.parseRhythm(c);
                            break;
                    }
                }
            }
        }
        parseRhythm(node) {
            let rhythm = new GpifRhythm();
            let rhythmId = node.getAttribute('id');
            for (let c of node.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'NoteValue':
                            switch (c.innerText) {
                                case 'Long':
                                    rhythm.value = Duration.QuadrupleWhole;
                                    break;
                                case 'DoubleWhole':
                                    rhythm.value = Duration.DoubleWhole;
                                    break;
                                case 'Whole':
                                    rhythm.value = Duration.Whole;
                                    break;
                                case 'Half':
                                    rhythm.value = Duration.Half;
                                    break;
                                case 'Quarter':
                                    rhythm.value = Duration.Quarter;
                                    break;
                                case 'Eighth':
                                    rhythm.value = Duration.Eighth;
                                    break;
                                case '16th':
                                    rhythm.value = Duration.Sixteenth;
                                    break;
                                case '32nd':
                                    rhythm.value = Duration.ThirtySecond;
                                    break;
                                case '64th':
                                    rhythm.value = Duration.SixtyFourth;
                                    break;
                                case '128th':
                                    rhythm.value = Duration.OneHundredTwentyEighth;
                                    break;
                                case '256th':
                                    rhythm.value = Duration.TwoHundredFiftySixth;
                                    break;
                            }
                            break;
                        case 'PrimaryTuplet':
                            rhythm.tupletNumerator = parseInt(c.getAttribute('num'));
                            rhythm.tupletDenominator = parseInt(c.getAttribute('den'));
                            break;
                        case 'AugmentationDot':
                            rhythm.dots = parseInt(c.getAttribute('count'));
                            break;
                    }
                }
            }
            this._rhythmById.set(rhythmId, rhythm);
        }
        buildModel() {
            // build score
            for (let i = 0, j = this._masterBars.length; i < j; i++) {
                let masterBar = this._masterBars[i];
                this.score.addMasterBar(masterBar);
            }
            // add tracks to score
            for (let trackId of this._tracksMapping) {
                if (!trackId) {
                    continue;
                }
                let track = this._tracksById.get(trackId);
                this.score.addTrack(track);
            }
            // process all masterbars
            for (let barIds of this._barsOfMasterBar) {
                // add all bars of masterbar vertically to all tracks
                let staffIndex = 0;
                for (let barIndex = 0, trackIndex = 0; barIndex < barIds.length && trackIndex < this.score.tracks.length; barIndex++) {
                    let barId = barIds[barIndex];
                    if (barId !== GpifParser.InvalidId) {
                        let bar = this._barsById.get(barId);
                        let track = this.score.tracks[trackIndex];
                        let staff = track.staves[staffIndex];
                        staff.addBar(bar);
                        if (this._voicesOfBar.has(barId)) {
                            // add voices to bars
                            for (let voiceId of this._voicesOfBar.get(barId)) {
                                if (voiceId !== GpifParser.InvalidId) {
                                    let voice = this._voiceById.get(voiceId);
                                    bar.addVoice(voice);
                                    if (this._beatsOfVoice.has(voiceId)) {
                                        // add beats to voices
                                        for (let beatId of this._beatsOfVoice.get(voiceId)) {
                                            if (beatId !== GpifParser.InvalidId) {
                                                // important! we clone the beat because beats get reused
                                                // in gp6, our model needs to have unique beats.
                                                let beat = this._beatById.get(beatId).clone();
                                                voice.addBeat(beat);
                                                let rhythmId = this._rhythmOfBeat.get(beatId);
                                                let rhythm = this._rhythmById.get(rhythmId);
                                                // set beat duration
                                                beat.duration = rhythm.value;
                                                beat.dots = rhythm.dots;
                                                beat.tupletNumerator = rhythm.tupletNumerator;
                                                beat.tupletDenominator = rhythm.tupletDenominator;
                                                // add notes to beat
                                                if (this._notesOfBeat.has(beatId)) {
                                                    for (let noteId of this._notesOfBeat.get(beatId)) {
                                                        if (noteId !== GpifParser.InvalidId) {
                                                            beat.addNote(this._noteById.get(noteId).clone());
                                                            if (this._tappedNotes.has(noteId)) {
                                                                beat.tap = true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    // invalid voice -> empty voice
                                    let voice = new Voice();
                                    bar.addVoice(voice);
                                    let beat = new Beat();
                                    beat.isEmpty = true;
                                    beat.duration = Duration.Quarter;
                                    voice.addBeat(beat);
                                }
                            }
                        }
                        // stave is full? -> next track
                        if (staffIndex === track.staves.length - 1) {
                            trackIndex++;
                            staffIndex = 0;
                        }
                        else {
                            staffIndex++;
                        }
                    }
                    else {
                        // no bar for track
                        trackIndex++;
                    }
                }
            }
            // build masterbar automations
            for (let kvp of this._masterTrackAutomations) {
                let barIndex = kvp[0];
                let automations = kvp[1];
                let masterBar = this.score.masterBars[parseInt(barIndex)];
                for (let i = 0, j = automations.length; i < j; i++) {
                    let automation = automations[i];
                    if (automation.type === AutomationType.Tempo) {
                        if (barIndex === '0') {
                            this.score.tempo = automation.value | 0;
                            if (automation.text) {
                                this.score.tempoLabel = automation.text;
                            }
                        }
                        masterBar.tempoAutomation = automation;
                    }
                }
            }
        }
    }
    GpifParser.InvalidId = '-1';
    /**
     * GPX range: 0-100
     * Internal range: 0 - 60
     */
    GpifParser.BendPointPositionFactor = BendPoint.MaxPosition / 100.0;
    /**
     * GPIF: 25 per quarternote
     * Internal Range: 1 per quarter note
     */
    GpifParser.BendPointValueFactor = 1 / 25.0;

    class TrackConfiguration {
        constructor() {
            this.isVisible = false;
            this.showSlash = false;
            this.showStandardNotation = false;
            this.showTablature = false;
        }
    }
    class Part {
        constructor() {
            this.isMultiRest = false;
            this.tracks = [];
        }
    }
    class PartConfiguration {
        constructor(partConfigurationData) {
            this.parts = [];
            this.zoomLevel = 0;
            this.layout = 0;
            let readable = ByteBuffer.fromBuffer(partConfigurationData);
            let entryCount = IOHelper.readInt32BE(readable);
            for (let i = 0; i < entryCount; i++) {
                let part = new Part();
                this.parts.push(part);
                part.isMultiRest = GpBinaryHelpers.gpReadBool(readable);
                let groupCount = IOHelper.readInt32BE(readable);
                for (let j = 0; j < groupCount; j++) {
                    let flags = readable.readByte();
                    // enable at least standard notation
                    if (flags === 0) {
                        flags = 1;
                    }
                    let trackConfiguration = new TrackConfiguration();
                    trackConfiguration.showStandardNotation = (flags & 0x01) !== 0;
                    trackConfiguration.showTablature = (flags & 0x02) !== 0;
                    trackConfiguration.showSlash = (flags & 0x04) !== 0;
                    part.tracks.push(trackConfiguration);
                }
            }
        }
        apply(score) {
            let staffIndex = 0;
            let trackIndex = 0;
            // the PartConfiguration is really twisted compared to how the score structure looks like.
            // the first part typically contains the settings for the first staff of all tracks.
            // but then there is 1 part with 1 track for each other staff of the tracks.
            // So the structure in the PartConfig appears to be:
            // Parts[0].Tracks = { Track1-Staff1, Track2-Staff1, Track3-Staff1, Track4-Staff1, .. }
            // Parts[1].Tracks = { Track1-Staff2 }
            // Parts[2].Tracks = { Track2-Staff2 }
            // Parts[3].Tracks = { Track3-Staff2 }
            // Parts[4].Tracks = { Track4-Staff2 }
            //
            // even if a track has only 1 staff, there are 2 staff configurations stored.
            // I hope Arobas never changes this in the format as the PartConfiguration is not versionized.
            for (let part of this.parts) {
                for (let trackConfig of part.tracks) {
                    if (trackIndex < score.tracks.length) {
                        let track = score.tracks[trackIndex];
                        if (staffIndex < track.staves.length) {
                            let staff = track.staves[staffIndex];
                            staff.showTablature = trackConfig.showTablature;
                            staff.showStandardNotation = trackConfig.showStandardNotation;
                        }
                    }
                    trackIndex++;
                    if (trackIndex >= score.tracks.length) {
                        staffIndex++;
                        trackIndex = 0;
                    }
                }
            }
        }
    }

    // This Inflate algorithm is based on the Inflate class of the Haxe Standard Library (MIT)
    /*
     * Copyright (C)2005-2019 Haxe Foundation
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */
    class Huffman {
    }
    class Found extends Huffman {
        constructor(n) {
            super();
            this.n = n;
        }
    }
    class NeedBit extends Huffman {
        constructor(left, right) {
            super();
            this.left = left;
            this.right = right;
        }
    }
    class NeedBits extends Huffman {
        constructor(n, table) {
            super();
            this.n = n;
            this.table = table;
        }
    }

    // This Inflate algorithm is based on the Inflate class of the Haxe Standard Library (MIT)
    // This Inflater is based on the Zip Reader of the Haxe Standard Library (MIT)
    class HuffTools {
        static make(lengths, pos, nlengths, maxbits) {
            let counts = [];
            let tmp = [];
            if (maxbits > 32) {
                throw new FormatError('Invalid huffman');
            }
            for (let i = 0; i < maxbits; i++) {
                counts.push(0);
                tmp.push(0);
            }
            for (let i = 0; i < nlengths; i++) {
                let p = lengths[i + pos];
                if (p >= maxbits) {
                    throw new FormatError('Invalid huffman');
                }
                counts[p]++;
            }
            let code = 0;
            for (let i = 1; i < maxbits - 1; i++) {
                code = (code + counts[i]) << 1;
                tmp[i] = code;
            }
            let bits = new Map();
            for (let i = 0; i < nlengths; i++) {
                let l = lengths[i + pos];
                if (l !== 0) {
                    let n = tmp[l - 1];
                    tmp[l - 1] = n + 1;
                    bits.set((n << 5) | l, i);
                }
            }
            return HuffTools.treeCompress(new NeedBit(HuffTools.treeMake(bits, maxbits, 0, 1), HuffTools.treeMake(bits, maxbits, 1, 1)));
        }
        static treeMake(bits, maxbits, v, len) {
            if (len > maxbits) {
                throw new FormatError('Invalid huffman');
            }
            let idx = (v << 5) | len;
            if (bits.has(idx)) {
                return new Found(bits.get(idx));
            }
            v = v << 1;
            len += 1;
            return new NeedBit(HuffTools.treeMake(bits, maxbits, v, len), HuffTools.treeMake(bits, maxbits, v | 1, len));
        }
        static treeCompress(t) {
            let d = HuffTools.treeDepth(t);
            if (d === 0) {
                return t;
            }
            if (d === 1) {
                if (t instanceof NeedBit) {
                    return new NeedBit(HuffTools.treeCompress(t.left), HuffTools.treeCompress(t.right));
                }
                else {
                    throw new FormatError('assert');
                }
            }
            let size = 1 << d;
            let table = [];
            for (let i = 0; i < size; i++) {
                table.push(new Found(-1));
            }
            HuffTools.treeWalk(table, 0, 0, d, t);
            return new NeedBits(d, table);
        }
        static treeWalk(table, p, cd, d, t) {
            if (t instanceof NeedBit) {
                if (d > 0) {
                    HuffTools.treeWalk(table, p, cd + 1, d - 1, t.left);
                    HuffTools.treeWalk(table, p | (1 << cd), cd + 1, d - 1, t.right);
                }
                else {
                    table[p] = HuffTools.treeCompress(t);
                }
            }
            else {
                table[p] = HuffTools.treeCompress(t);
            }
        }
        static treeDepth(t) {
            if (t instanceof Found) {
                return 0;
            }
            if (t instanceof NeedBits) {
                throw new FormatError('assert');
            }
            if (t instanceof NeedBit) {
                let da = HuffTools.treeDepth(t.left);
                let db = HuffTools.treeDepth(t.right);
                return 1 + (da < db ? da : db);
            }
            return 0;
        }
    }

    // This Inflate algorithm is based on the Inflate class of the Haxe Standard Library (MIT)
    var InflateState;
    (function (InflateState) {
        InflateState[InflateState["Head"] = 0] = "Head";
        InflateState[InflateState["Block"] = 1] = "Block";
        InflateState[InflateState["CData"] = 2] = "CData";
        InflateState[InflateState["Flat"] = 3] = "Flat";
        InflateState[InflateState["Crc"] = 4] = "Crc";
        InflateState[InflateState["Dist"] = 5] = "Dist";
        InflateState[InflateState["DistOne"] = 6] = "DistOne";
        InflateState[InflateState["Done"] = 7] = "Done";
    })(InflateState || (InflateState = {}));
    class InflateWindow {
        constructor() {
            this.buffer = new Uint8Array(InflateWindow.BufferSize);
            this.pos = 0;
        }
        slide() {
            let b = new Uint8Array(InflateWindow.BufferSize);
            this.pos -= InflateWindow.Size;
            b.set(this.buffer.subarray(InflateWindow.Size, InflateWindow.Size + this.pos), 0);
            this.buffer = b;
        }
        addBytes(b, p, len) {
            if (this.pos + len > InflateWindow.BufferSize) {
                this.slide();
            }
            this.buffer.set(b.subarray(p, p + len), this.pos);
            this.pos += len;
        }
        addByte(c) {
            if (this.pos === InflateWindow.BufferSize) {
                this.slide();
            }
            this.buffer[this.pos] = c;
            this.pos++;
        }
        getLastChar() {
            return this.buffer[this.pos - 1];
        }
        available() {
            return this.pos;
        }
    }
    InflateWindow.Size = 1 << 15;
    InflateWindow.BufferSize = 1 << 16;
    class Inflate {
        constructor(readable) {
            this._nbits = 0;
            this._bits = 0;
            this._state = InflateState.Block;
            this._isFinal = false;
            this._huffman = Inflate._fixedHuffman;
            this._huffdist = null;
            this._len = 0;
            this._dist = 0;
            this._needed = 0;
            this._output = null;
            this._outpos = 0;
            this._lengths = [];
            this._window = new InflateWindow();
            this._input = readable;
            for (let i = 0; i < 19; i++) {
                this._lengths.push(-1);
            }
        }
        static buildFixedHuffman() {
            let a = [];
            for (let n = 0; n < 288; n++) {
                a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
            }
            return HuffTools.make(a, 0, 288, 10);
        }
        readBytes(b, pos, len) {
            this._needed = len;
            this._outpos = pos;
            this._output = b;
            if (len > 0) {
                while (this.inflateLoop()) {
                    // inflating...
                }
            }
            return len - this._needed;
        }
        inflateLoop() {
            switch (this._state) {
                case InflateState.Head:
                    let cmf = this._input.readByte();
                    let cm = cmf & 15;
                    if (cm !== 8) {
                        throw new FormatError('Invalid data');
                    }
                    let flg = this._input.readByte();
                    // var fcheck = flg & 31;
                    let fdict = (flg & 32) !== 0;
                    // var flevel = flg >> 6;
                    if (((cmf << 8) + flg) % 31 !== 0) {
                        throw new FormatError('Invalid data');
                    }
                    if (fdict) {
                        throw new FormatError('Unsupported dictionary');
                    }
                    this._state = InflateState.Block;
                    return true;
                case InflateState.Crc:
                    this._state = InflateState.Done;
                    return true;
                case InflateState.Done:
                    // nothing
                    return false;
                case InflateState.Block:
                    this._isFinal = this.getBit();
                    switch (this.getBits(2)) {
                        case 0:
                            this._len = IOHelper.readUInt16LE(this._input);
                            let nlen = IOHelper.readUInt16LE(this._input);
                            if (nlen !== 0xffff - this._len) {
                                throw new FormatError('Invalid data');
                            }
                            this._state = InflateState.Flat;
                            let r = this.inflateLoop();
                            this.resetBits();
                            return r;
                        case 1:
                            this._huffman = Inflate._fixedHuffman;
                            this._huffdist = null;
                            this._state = InflateState.CData;
                            return true;
                        case 2:
                            let hlit = this.getBits(5) + 257;
                            let hdist = this.getBits(5) + 1;
                            let hclen = this.getBits(4) + 4;
                            for (let i = 0; i < hclen; i++) {
                                this._lengths[Inflate.CodeLengthsPos[i]] = this.getBits(3);
                            }
                            for (let i = hclen; i < 19; i++) {
                                this._lengths[Inflate.CodeLengthsPos[i]] = 0;
                            }
                            this._huffman = HuffTools.make(this._lengths, 0, 19, 8);
                            let xlengths = [];
                            for (let i = 0; i < hlit + hdist; i++) {
                                xlengths.push(0);
                            }
                            this.inflateLengths(xlengths, hlit + hdist);
                            this._huffdist = HuffTools.make(xlengths, hlit, hdist, 16);
                            this._huffman = HuffTools.make(xlengths, 0, hlit, 16);
                            this._state = InflateState.CData;
                            return true;
                        default:
                            throw new FormatError('Invalid data');
                    }
                case InflateState.Flat: {
                    let rlen = this._len < this._needed ? this._len : this._needed;
                    let bytes = IOHelper.readByteArray(this._input, rlen);
                    this._len -= rlen;
                    this.addBytes(bytes, 0, rlen);
                    if (this._len === 0)
                        this._state = this._isFinal ? InflateState.Crc : InflateState.Block;
                    return this._needed > 0;
                }
                case InflateState.DistOne: {
                    let rlen = this._len < this._needed ? this._len : this._needed;
                    this.addDistOne(rlen);
                    this._len -= rlen;
                    if (this._len === 0) {
                        this._state = InflateState.CData;
                    }
                    return this._needed > 0;
                }
                case InflateState.Dist:
                    while (this._len > 0 && this._needed > 0) {
                        let rdist = this._len < this._dist ? this._len : this._dist;
                        let rlen = this._needed < rdist ? this._needed : rdist;
                        this.addDist(this._dist, rlen);
                        this._len -= rlen;
                    }
                    if (this._len === 0) {
                        this._state = InflateState.CData;
                    }
                    return this._needed > 0;
                case InflateState.CData:
                    let n = this.applyHuffman(this._huffman);
                    if (n < 256) {
                        this.addByte(n);
                        return this._needed > 0;
                    }
                    else if (n === 256) {
                        this._state = this._isFinal ? InflateState.Crc : InflateState.Block;
                        return true;
                    }
                    else {
                        n = (n - 257) & 0xff;
                        let extraBits = Inflate.LenExtraBitsTbl[n];
                        if (extraBits === -1) {
                            throw new FormatError('Invalid data');
                        }
                        this._len = Inflate.LenBaseValTbl[n] + this.getBits(extraBits);
                        let huffdist = this._huffdist;
                        let distCode = !huffdist ? this.getRevBits(5) : this.applyHuffman(huffdist);
                        extraBits = Inflate.DistExtraBitsTbl[distCode];
                        if (extraBits === -1) {
                            throw new FormatError('Invalid data');
                        }
                        this._dist = Inflate.DistBaseValTbl[distCode] + this.getBits(extraBits);
                        if (this._dist > this._window.available()) {
                            throw new FormatError('Invalid data');
                        }
                        this._state = this._dist === 1 ? InflateState.DistOne : InflateState.Dist;
                        return true;
                    }
            }
            return false;
        }
        addDistOne(n) {
            let c = this._window.getLastChar();
            for (let i = 0; i < n; i++) {
                this.addByte(c);
            }
        }
        addByte(b) {
            this._window.addByte(b);
            this._output[this._outpos] = b;
            this._needed--;
            this._outpos++;
        }
        addDist(d, len) {
            this.addBytes(this._window.buffer, this._window.pos - d, len);
        }
        getBit() {
            if (this._nbits === 0) {
                this._nbits = 8;
                this._bits = this._input.readByte();
            }
            let b = (this._bits & 1) === 1;
            this._nbits--;
            this._bits = this._bits >> 1;
            return b;
        }
        getBits(n) {
            while (this._nbits < n) {
                this._bits = this._bits | (this._input.readByte() << this._nbits);
                this._nbits += 8;
            }
            let b = this._bits & ((1 << n) - 1);
            this._nbits -= n;
            this._bits = this._bits >> n;
            return b;
        }
        getRevBits(n) {
            return n === 0 ? 0 : this.getBit() ? (1 << (n - 1)) | this.getRevBits(n - 1) : this.getRevBits(n - 1);
        }
        resetBits() {
            this._bits = 0;
            this._nbits = 0;
        }
        addBytes(b, p, len) {
            this._window.addBytes(b, p, len);
            this._output.set(b.subarray(p, p + len), this._outpos);
            this._needed -= len;
            this._outpos += len;
        }
        inflateLengths(a, max) {
            let i = 0;
            let prev = 0;
            while (i < max) {
                let n = this.applyHuffman(this._huffman);
                switch (n) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                        prev = n;
                        a[i] = n;
                        i++;
                        break;
                    case 16:
                        let end = i + 3 + this.getBits(2);
                        if (end > max) {
                            throw new FormatError('Invalid data');
                        }
                        while (i < end) {
                            a[i] = prev;
                            i++;
                        }
                        break;
                    case 17:
                        i += 3 + this.getBits(3);
                        if (i > max) {
                            throw new FormatError('Invalid data');
                        }
                        break;
                    case 18:
                        i += 11 + this.getBits(7);
                        if (i > max) {
                            throw new FormatError('Invalid data');
                        }
                        break;
                    default: {
                        throw new FormatError('Invalid data');
                    }
                }
            }
        }
        applyHuffman(h) {
            if (h instanceof Found) {
                return h.n;
            }
            if (h instanceof NeedBit) {
                return this.applyHuffman(this.getBit() ? h.right : h.left);
            }
            if (h instanceof NeedBits) {
                return this.applyHuffman(h.table[this.getBits(h.n)]);
            }
            throw new FormatError('Invalid data');
        }
    }
    // prettier-ignore
    Inflate.LenExtraBitsTbl = [
        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1,
        -1
    ];
    // prettier-ignore
    Inflate.LenBaseValTbl = [
        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115,
        131, 163, 195, 227, 258
    ];
    // prettier-ignore
    Inflate.DistExtraBitsTbl = [
        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12,
        13, 13, -1, -1
    ];
    // prettier-ignore
    Inflate.DistBaseValTbl = [
        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537,
        2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577
    ];
    // prettier-ignore
    Inflate.CodeLengthsPos = [
        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15
    ];
    Inflate._fixedHuffman = Inflate.buildFixedHuffman();

    class ZipEntry {
        constructor(fullName, data) {
            this.fullName = fullName;
            let i = fullName.lastIndexOf('/');
            this.fileName = i === -1 || i === fullName.length - 1 ? this.fullName : fullName.substr(i + 1);
            this.data = data;
        }
    }
    class ZipReader {
        constructor(readable) {
            this._readable = readable;
        }
        read() {
            let entries = [];
            while (true) {
                let e = this.readEntry();
                if (!e) {
                    break;
                }
                entries.push(e);
            }
            return entries;
        }
        readEntry() {
            let readable = this._readable;
            let h = IOHelper.readInt32LE(readable);
            if (h !== ZipReader.LocalFileHeaderSignature) {
                return null;
            }
            // 4.3.7 local file header
            IOHelper.readUInt16LE(readable); // version
            let flags = IOHelper.readUInt16LE(readable);
            let compressionMethod = IOHelper.readUInt16LE(readable);
            let compressed = compressionMethod !== 0;
            if (compressed && compressionMethod !== ZipReader.CompressionMethodDeflate) {
                return null;
            }
            IOHelper.readInt16LE(this._readable); // lastModFileTime
            IOHelper.readInt16LE(this._readable); // lastModFileDate
            IOHelper.readInt32LE(readable); // crc32
            IOHelper.readInt32LE(readable); // compressed size
            let uncompressedSize = IOHelper.readInt32LE(readable);
            let fileNameLength = IOHelper.readInt16LE(readable);
            let extraFieldLength = IOHelper.readInt16LE(readable);
            let fname = Platform.toString(IOHelper.readByteArray(readable, fileNameLength), 'utf-8');
            readable.skip(extraFieldLength);
            // 4.3.8 File Data
            let data;
            if (compressed) {
                let target = ByteBuffer.empty();
                let z = new Inflate(this._readable);
                let buffer = new Uint8Array(65536);
                while (true) {
                    let bytes = z.readBytes(buffer, 0, buffer.length);
                    target.write(buffer, 0, bytes);
                    if (bytes < buffer.length) {
                        break;
                    }
                }
                data = target.toArray();
            }
            else {
                data = IOHelper.readByteArray(this._readable, uncompressedSize);
            }
            // 4.3.9 Data Descriptor
            // 4.3.9.1
            if ((flags & 8) !== 0) {
                let crc32 = IOHelper.readInt32LE(this._readable);
                // 4.3.9.3
                if (crc32 === ZipReader.OptionalDataDescriptorSignature) {
                    IOHelper.readInt32LE(this._readable); // real crc
                }
                IOHelper.readInt32LE(this._readable); // compressed size
                IOHelper.readInt32LE(this._readable); // uncompressed size
            }
            return new ZipEntry(fname, data);
        }
    }
    ZipReader.OptionalDataDescriptorSignature = 0x08074b50;
    ZipReader.CompressionMethodDeflate = 8;
    ZipReader.LocalFileHeaderSignature = 0x04034b50;

    /**
     * This ScoreImporter can read Guitar Pro 7 (gp) files.
     */
    class Gp7Importer extends ScoreImporter {
        get name() {
            return 'Guitar Pro 7';
        }
        constructor() {
            super();
        }
        readScore() {
            // at first we need to load the binary file system
            // from the GPX container
            Logger.info(this.name, 'Loading ZIP entries');
            let fileSystem = new ZipReader(this.data);
            let entries;
            try {
                entries = fileSystem.read();
            }
            catch (e) {
                throw new UnsupportedFormatError('No Zip archive', e);
            }
            Logger.info(this.name, 'Zip entries loaded');
            let xml = null;
            let binaryStylesheetData = null;
            let partConfigurationData = null;
            for (let entry of entries) {
                switch (entry.fileName) {
                    case 'score.gpif':
                        xml = Platform.toString(entry.data, this.settings.importer.encoding);
                        break;
                    case 'BinaryStylesheet':
                        binaryStylesheetData = entry.data;
                        break;
                    case 'PartConfiguration':
                        partConfigurationData = entry.data;
                        break;
                }
            }
            if (!xml) {
                throw new UnsupportedFormatError('No score.gpif found in zip archive');
            }
            // the score.gpif file within this filesystem stores
            // the score information as XML we need to parse.
            Logger.info(this.name, 'Start Parsing score.gpif');
            let gpifParser = new GpifParser();
            gpifParser.parseXml(xml, this.settings);
            Logger.info(this.name, 'score.gpif parsed');
            let score = gpifParser.score;
            if (binaryStylesheetData) {
                Logger.info(this.name, 'Start Parsing BinaryStylesheet');
                let stylesheet = new BinaryStylesheet(binaryStylesheetData);
                stylesheet.apply(score);
                Logger.info(this.name, 'BinaryStylesheet parsed');
            }
            if (partConfigurationData) {
                Logger.info(this.name, 'Start Parsing Part Configuration');
                let partConfigurationParser = new PartConfiguration(partConfigurationData);
                partConfigurationParser.apply(score);
                Logger.info(this.name, 'Part Configuration parsed');
            }
            return score;
        }
    }

    class EndOfReaderError extends Error {
        constructor() {
            super('Unexpected end of data within reader');
        }
    }
    /**
     * This utility public class allows bitwise reading of a stream
     */
    class BitReader {
        constructor(source) {
            this._currentByte = 0;
            this._position = BitReader.ByteSize;
            this._source = source;
        }
        readByte() {
            return this.readBits(8);
        }
        readBytes(count) {
            const bytes = new Uint8Array(count);
            for (let i = 0; i < count; i++) {
                bytes[i] = this.readByte() & 0xff;
            }
            return bytes;
        }
        readBits(count) {
            let bits = 0;
            let i = count - 1;
            while (i >= 0) {
                bits = bits | (this.readBit() << i);
                i--;
            }
            return bits;
        }
        readBitsReversed(count) {
            let bits = 0;
            for (let i = 0; i < count; i++) {
                bits = bits | (this.readBit() << i);
            }
            return bits;
        }
        readBit() {
            // need a new byte?
            if (this._position >= 8) {
                this._currentByte = this._source.readByte();
                if (this._currentByte === -1) {
                    throw new EndOfReaderError();
                }
                this._position = 0;
            }
            // shift the desired byte to the least significant bit and
            // get the value using masking
            const value = (this._currentByte >> (BitReader.ByteSize - this._position - 1)) & 0x01;
            this._position++;
            return value;
        }
        readAll() {
            let all = ByteBuffer.empty();
            try {
                while (true) {
                    all.writeByte(this.readByte() & 0xff);
                }
            }
            catch (e) {
                if (!(e instanceof EndOfReaderError)) {
                    throw e;
                }
            }
            return all.toArray();
        }
    }
    BitReader.ByteSize = 8;

    /**
     * this public class represents a file within the GpxFileSystem
     */
    class GpxFile {
        constructor() {
            this.fileName = '';
            this.fileSize = 0;
            this.data = null;
        }
    }
    /**
     * This public class represents the file system structure
     * stored within a GPX container file.
     */
    class GpxFileSystem {
        /**
         * Creates a new GpxFileSystem instance
         */
        constructor() {
            /**
             * Gets the list of files stored in this FileSystem.
             */
            this.files = [];
            this.files = [];
            this.fileFilter = s => {
                return true;
            };
        }
        /**
         * Load a complete FileSystem to the memory.
         * @param s the binary source to read from.
         * @returns
         */
        load(s) {
            let src = new BitReader(s);
            this.readBlock(src);
        }
        /**
         * Reads the 4 byte header as a string.
         * @param src the BitInput to read from
         * @returns a string with 4 characters representing the header.
         */
        readHeader(src) {
            return this.getString(src.readBytes(4), 0, 4);
        }
        /**
         * Decompresses the given bitinput using the GPX compression format. Only use this method
         * if you are sure the binary data is compressed using the GPX format. Otherwise unexpected
         * behavior can occure.
         * @param src the bitInput to read the data from
         * @param skipHeader true if the header should NOT be included in the result byteset, otherwise false
         * @returns the decompressed byte data. if skipHeader is set to false the BCFS header is included.
         */
        decompress(src, skipHeader = false) {
            let uncompressed = ByteBuffer.empty();
            let buffer;
            let expectedLength = this.getInteger(src.readBytes(4), 0);
            try {
                // as long we reach our expected length we try to decompress, a EOF might occure.
                while (uncompressed.length < expectedLength) {
                    // compression flag
                    let flag = src.readBits(1);
                    if (flag === 1) {
                        // get offset and size of the content we need to read.
                        // compressed does mean we already have read the data and need
                        // to copy it from our uncompressed buffer to the end
                        let wordSize = src.readBits(4);
                        let offset = src.readBitsReversed(wordSize);
                        let size = src.readBitsReversed(wordSize);
                        // the offset is relative to the end
                        let sourcePosition = uncompressed.length - offset;
                        let toRead = Math.min(offset, size);
                        // get the subbuffer storing the data and add it again to the end
                        buffer = uncompressed.getBuffer();
                        uncompressed.write(buffer, sourcePosition, toRead);
                    }
                    else {
                        // on raw content we need to read the data from the source buffer
                        let size = src.readBitsReversed(2);
                        for (let i = 0; i < size; i++) {
                            uncompressed.writeByte(src.readByte());
                        }
                    }
                }
            }
            catch (e) {
                if (!(e instanceof EndOfReaderError)) {
                    throw e;
                }
            }
            buffer = uncompressed.getBuffer();
            let resultOffset = skipHeader ? 4 : 0;
            let resultSize = uncompressed.length - resultOffset;
            let result = new Uint8Array(resultSize);
            let count = resultSize;
            result.set(buffer.subarray(resultOffset, resultOffset + count), 0);
            return result;
        }
        /**
         * Reads a block from the given data source.
         * @param data the data source
         * @returns
         */
        readBlock(data) {
            let header = this.readHeader(data);
            if (header === 'BCFZ') {
                // decompress the data and use this
                // we will skip the header
                this.readUncompressedBlock(this.decompress(data, true));
            }
            else if (header === 'BCFS') {
                this.readUncompressedBlock(data.readAll());
            }
            else {
                throw new UnsupportedFormatError('Unsupported format');
            }
        }
        /**
         * Reads an uncompressed data block into the model.
         * @param data the data store to read from.
         */
        readUncompressedBlock(data) {
            // the uncompressed block contains a list of filesystem entires
            // as long we have data we will try to read more entries
            // the first sector (0x1000 bytes) is empty (filled with 0xFF)
            // so the first sector starts at 0x1000
            // (we already skipped the 4 byte header so we don't have to take care of this)
            let sectorSize = 0x1000;
            let offset = sectorSize;
            // we always need 4 bytes (+3 including offset) to read the type
            while (offset + 3 < data.length) {
                let entryType = this.getInteger(data, offset);
                if (entryType === 2) {
                    // file structure:
                    //   offset |   type   |   size   | what
                    //  --------+----------+----------+------
                    //    0x04  |  string  |  127byte | FileName (zero terminated)
                    //    0x83  |    ?     |    9byte | Unknown
                    //    0x8c  |   int    |    4byte | FileSize
                    //    0x90  |    ?     |    4byte | Unknown
                    //    0x94  |   int[]  |  n*4byte | Indices of the sector containing the data (end is marked with 0)
                    // The sectors marked at 0x94 are absolutely positioned ( 1*0x1000 is sector 1, 2*0x1000 is sector 2,...)
                    let file = new GpxFile();
                    file.fileName = this.getString(data, offset + 0x04, 127);
                    file.fileSize = this.getInteger(data, offset + 0x8c);
                    // store file if needed
                    let storeFile = !this.fileFilter || this.fileFilter(file.fileName);
                    if (storeFile) {
                        this.files.push(file);
                    }
                    // we need to iterate the blocks because we need to move after the last datasector
                    let dataPointerOffset = offset + 0x94;
                    let sector = 0;
                    // this var is storing the sector index
                    let sectorCount = 0;
                    // we're keeping count so we can calculate the offset of the array item
                    // as long we have data blocks we need to iterate them,
                    let fileData = storeFile ? ByteBuffer.withCapactiy(file.fileSize) : null;
                    // tslint:disable-next-line: no-conditional-assignment
                    while ((sector = this.getInteger(data, dataPointerOffset + 4 * sectorCount++)) !== 0) {
                        // the next file entry starts after the last data sector so we
                        // move the offset along
                        offset = sector * sectorSize;
                        // write data only if needed
                        if (storeFile) {
                            fileData.write(data, offset, sectorSize);
                        }
                    }
                    if (storeFile) {
                        // trim data to filesize if needed
                        file.data = new Uint8Array(Math.min(file.fileSize, fileData.length));
                        // we can use the getBuffer here because we are intelligent and know not to read the empty data.
                        let raw = fileData.toArray();
                        file.data.set(raw.subarray(0, 0 + file.data.length), 0);
                    }
                }
                // let's move to the next sector
                offset += sectorSize;
            }
        }
        /**
         * Reads a zeroterminated ascii string from the given source
         * @param data the data source to read from
         * @param offset the offset to start reading from
         * @param length the max length to read
         * @returns the ascii string read from the datasource.
         */
        getString(data, offset, length) {
            let buf = '';
            for (let i = 0; i < length; i++) {
                let code = data[offset + i] & 0xff;
                if (code === 0) {
                    break;
                    // zero terminated string
                }
                buf += String.fromCharCode(code);
            }
            return buf;
        }
        /**
         * Reads an 4 byte signed integer from the given source
         * @param data the data source to read from
         * @param offset offset the offset to start reading from
         * @returns
         */
        getInteger(data, offset) {
            return (data[offset + 3] << 24) | (data[offset + 2] << 16) | (data[offset + 1] << 8) | data[offset];
        }
    }
    GpxFileSystem.HeaderBcFs = 'BCFS';
    GpxFileSystem.HeaderBcFz = 'BCFZ';
    GpxFileSystem.ScoreGpif = 'score.gpif';
    GpxFileSystem.BinaryStylesheet = 'BinaryStylesheet';
    GpxFileSystem.PartConfiguration = 'PartConfiguration';

    /**
     * This ScoreImporter can read Guitar Pro 6 (gpx) files.
     */
    class GpxImporter extends ScoreImporter {
        get name() {
            return 'Guitar Pro 6';
        }
        constructor() {
            super();
        }
        readScore() {
            // at first we need to load the binary file system
            // from the GPX container
            Logger.info(this.name, 'Loading GPX filesystem');
            let fileSystem = new GpxFileSystem();
            fileSystem.fileFilter = s => {
                return s.endsWith('score.gpif') || s.endsWith('BinaryStylesheet') || s.endsWith('PartConfiguration');
            };
            fileSystem.load(this.data);
            Logger.info(this.name, 'GPX filesystem loaded');
            let xml = null;
            let binaryStylesheetData = null;
            let partConfigurationData = null;
            for (let entry of fileSystem.files) {
                switch (entry.fileName) {
                    case 'score.gpif':
                        xml = Platform.toString(entry.data, this.settings.importer.encoding);
                        break;
                    case 'BinaryStylesheet':
                        binaryStylesheetData = entry.data;
                        break;
                    case 'PartConfiguration':
                        partConfigurationData = entry.data;
                        break;
                }
            }
            if (!xml) {
                throw new UnsupportedFormatError('No score.gpif found in GPX');
            }
            // the score.gpif file within this filesystem stores
            // the score information as XML we need to parse.
            Logger.info(this.name, 'Start Parsing score.gpif');
            let gpifParser = new GpifParser();
            gpifParser.parseXml(xml, this.settings);
            Logger.info(this.name, 'score.gpif parsed');
            let score = gpifParser.score;
            if (binaryStylesheetData) {
                Logger.info(this.name, 'Start Parsing BinaryStylesheet');
                let binaryStylesheet = new BinaryStylesheet(binaryStylesheetData);
                binaryStylesheet.apply(score);
                Logger.info(this.name, 'BinaryStylesheet parsed');
            }
            if (partConfigurationData) {
                Logger.info(this.name, 'Start Parsing Part Configuration');
                let partConfiguration = new PartConfiguration(partConfigurationData);
                partConfiguration.apply(score);
                Logger.info(this.name, 'Part Configuration parsed');
            }
            return score;
        }
    }

    class MusicXmlImporter extends ScoreImporter {
        constructor() {
            super();
            this._currentPartGroup = null;
            this._trackFirstMeasureNumber = 0;
            this._maxVoices = 0;
            this._currentDirection = null;
            this._currentChord = null;
            this._divisionsPerQuarterNote = 0;
            this._voiceOfStaff = new Map();
            this._isBeamContinue = false;
            this._previousBeatWasPulled = false;
            this._previousBeat = null;
        }
        get name() {
            return 'MusicXML';
        }
        readScore() {
            this._trackById = new Map();
            this._partGroups = new Map();
            this._tieStarts = [];
            this._tieStartIds = new Map();
            this._slurStarts = new Map();
            let xml = Platform.toString(this.data.readAll(), this.settings.importer.encoding);
            let dom;
            try {
                dom = new XmlDocument(xml);
            }
            catch (e) {
                throw new UnsupportedFormatError('Unsupported format');
            }
            this._score = new Score();
            this._score.tempo = 120;
            this.parseDom(dom);
            // merge partgroups into a single track with multiple staves
            if (this.settings.importer.mergePartGroupsInMusicXml) {
                this.mergePartGroups();
            }
            this._score.finish(this.settings);
            // the structure of MusicXML does not allow live creation of the groups,
            this._score.rebuildRepeatGroups();
            return this._score;
        }
        mergePartGroups() {
            let anyMerged = false;
            for (let kvp of this._partGroups) {
                let tracks = kvp[1];
                if (tracks.length > 1) {
                    this.mergeGroup(tracks);
                    anyMerged = true;
                }
            }
            // if any groups were merged, we need to rebuild the indexes
            if (anyMerged) {
                for (let i = 0; i < this._score.tracks.length; i++) {
                    this._score.tracks[i].index = i;
                }
            }
        }
        mergeGroup(partGroup) {
            let primaryTrack = partGroup[0];
            for (let i = 1; i < partGroup.length; i++) {
                // merge staves over to primary track
                let secondaryTrack = partGroup[i];
                for (let staff of secondaryTrack.staves) {
                    primaryTrack.addStaff(staff);
                }
                // remove track from score
                let trackIndex = this._score.tracks.indexOf(secondaryTrack);
                this._score.tracks.splice(trackIndex, 1);
            }
        }
        parseDom(dom) {
            let root = dom.documentElement;
            if (!root) {
                throw new UnsupportedFormatError('Unsupported format');
            }
            switch (root.localName) {
                case 'score-partwise':
                    this.parsePartwise(root);
                    break;
                case 'score-timewise':
                    // ParseTimewise(root);
                    break;
                default:
                    throw new UnsupportedFormatError('Unsupported format');
            }
        }
        parsePartwise(element) {
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'work':
                            this.parseWork(c);
                            break;
                        case 'movement-title':
                            this._score.title = c.innerText;
                            break;
                        case 'identification':
                            this.parseIdentification(c);
                            break;
                        case 'part-list':
                            this.parsePartList(c);
                            break;
                        case 'part':
                            this.parsePart(c);
                            break;
                    }
                }
            }
        }
        parseWork(element) {
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'work-title':
                            this._score.title = c.innerText;
                            break;
                    }
                }
            }
        }
        parsePart(element) {
            let id = element.getAttribute('id');
            if (!this._trackById.has(id)) {
                if (this._trackById.size === 1) {
                    for (let kvp of this._trackById) {
                        let t = kvp[1];
                        if (t.staves.length === 0 || t.staves[0].bars.length === 0) {
                            id = kvp[0];
                        }
                    }
                    if (!this._trackById.has(id)) {
                        return;
                    }
                }
                else {
                    return;
                }
            }
            let track = this._trackById.get(id);
            let isFirstMeasure = true;
            this._maxVoices = 0;
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'measure':
                            if (this.parseMeasure(c, track, isFirstMeasure)) {
                                isFirstMeasure = false;
                            }
                            break;
                    }
                }
            }
            // ensure voices for all bars
            for (let staff of track.staves) {
                for (let bar of staff.bars) {
                    this.ensureVoices(bar);
                }
            }
        }
        parseMeasure(element, track, isFirstMeasure) {
            if (element.getAttribute('implicit') === 'yes' && element.getElementsByTagName('note', false).length === 0) {
                return false;
            }
            let barIndex = 0;
            if (isFirstMeasure) {
                this._divisionsPerQuarterNote = 0;
                this._trackFirstMeasureNumber = parseInt(element.getAttribute('number'));
                if (!this._trackFirstMeasureNumber) {
                    this._trackFirstMeasureNumber = 0;
                }
                barIndex = 0;
            }
            else {
                barIndex = parseInt(element.getAttribute('number'));
                if (!barIndex) {
                    return false;
                }
                barIndex -= this._trackFirstMeasureNumber;
            }
            // try to find out the number of staffs required
            if (isFirstMeasure) {
                let attributes = element.getElementsByTagName('attributes', false);
                if (attributes.length > 0) {
                    let stavesElements = attributes[0].getElementsByTagName('staves', false);
                    if (stavesElements.length > 0) {
                        let staves = parseInt(stavesElements[0].innerText);
                        track.ensureStaveCount(staves);
                    }
                }
            }
            // create empty bars to the current index
            let bars = new Array(track.staves.length);
            let masterBar = null;
            for (let b = track.staves[0].bars.length; b <= barIndex; b++) {
                for (let s = 0; s < track.staves.length; s++) {
                    let bar = (bars[s] = new Bar());
                    if (track.staves[s].bars.length > 0) {
                        let previousBar = track.staves[s].bars[track.staves[s].bars.length - 1];
                        bar.clef = previousBar.clef;
                    }
                    masterBar = this.getOrCreateMasterBar(barIndex);
                    track.staves[s].addBar(bar);
                    this.ensureVoices(bar);
                }
            }
            let attributesParsed = false;
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'note':
                            this.parseNoteBeat(c, bars);
                            break;
                        case 'forward':
                            this.parseForward(c, bars);
                            break;
                        case 'direction':
                            this.parseDirection(c, masterBar);
                            break;
                        case 'attributes':
                            if (!attributesParsed) {
                                this.parseAttributes(c, bars, masterBar, track);
                                attributesParsed = true;
                            }
                            break;
                        case 'harmony':
                            this.parseHarmony(c, track);
                            break;
                        case 'sound':
                            // TODO
                            break;
                        case 'barline':
                            this.parseBarline(c, masterBar);
                            break;
                    }
                }
            }
            return true;
        }
        ensureVoices(bar) {
            while (bar.voices.length < this._maxVoices) {
                let emptyVoice = new Voice();
                bar.addVoice(emptyVoice);
                let emptyBeat = new Beat();
                emptyBeat.isEmpty = true;
                emptyBeat.chordId = this._currentChord;
                emptyVoice.addBeat(emptyBeat);
            }
        }
        getOrCreateBeat(element, bars, chord) {
            let voiceIndex = 0;
            let voiceNodes = element.getElementsByTagName('voice', false);
            if (voiceNodes.length > 0) {
                voiceIndex = parseInt(voiceNodes[0].innerText) - 1;
            }
            let previousBeatWasPulled = this._previousBeatWasPulled;
            this._previousBeatWasPulled = false;
            let staffElement = element.getElementsByTagName('staff', false);
            let staff = 1;
            if (staffElement.length > 0) {
                staff = parseInt(staffElement[0].innerText);
                // in case we have a beam with a staff-jump we pull the note to the previous staff
                if ((this._isBeamContinue || previousBeatWasPulled) &&
                    this._previousBeat.voice.bar.staff.index !== staff - 1) {
                    staff = this._previousBeat.voice.bar.staff.index + 1;
                    this._previousBeatWasPulled = true;
                }
                let staffId = bars[0].staff.track.index + '-' + staff;
                if (!this._voiceOfStaff.has(staffId)) {
                    this._voiceOfStaff.set(staffId, voiceIndex);
                }
            }
            staff--;
            let bar;
            if (staff < 0) {
                bar = bars[0];
            }
            else if (staff >= bars.length) {
                bar = bars[bars.length - 1];
            }
            else {
                bar = bars[staff];
            }
            let beat;
            let voice = this.getOrCreateVoice(bar, voiceIndex);
            if ((chord && voice.beats.length > 0) || (voice.beats.length === 1 && voice.isEmpty)) {
                beat = voice.beats[voice.beats.length - 1];
            }
            else {
                beat = new Beat();
                beat.isEmpty = false;
                voice.addBeat(beat);
            }
            this._isBeamContinue = false;
            this._previousBeat = beat;
            return beat;
        }
        parseForward(element, bars) {
            let beat = this.getOrCreateBeat(element, bars, false);
            let durationInDivisions = parseInt(element.findChildElement('duration').innerText);
            let duration = (durationInDivisions * Duration.Quarter) / this._divisionsPerQuarterNote;
            let durations = [
                Duration.SixtyFourth,
                Duration.ThirtySecond,
                Duration.Sixteenth,
                Duration.Eighth,
                Duration.Quarter,
                Duration.Half,
                Duration.Whole
            ];
            for (let d of durations) {
                if (duration >= d) {
                    beat.duration = d;
                    duration -= d;
                    break;
                }
            }
            beat.isEmpty = false;
        }
        parseStaffDetails(element, track) {
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'staff-lines':
                            for (let staff of track.staves) {
                                staff.tuning = new Array(parseInt(c.innerText)).fill(0);
                            }
                            break;
                        case 'staff-tuning':
                            this.parseStaffTuning(c, track);
                            break;
                    }
                }
            }
            for (let staff of track.staves) {
                if (this.isEmptyTuning(staff.tuning)) {
                    staff.tuning = [];
                }
            }
        }
        parseStaffTuning(element, track) {
            let line = parseInt(element.getAttribute('line'));
            let tuningStep = 'C';
            let tuningOctave = '';
            let tuningAlter = 0;
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'tuning-step':
                            tuningStep = c.innerText;
                            break;
                        case 'tuning-alter':
                            tuningAlter = parseInt(c.innerText);
                            break;
                        case 'tuning-octave':
                            tuningOctave = c.innerText;
                            break;
                    }
                }
            }
            let tuning = ModelUtils.getTuningForText(tuningStep + tuningOctave) + tuningAlter;
            for (let staff of track.staves) {
                staff.tuning[staff.tuning.length - line] = tuning;
            }
        }
        parseHarmony(element, track) {
            let rootStep = null;
            let rootAlter = '';
            // let kind: string | null = null;
            // let kindText: string | null = null;
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'root':
                            for (let rootChild of c.childNodes) {
                                if (rootChild.nodeType === XmlNodeType.Element) {
                                    switch (rootChild.localName) {
                                        case 'root-step':
                                            rootStep = rootChild.innerText;
                                            break;
                                        case 'root-alter':
                                            switch (parseInt(c.innerText)) {
                                                case -2:
                                                    rootAlter = ' bb';
                                                    break;
                                                case -1:
                                                    rootAlter = ' b';
                                                    break;
                                                case 0:
                                                    rootAlter = '';
                                                    break;
                                                case 1:
                                                    rootAlter = ' #';
                                                    break;
                                                case 2:
                                                    rootAlter = ' ##';
                                                    break;
                                            }
                                            break;
                                    }
                                }
                            }
                            break;
                    }
                }
            }
            let chord = new Chord();
            chord.name = rootStep + rootAlter;
            // TODO: find proper names for the rest
            // switch (kind)
            // {
            //    // triads
            //    case "major":
            //        break;
            //    case "minor":
            //        chord.Name += "m";
            //        break;
            //    // Sevenths
            //    case "augmented":
            //        break;
            //    case "diminished":
            //        break;
            //    case "dominant":
            //        break;
            //    case "major-seventh":
            //        chord.Name += "7M";
            //        break;
            //    case "minor-seventh":
            //        chord.Name += "m7";
            //        break;
            //    case "diminished-seventh":
            //        break;
            //    case "augmented-seventh":
            //        break;
            //    case "half-diminished":
            //        break;
            //    case "major-minor":
            //        break;
            //    // Sixths
            //    case "major-sixth":
            //        break;
            //    case "minor-sixth":
            //        break;
            //    // Ninths
            //    case "dominant-ninth":
            //        break;
            //    case "major-ninth":
            //        break;
            //    case "minor-ninth":
            //        break;
            //    // 11ths
            //    case "dominant-11th":
            //        break;
            //    case "major-11th":
            //        break;
            //    case "minor-11th":
            //        break;
            //    // 13ths
            //    case "dominant-13th":
            //        break;
            //    case "major-13th":
            //        break;
            //    case "minor-13th":
            //        break;
            //    // Suspended
            //    case "suspended-second":
            //        break;
            //    case "suspended-fourth":
            //        break;
            //    // Functional sixths
            //    case "Neapolitan":
            //        break;
            //    case "Italian":
            //        break;
            //    case "French":
            //        break;
            //    case "German":
            //        break;
            //    // Other
            //    case "pedal":
            //        break;
            //    case "power":
            //        break;
            //    case "Tristan":
            //        break;
            // }
            // var degree = element.GetElementsByTagName("degree");
            // if (degree.Length > 0)
            // {
            //    var degreeValue = Platform.GetNodeValue(degree[0].GetElementsByTagName("degree-value")[0]);
            //    var degreeAlter = Platform.GetNodeValue(degree[0].GetElementsByTagName("degree-alter")[0]);
            //    var degreeType = Platform.GetNodeValue(degree[0].GetElementsByTagName("degree-type")[0]);
            //    if (!string.IsNullOrEmpty(degreeType))
            //    {
            //        chord.Name += degreeType;
            //    }
            //    if (!string.IsNullOrEmpty(degreeValue))
            //    {
            //        chord.Name += "#" + degreeValue;
            //    }
            // }
            this._currentChord = Platform.newGuid();
            for (let staff of track.staves) {
                staff.addChord(this._currentChord, chord);
            }
        }
        parseBarline(element, masterBar) {
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'repeat':
                            this.parseRepeat(c, masterBar);
                            break;
                        case 'ending':
                            this.parseEnding(c, masterBar);
                            break;
                    }
                }
            }
        }
        parseEnding(element, masterBar) {
            let num = parseInt(element.getAttribute('number'));
            if (num > 0) {
                --num;
                masterBar.alternateEndings |= (0x01 << num) & 0xff;
            }
        }
        parseRepeat(element, masterBar) {
            let direction = element.getAttribute('direction');
            let times = parseInt(element.getAttribute('times'));
            if (times < 0 || isNaN(times)) {
                times = 2;
            }
            if (direction === 'backward') {
                masterBar.repeatCount = times;
            }
            else if (direction === 'forward') {
                masterBar.isRepeatStart = true;
            }
        }
        parseNoteBeat(element, bars) {
            let chord = element.getElementsByTagName('chord', false).length > 0;
            let beat = this.getOrCreateBeat(element, bars, chord);
            if (!beat.chordId && this._currentChord) {
                beat.chordId = this._currentChord;
                this._currentChord = null;
            }
            if (this._currentDirection) {
                beat.text = this._currentDirection;
                this._currentDirection = null;
            }
            let note = new Note();
            beat.voice.isEmpty = false;
            beat.isEmpty = false;
            beat.addNote(note);
            beat.dots = 0;
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'grace':
                            // var slash = e.GetAttribute("slash");
                            // var makeTime = Platform.ParseInt(e.GetAttribute("make-time"));
                            // var stealTimePrevious = Platform.ParseInt(e.GetAttribute("steal-time-previous"));
                            // var stealTimeFollowing = Platform.ParseInt(e.GetAttribute("steal-time-following"));
                            beat.graceType = GraceType.BeforeBeat;
                            beat.duration = Duration.ThirtySecond;
                            break;
                        case 'duration':
                            if (beat.isRest) {
                                // unit: divisions per quarter note
                                let duration = parseInt(c.innerText);
                                switch (duration) {
                                    case 1:
                                        beat.duration = Duration.Whole;
                                        break;
                                    case 2:
                                        beat.duration = Duration.Half;
                                        break;
                                    case 4:
                                        beat.duration = Duration.Quarter;
                                        break;
                                    case 8:
                                        beat.duration = Duration.Eighth;
                                        break;
                                    case 16:
                                        beat.duration = Duration.Sixteenth;
                                        break;
                                    case 32:
                                        beat.duration = Duration.ThirtySecond;
                                        break;
                                    case 64:
                                        beat.duration = Duration.SixtyFourth;
                                        break;
                                    default:
                                        beat.duration = Duration.Quarter;
                                        break;
                                }
                            }
                            break;
                        case 'tie':
                            this.parseTied(c, note);
                            break;
                        case 'cue':
                            // not supported
                            break;
                        case 'instrument':
                            // not supported
                            break;
                        case 'type':
                            beat.duration = this.getDuration(c.innerText);
                            if (beat.graceType !== GraceType.None && beat.duration < Duration.Sixteenth) {
                                beat.duration = Duration.Eighth;
                            }
                            break;
                        case 'dot':
                            beat.dots++;
                            break;
                        case 'accidental':
                            this.parseAccidental(c, note);
                            break;
                        case 'time-modification':
                            this.parseTimeModification(c, beat);
                            break;
                        case 'stem':
                            // not supported
                            break;
                        case 'notehead':
                            if (c.getAttribute('parentheses') === 'yes') {
                                note.isGhost = true;
                            }
                            break;
                        case 'beam':
                            let beamMode = c.innerText;
                            if (beamMode === 'continue') {
                                this._isBeamContinue = true;
                            }
                            break;
                        case 'notations':
                            this.parseNotations(c, beat, note);
                            break;
                        case 'lyric':
                            this.parseLyric(c, beat);
                            break;
                        case 'pitch':
                            this.parsePitch(c, note);
                            break;
                        case 'unpitched':
                            this.parseUnpitched(c, note);
                            break;
                        case 'rest':
                            beat.isEmpty = false;
                            beat.notes = [];
                            break;
                    }
                }
            }
            // check if new note is duplicate on string
            if (note.isStringed) {
                for (let i = 0; i < beat.notes.length; i++) {
                    if (beat.notes[i].string === note.string && beat.notes[i] !== note) {
                        beat.removeNote(note);
                        break;
                    }
                }
            }
        }
        getDuration(text) {
            switch (text) {
                case '256th':
                case '128th':
                case '64th':
                    return Duration.SixtyFourth;
                case '32nd':
                    return Duration.ThirtySecond;
                case '16th':
                    return Duration.Sixteenth;
                case 'eighth':
                    return Duration.Eighth;
                case 'quarter':
                    return Duration.Quarter;
                case 'half':
                    return Duration.Half;
                case 'long':
                case 'breve':
                case 'whole':
                    return Duration.Whole;
            }
            return Duration.Quarter;
        }
        parseLyric(element, beat) {
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'text':
                            if (beat.text) {
                                beat.text += ' ' + c.innerText;
                            }
                            else {
                                beat.text = c.innerText;
                            }
                            break;
                    }
                }
            }
        }
        parseAccidental(element, note) {
            switch (element.innerText) {
                case 'sharp':
                    note.accidentalMode = NoteAccidentalMode.ForceSharp;
                    break;
                case 'natural':
                    note.accidentalMode = NoteAccidentalMode.ForceNatural;
                    break;
                case 'flat':
                    note.accidentalMode = NoteAccidentalMode.ForceFlat;
                    break;
            }
        }
        parseTied(element, note) {
            if (element.getAttribute('type') === 'start') {
                if (!this._tieStartIds.has(note.id)) {
                    this._tieStartIds.set(note.id, true);
                    this._tieStarts.push(note);
                }
            }
            else if (element.getAttribute('type') === 'stop' && this._tieStarts.length > 0 && !note.isTieDestination) {
                note.isTieDestination = true;
                note.tieOrigin = this._tieStarts[0];
                this._tieStarts.splice(0, 1);
                this._tieStartIds.delete(note.id);
            }
        }
        parseNotations(element, beat, note) {
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'articulations':
                            this.parseArticulations(c, note);
                            break;
                        case 'tied':
                            this.parseTied(c, note);
                            break;
                        case 'slide':
                        case 'glissando':
                            if (c.getAttribute('type') === 'start') {
                                note.slideOutType = SlideOutType.Shift;
                            }
                            break;
                        case 'dynamics':
                            this.parseDynamics(c, beat);
                            break;
                        case 'technical':
                            this.parseTechnical(c, note);
                            break;
                        case 'ornaments':
                            this.parseOrnaments(c, note);
                            break;
                        case 'slur':
                            let slurNumber = c.getAttribute('number');
                            if (!slurNumber) {
                                slurNumber = '1';
                            }
                            switch (c.getAttribute('type')) {
                                case 'start':
                                    this._slurStarts.set(slurNumber, note);
                                    break;
                                case 'stop':
                                    if (this._slurStarts.has(slurNumber)) {
                                        note.isSlurDestination = true;
                                        let slurStart = this._slurStarts.get(slurNumber);
                                        slurStart.slurDestination = note;
                                        note.slurOrigin = note;
                                    }
                                    break;
                            }
                            break;
                    }
                }
            }
        }
        parseOrnaments(element, note) {
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'tremolo':
                            let tremoloSpeed = parseInt(c.innerText);
                            switch (tremoloSpeed) {
                                case 1:
                                    note.beat.tremoloSpeed = Duration.Eighth;
                                    break;
                                case 2:
                                    note.beat.tremoloSpeed = Duration.Sixteenth;
                                    break;
                                case 3:
                                    note.beat.tremoloSpeed = Duration.ThirtySecond;
                                    break;
                            }
                            break;
                    }
                }
            }
        }
        parseTechnical(element, note) {
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'string':
                            note.string = parseInt(c.innerText);
                            if (note.string !== -2147483648) {
                                note.string = note.beat.voice.bar.staff.tuning.length - note.string + 1;
                            }
                            break;
                        case 'fret':
                            note.fret = parseInt(c.innerText);
                            break;
                        case 'down-bow':
                            note.beat.pickStroke = PickStroke.Down;
                            break;
                        case 'up-bow':
                            note.beat.pickStroke = PickStroke.Up;
                            break;
                    }
                }
            }
            if (note.string === -2147483648 || note.fret === -2147483648) {
                note.string = -1;
                note.fret = -1;
            }
        }
        parseArticulations(element, note) {
            for (let c of element.childNodes) {
                switch (c.localName) {
                    case 'accent':
                        note.accentuated = AccentuationType.Normal;
                        break;
                    case 'strong-accent':
                        note.accentuated = AccentuationType.Heavy;
                        break;
                    case 'staccato':
                    case 'detached-legato':
                        note.isStaccato = true;
                        break;
                }
            }
        }
        parseDynamics(element, beat) {
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'p':
                            beat.dynamics = DynamicValue.P;
                            break;
                        case 'pp':
                            beat.dynamics = DynamicValue.PP;
                            break;
                        case 'ppp':
                            beat.dynamics = DynamicValue.PPP;
                            break;
                        case 'f':
                            beat.dynamics = DynamicValue.F;
                            break;
                        case 'ff':
                            beat.dynamics = DynamicValue.FF;
                            break;
                        case 'fff':
                            beat.dynamics = DynamicValue.FFF;
                            break;
                        case 'mp':
                            beat.dynamics = DynamicValue.MP;
                            break;
                        case 'mf':
                            beat.dynamics = DynamicValue.MF;
                            break;
                    }
                }
            }
        }
        parseTimeModification(element, beat) {
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'actual-notes':
                            beat.tupletNumerator = parseInt(c.innerText);
                            break;
                        case 'normal-notes':
                            beat.tupletDenominator = parseInt(c.innerText);
                            break;
                    }
                }
            }
        }
        parseUnpitched(element, note) {
            let step = '';
            let semitones = 0;
            let octave = 0;
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'display-step':
                            step = c.innerText;
                            break;
                        case 'display-alter':
                            semitones = parseInt(c.innerText);
                            break;
                        case 'display-octave':
                            // 0-9, 4 for middle C
                            octave = parseInt(c.innerText);
                            break;
                    }
                }
            }
            let value = octave * 12 + ModelUtils.getToneForText(step) + semitones;
            note.octave = (value / 12) | 0;
            note.tone = value - note.octave * 12;
        }
        parsePitch(element, note) {
            let step = '';
            let semitones = 0;
            let octave = 0;
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'step':
                            step = c.innerText;
                            break;
                        case 'alter':
                            semitones = parseFloat(c.innerText);
                            if (isNaN(semitones)) {
                                semitones = 0;
                            }
                            break;
                        case 'octave':
                            // 0-9, 4 for middle C
                            octave = parseInt(c.innerText) + 1;
                            break;
                    }
                }
            }
            let value = octave * 12 + ModelUtils.getToneForText(step) + (semitones | 0);
            note.octave = (value / 12) | 0;
            note.tone = value - note.octave * 12;
        }
        getOrCreateVoice(bar, index) {
            if (index < bar.voices.length) {
                return bar.voices[index];
            }
            for (let i = bar.voices.length; i <= index; i++) {
                bar.addVoice(new Voice());
            }
            this._maxVoices = Math.max(this._maxVoices, bar.voices.length);
            return bar.voices[index];
        }
        parseDirection(element, masterBar) {
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'sound':
                            let tempo = c.getAttribute('tempo');
                            if (tempo) {
                                let tempoAutomation = new Automation();
                                tempoAutomation.isLinear = true;
                                tempoAutomation.type = AutomationType.Tempo;
                                tempoAutomation.value = parseInt(tempo);
                                masterBar.tempoAutomation = tempoAutomation;
                            }
                            break;
                        case 'direction-type':
                            let directionType = c.firstElement;
                            switch (directionType.localName) {
                                case 'words':
                                    this._currentDirection = directionType.innerText;
                                    break;
                                case 'metronome':
                                    this.parseMetronome(directionType, masterBar);
                                    break;
                            }
                            break;
                    }
                }
            }
        }
        parseMetronome(element, masterBar) {
            let unit = Duration.Quarter;
            let perMinute = 120;
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'beat-unit':
                            unit = this.getDuration(c.innerText);
                            break;
                        case 'per-minute':
                            perMinute = parseInt(c.innerText);
                            break;
                    }
                }
            }
            let tempoAutomation = (masterBar.tempoAutomation = new Automation());
            tempoAutomation.type = AutomationType.Tempo;
            tempoAutomation.value = perMinute * ((unit / 4) | 0);
        }
        parseAttributes(element, bars, masterBar, track) {
            let num = 0;
            let hasTime = false;
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'divisions':
                            this._divisionsPerQuarterNote = parseInt(c.innerText);
                            break;
                        case 'key':
                            this.parseKey(c, masterBar);
                            break;
                        case 'time':
                            this.parseTime(c, masterBar);
                            hasTime = true;
                            break;
                        case 'clef':
                            num = parseInt(c.getAttribute('number'));
                            if (isNaN(num)) {
                                num = 1;
                            }
                            this.parseClef(c, bars[num - 1]);
                            break;
                        case 'staff-details':
                            this.parseStaffDetails(c, track);
                            break;
                        case 'transpose':
                            this.parseTranspose(c, track);
                            break;
                    }
                }
            }
            if (!hasTime) {
                masterBar.timeSignatureCommon = true;
            }
        }
        parseTranspose(element, track) {
            let semitones = 0;
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'chromatic':
                            semitones += parseInt(c.innerText);
                            break;
                        case 'octave-change':
                            semitones += parseInt(c.innerText) * 12;
                            break;
                    }
                }
            }
            for (let staff of track.staves) {
                staff.transpositionPitch = semitones;
            }
        }
        parseClef(element, bar) {
            let sign = 's';
            let line = 0;
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'sign':
                            sign = c.innerText.toLowerCase();
                            break;
                        case 'line':
                            line = parseInt(c.innerText);
                            break;
                        case 'clef-octave-change':
                            switch (parseInt(c.innerText)) {
                                case -2:
                                    bar.clefOttava = Ottavia._15mb;
                                    break;
                                case -1:
                                    bar.clefOttava = Ottavia._8vb;
                                    break;
                                case 1:
                                    bar.clefOttava = Ottavia._8va;
                                    break;
                                case 2:
                                    bar.clefOttava = Ottavia._15mb;
                                    break;
                            }
                            break;
                    }
                }
            }
            switch (sign) {
                case 'g':
                    bar.clef = Clef.G2;
                    break;
                case 'f':
                    bar.clef = Clef.F4;
                    break;
                case 'c':
                    if (line === 3) {
                        bar.clef = Clef.C3;
                    }
                    else {
                        bar.clef = Clef.C4;
                    }
                    break;
                case 'percussion':
                    bar.clef = Clef.Neutral;
                    bar.staff.isPercussion = true;
                    break;
                case 'tab':
                    bar.clef = Clef.G2;
                    bar.staff.showTablature = true;
                    break;
                default:
                    bar.clef = Clef.G2;
                    break;
            }
        }
        parseTime(element, masterBar) {
            if (element.getAttribute('symbol') === 'common') {
                masterBar.timeSignatureCommon = true;
            }
            let beatsParsed = false;
            let beatTypeParsed = false;
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    let v = c.innerText;
                    switch (c.localName) {
                        case 'beats':
                            if (!beatsParsed) {
                                if (v.indexOf('+') === -1) {
                                    masterBar.timeSignatureNumerator = parseInt(v);
                                }
                                else {
                                    masterBar.timeSignatureNumerator = 4;
                                }
                                beatsParsed = true;
                            }
                            break;
                        case 'beat-type':
                            if (!beatTypeParsed) {
                                if (v.indexOf('+') === -1) {
                                    masterBar.timeSignatureDenominator = parseInt(v);
                                }
                                else {
                                    masterBar.timeSignatureDenominator = 4;
                                }
                                beatTypeParsed = true;
                            }
                            break;
                    }
                }
            }
        }
        parseKey(element, masterBar) {
            let fifths = -2147483648;
            //let keyStep: number = -2147483648;
            //let keyAlter: number = -2147483648;
            let mode = '';
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'fifths':
                            fifths = parseInt(c.innerText);
                            break;
                        case 'key-step':
                            //keyStep = parseInt(c.innerText);
                            break;
                        case 'key-alter':
                            //keyAlter = parseInt(c.innerText);
                            break;
                        case 'mode':
                            mode = c.innerText;
                            break;
                    }
                }
            }
            if (-7 <= fifths && fifths <= 7) {
                // TODO: check if this is conrrect
                masterBar.keySignature = fifths;
            }
            else {
                masterBar.keySignature = KeySignature.C;
                // TODO: map keyStep/keyAlter to internal keysignature
            }
            if (mode === 'minor') {
                masterBar.keySignatureType = KeySignatureType.Minor;
            }
            else {
                masterBar.keySignatureType = KeySignatureType.Major;
            }
        }
        getOrCreateMasterBar(index) {
            if (index < this._score.masterBars.length) {
                return this._score.masterBars[index];
            }
            for (let i = this._score.masterBars.length; i <= index; i++) {
                let mb = new MasterBar();
                if (this._score.masterBars.length > 0) {
                    let prev = this._score.masterBars[this._score.masterBars.length - 1];
                    mb.timeSignatureDenominator = prev.timeSignatureDenominator;
                    mb.timeSignatureNumerator = prev.timeSignatureNumerator;
                    mb.keySignature = prev.keySignature;
                    mb.keySignatureType = prev.keySignatureType;
                }
                this._score.addMasterBar(mb);
            }
            return this._score.masterBars[index];
        }
        parseIdentification(element) {
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'creator':
                            if (c.getAttribute('type') === 'composer') {
                                this._score.music = c.innerText;
                            }
                            break;
                        case 'rights':
                            if (this._score.copyright) {
                                this._score.copyright += '\n';
                            }
                            this._score.copyright += c.innerText;
                            break;
                    }
                }
            }
        }
        parsePartList(element) {
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'part-group':
                            this.parsePartGroup(c);
                            break;
                        case 'score-part':
                            this.parseScorePart(c);
                            break;
                    }
                }
            }
        }
        parsePartGroup(element) {
            let type = element.getAttribute('type');
            switch (type) {
                case 'start':
                    this._currentPartGroup = element.getAttribute('number');
                    this._partGroups.set(this._currentPartGroup, []);
                    break;
                case 'stop':
                    this._currentPartGroup = null;
                    break;
            }
        }
        parseScorePart(element) {
            let id = element.getAttribute('id');
            let track = new Track();
            track.ensureStaveCount(1);
            let staff = track.staves[0];
            staff.showStandardNotation = true;
            this._trackById.set(id, track);
            this._score.addTrack(track);
            if (this._currentPartGroup) {
                this._partGroups.get(this._currentPartGroup).push(track);
            }
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'part-name':
                            track.name = c.innerText;
                            break;
                        case 'part-abbreviation':
                            track.shortName = c.innerText;
                            break;
                        case 'midi-instrument':
                            this.parseMidiInstrument(c, track);
                            break;
                    }
                }
            }
            if (this.isEmptyTuning(track.staves[0].tuning)) {
                track.staves[0].tuning = [];
            }
        }
        isEmptyTuning(tuning) {
            if (!tuning) {
                return true;
            }
            for (let i = 0; i < tuning.length; i++) {
                if (tuning[i] !== 0) {
                    return false;
                }
            }
            return true;
        }
        parseMidiInstrument(element, track) {
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'midi-channel':
                            track.playbackInfo.primaryChannel = parseInt(c.innerText);
                            break;
                        case 'midi-program':
                            track.playbackInfo.program = parseInt(c.innerText);
                            break;
                        case 'midi-volume':
                            track.playbackInfo.volume = parseInt(c.innerText);
                            break;
                    }
                }
            }
        }
    }

    /**
     * Lists all midi events.
     */
    var MidiEventType;
    (function (MidiEventType) {
        /**
         * A note is released.
         */
        MidiEventType[MidiEventType["NoteOff"] = 128] = "NoteOff";
        /**
         * A note is started.
         */
        MidiEventType[MidiEventType["NoteOn"] = 144] = "NoteOn";
        /**
         * The pressure that was used to play the note.
         */
        MidiEventType[MidiEventType["NoteAftertouch"] = 160] = "NoteAftertouch";
        /**
         * Change of a midi controller
         */
        MidiEventType[MidiEventType["Controller"] = 176] = "Controller";
        /**
         * Change of a midi program
         */
        MidiEventType[MidiEventType["ProgramChange"] = 192] = "ProgramChange";
        /**
         * The pressure that should be applied to the whole channel.
         */
        MidiEventType[MidiEventType["ChannelAftertouch"] = 208] = "ChannelAftertouch";
        /**
         * A change of the audio pitch.
         */
        MidiEventType[MidiEventType["PitchBend"] = 224] = "PitchBend";
        /**
         * A meta event. See <see cref="MetaEventTypeEnum"/> for details.
         */
        MidiEventType[MidiEventType["Meta"] = 255] = "Meta";
    })(MidiEventType || (MidiEventType = {}));
    /**
     * Represents a midi event.
     */
    class MidiEvent {
        /**
         * Initializes a new instance of the {@link MidiEvent} class.
         * @param tick The absolute midi ticks of this event..
         * @param status The status information of this event.
         * @param data1 The first data component of this midi event.
         * @param data2 The second data component of this midi event.
         */
        constructor(tick, status, data1, data2) {
            this.tick = tick;
            this.message = status | (data1 << 8) | (data2 << 16);
        }
        get channel() {
            return this.message & 0x000000f;
        }
        get command() {
            return (this.message & 0x00000f0);
        }
        get data1() {
            return (this.message & 0x000ff00) >> 8;
        }
        set data1(value) {
            this.message &= ~0x000ff00;
            this.message |= value << 8;
        }
        get data2() {
            return (this.message & 0x0ff0000) >> 16;
        }
        set data2(value) {
            this.message &= ~0x0ff0000;
            this.message |= value << 16;
        }
        /**
         * Writes the midi event as binary into the given stream.
         * @param s The stream to write to.
         */
        writeTo(s) {
            let b = new Uint8Array([
                (this.message >> 24) & 0xff,
                (this.message >> 16) & 0xff,
                (this.message >> 8) & 0xff,
                this.message & 0xff
            ]);
            s.write(b, 0, b.length);
        }
    }

    var MetaEventType;
    (function (MetaEventType) {
        MetaEventType[MetaEventType["SequenceNumber"] = 0] = "SequenceNumber";
        MetaEventType[MetaEventType["TextEvent"] = 1] = "TextEvent";
        MetaEventType[MetaEventType["CopyrightNotice"] = 2] = "CopyrightNotice";
        MetaEventType[MetaEventType["SequenceOrTrackName"] = 3] = "SequenceOrTrackName";
        MetaEventType[MetaEventType["InstrumentName"] = 4] = "InstrumentName";
        MetaEventType[MetaEventType["LyricText"] = 5] = "LyricText";
        MetaEventType[MetaEventType["MarkerText"] = 6] = "MarkerText";
        MetaEventType[MetaEventType["CuePoint"] = 7] = "CuePoint";
        MetaEventType[MetaEventType["PatchName"] = 8] = "PatchName";
        MetaEventType[MetaEventType["PortName"] = 9] = "PortName";
        MetaEventType[MetaEventType["MidiChannel"] = 32] = "MidiChannel";
        MetaEventType[MetaEventType["MidiPort"] = 33] = "MidiPort";
        MetaEventType[MetaEventType["EndOfTrack"] = 47] = "EndOfTrack";
        MetaEventType[MetaEventType["Tempo"] = 81] = "Tempo";
        MetaEventType[MetaEventType["SmpteOffset"] = 84] = "SmpteOffset";
        MetaEventType[MetaEventType["TimeSignature"] = 88] = "TimeSignature";
        MetaEventType[MetaEventType["KeySignature"] = 89] = "KeySignature";
        MetaEventType[MetaEventType["SequencerSpecific"] = 127] = "SequencerSpecific";
    })(MetaEventType || (MetaEventType = {}));
    class MetaEvent extends MidiEvent {
        get channel() {
            return -1;
        }
        get command() {
            return (this.message & 0x00000ff);
        }
        get metaStatus() {
            return this.data1;
        }
        constructor(delta, status, data1, data2) {
            super(delta, status, data1, data2);
        }
    }

    class SynthEvent {
        constructor(eventIndex, e) {
            this.isMetronome = false;
            this.time = 0;
            this.eventIndex = eventIndex;
            this.event = e;
        }
        static newMetronomeEvent(eventIndex) {
            const x = new SynthEvent(eventIndex, null);
            x.isMetronome = true;
            return x;
        }
    }

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    class RiffChunk {
        constructor() {
            this.id = '';
            this.size = 0;
        }
        static load(parent, chunk, stream) {
            if (parent && RiffChunk.HeaderSize > parent.size) {
                return false;
            }
            if (stream.position + RiffChunk.HeaderSize >= stream.length) {
                return false;
            }
            chunk.id = IOHelper.read8BitStringLength(stream, 4);
            if (chunk.id.charCodeAt(0) <= 32 || chunk.id.charCodeAt(0) >= 122) {
                return false;
            }
            chunk.size = IOHelper.readUInt32LE(stream);
            if (parent && RiffChunk.HeaderSize + chunk.size > parent.size) {
                return false;
            }
            if (parent) {
                parent.size -= RiffChunk.HeaderSize + chunk.size;
            }
            let isRiff = chunk.id === 'RIFF';
            let isList = chunk.id === 'LIST';
            if (isRiff && parent) {
                // not allowed
                return false;
            }
            if (!isRiff && !isList) {
                // custom type without sub type
                return true;
            }
            // for lists unwrap the list type
            chunk.id = IOHelper.read8BitStringLength(stream, 4);
            if (chunk.id.charCodeAt(0) <= 32 || chunk.id.charCodeAt(0) >= 122) {
                return false;
            }
            chunk.size -= 4;
            return true;
        }
    }
    RiffChunk.HeaderSize = 4 /*FourCC*/ + 4 /*Size*/;

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    class Hydra {
        constructor() {
            this.phdrs = [];
            this.pbags = [];
            this.pmods = [];
            this.pgens = [];
            this.insts = [];
            this.ibags = [];
            this.imods = [];
            this.igens = [];
            this.sHdrs = [];
            this.fontSamples = new Float32Array(0);
        }
        load(readable) {
            const chunkHead = new RiffChunk();
            const chunkFastList = new RiffChunk();
            if (!RiffChunk.load(null, chunkHead, readable) || chunkHead.id !== 'sfbk') {
                throw new FormatError("Soundfont is not a valid Soundfont2 file");
            }
            while (RiffChunk.load(chunkHead, chunkFastList, readable)) {
                let chunk = new RiffChunk();
                if (chunkFastList.id === 'pdta') {
                    while (RiffChunk.load(chunkFastList, chunk, readable)) {
                        switch (chunk.id) {
                            case 'phdr':
                                for (let i = 0, count = (chunk.size / HydraPhdr.SizeInFile) | 0; i < count; i++) {
                                    this.phdrs.push(new HydraPhdr(readable));
                                }
                                break;
                            case 'pbag':
                                for (let i = 0, count = (chunk.size / HydraPbag.SizeInFile) | 0; i < count; i++) {
                                    this.pbags.push(new HydraPbag(readable));
                                }
                                break;
                            case 'pmod':
                                for (let i = 0, count = (chunk.size / HydraPmod.SizeInFile) | 0; i < count; i++) {
                                    this.pmods.push(new HydraPmod(readable));
                                }
                                break;
                            case 'pgen':
                                for (let i = 0, count = (chunk.size / HydraPgen.SizeInFile) | 0; i < count; i++) {
                                    this.pgens.push(new HydraPgen(readable));
                                }
                                break;
                            case 'inst':
                                for (let i = 0, count = (chunk.size / HydraInst.SizeInFile) | 0; i < count; i++) {
                                    this.insts.push(new HydraInst(readable));
                                }
                                break;
                            case 'ibag':
                                for (let i = 0, count = (chunk.size / HydraIbag.SizeInFile) | 0; i < count; i++) {
                                    this.ibags.push(new HydraIbag(readable));
                                }
                                break;
                            case 'imod':
                                for (let i = 0, count = (chunk.size / HydraImod.SizeInFile) | 0; i < count; i++) {
                                    this.imods.push(new HydraImod(readable));
                                }
                                break;
                            case 'igen':
                                for (let i = 0, count = (chunk.size / HydraIgen.SizeInFile) | 0; i < count; i++) {
                                    this.igens.push(new HydraIgen(readable));
                                }
                                break;
                            case 'shdr':
                                for (let i = 0, count = (chunk.size / HydraShdr.SizeInFile) | 0; i < count; i++) {
                                    this.sHdrs.push(new HydraShdr(readable));
                                }
                                break;
                            default:
                                readable.position += chunk.size;
                                break;
                        }
                    }
                }
                else if (chunkFastList.id === 'sdta') {
                    while (RiffChunk.load(chunkFastList, chunk, readable)) {
                        switch (chunk.id) {
                            case 'smpl':
                                this.fontSamples = Hydra.loadSamples(chunk, readable);
                                break;
                            default:
                                readable.position += chunk.size;
                                break;
                        }
                    }
                }
                else {
                    readable.position += chunkFastList.size;
                }
            }
        }
        static loadSamples(chunk, reader) {
            let samplesLeft = (chunk.size / 2) | 0;
            const samples = new Float32Array(samplesLeft);
            let samplesPos = 0;
            const sampleBuffer = new Uint8Array(2048);
            const testBuffer = new Int16Array((sampleBuffer.length / 2) | 0);
            while (samplesLeft > 0) {
                let samplesToRead = Math.min(samplesLeft, (sampleBuffer.length / 2) | 0);
                reader.read(sampleBuffer, 0, samplesToRead * 2);
                for (let i = 0; i < samplesToRead; i++) {
                    testBuffer[i] = (sampleBuffer[i * 2 + 1] << 8) | sampleBuffer[i * 2];
                    samples[samplesPos + i] = testBuffer[i] / 32767;
                }
                samplesLeft -= samplesToRead;
                samplesPos += samplesToRead;
            }
            return samples;
        }
    }
    class HydraIbag {
        constructor(reader) {
            this.instGenNdx = IOHelper.readUInt16LE(reader);
            this.instModNdx = IOHelper.readUInt16LE(reader);
        }
    }
    HydraIbag.SizeInFile = 4;
    class HydraImod {
        constructor(reader) {
            this.modSrcOper = IOHelper.readUInt16LE(reader);
            this.modDestOper = IOHelper.readUInt16LE(reader);
            this.modAmount = IOHelper.readInt16LE(reader);
            this.modAmtSrcOper = IOHelper.readUInt16LE(reader);
            this.modTransOper = IOHelper.readUInt16LE(reader);
        }
    }
    HydraImod.SizeInFile = 10;
    class HydraIgen {
        constructor(reader) {
            this.genOper = IOHelper.readUInt16LE(reader);
            this.genAmount = new HydraGenAmount(reader);
        }
    }
    HydraIgen.SizeInFile = 4;
    class HydraInst {
        constructor(reader) {
            this.instName = IOHelper.read8BitStringLength(reader, 20);
            this.instBagNdx = IOHelper.readUInt16LE(reader);
        }
    }
    HydraInst.SizeInFile = 22;
    class HydraPbag {
        constructor(reader) {
            this.genNdx = IOHelper.readUInt16LE(reader);
            this.modNdx = IOHelper.readUInt16LE(reader);
        }
    }
    HydraPbag.SizeInFile = 4;
    class HydraPgen {
        constructor(reader) {
            this.genOper = IOHelper.readUInt16LE(reader);
            this.genAmount = new HydraGenAmount(reader);
        }
    }
    HydraPgen.SizeInFile = 4;
    HydraPgen.GenInstrument = 41;
    HydraPgen.GenKeyRange = 43;
    HydraPgen.GenVelRange = 44;
    HydraPgen.GenSampleId = 53;
    class HydraPhdr {
        constructor(reader) {
            this.presetName = IOHelper.read8BitStringLength(reader, 20);
            this.preset = IOHelper.readUInt16LE(reader);
            this.bank = IOHelper.readUInt16LE(reader);
            this.presetBagNdx = IOHelper.readUInt16LE(reader);
            this.library = IOHelper.readUInt32LE(reader);
            this.genre = IOHelper.readUInt32LE(reader);
            this.morphology = IOHelper.readUInt32LE(reader);
        }
    }
    HydraPhdr.SizeInFile = 38;
    class HydraPmod {
        constructor(reader) {
            this.modSrcOper = IOHelper.readUInt16LE(reader);
            this.modDestOper = IOHelper.readUInt16LE(reader);
            this.modAmount = IOHelper.readUInt16LE(reader);
            this.modAmtSrcOper = IOHelper.readUInt16LE(reader);
            this.modTransOper = IOHelper.readUInt16LE(reader);
        }
    }
    HydraPmod.SizeInFile = 10;
    class HydraShdr {
        constructor(reader) {
            this.sampleName = IOHelper.read8BitStringLength(reader, 20);
            this.start = IOHelper.readUInt32LE(reader);
            this.end = IOHelper.readUInt32LE(reader);
            this.startLoop = IOHelper.readUInt32LE(reader);
            this.endLoop = IOHelper.readUInt32LE(reader);
            this.sampleRate = IOHelper.readUInt32LE(reader);
            this.originalPitch = reader.readByte();
            this.pitchCorrection = IOHelper.readSInt8(reader);
            this.sampleLink = IOHelper.readUInt16LE(reader);
            this.sampleType = IOHelper.readUInt16LE(reader);
        }
    }
    HydraShdr.SizeInFile = 46;
    class HydraGenAmount {
        constructor(reader) {
            this.wordAmount = IOHelper.readUInt16LE(reader);
        }
        get shortAmount() {
            return TypeConversions.uint16ToInt16(this.wordAmount);
        }
        get lowByteAmount() {
            return this.wordAmount & 0x00ff;
        }
        get highByteAmount() {
            return ((this.wordAmount & 0xff00) >> 8) & 0xff;
        }
    }

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    class Channel {
        constructor() {
            this.presetIndex = 0;
            this.bank = 0;
            this.pitchWheel = 0;
            this.midiPan = 0;
            this.midiVolume = 0;
            this.midiExpression = 0;
            this.midiRpn = 0;
            this.midiData = 0;
            this.panOffset = 0;
            this.gainDb = 0;
            this.pitchRange = 0;
            this.tuning = 0;
            this.mixVolume = 0;
            this.mute = false;
            this.solo = false;
        }
    }

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    class Channels {
        constructor() {
            this.activeChannel = 0;
            this.channelList = [];
        }
        setupVoice(tinySoundFont, voice) {
            const c = this.channelList[this.activeChannel];
            const newpan = voice.region.pan + c.panOffset;
            voice.playingChannel = this.activeChannel;
            voice.mixVolume = c.mixVolume;
            voice.noteGainDb += c.gainDb;
            voice.calcPitchRatio(c.pitchWheel === 8192 ? c.tuning : (c.pitchWheel / 16383.0) * c.pitchRange * 2.0 - c.pitchRange + c.tuning, tinySoundFont.outSampleRate);
            if (newpan <= -0.5) {
                voice.panFactorLeft = 1.0;
                voice.panFactorRight = 0.0;
            }
            else if (newpan >= 0.5) {
                voice.panFactorLeft = 0.0;
                voice.panFactorRight = 1.0;
            }
            else {
                voice.panFactorLeft = Math.sqrt(0.5 - newpan);
                voice.panFactorRight = Math.sqrt(0.5 + newpan);
            }
        }
    }

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    var LoopMode;
    (function (LoopMode) {
        LoopMode[LoopMode["None"] = 0] = "None";
        LoopMode[LoopMode["Continuous"] = 1] = "Continuous";
        LoopMode[LoopMode["Sustain"] = 2] = "Sustain";
    })(LoopMode || (LoopMode = {}));

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    /**
     * Supported output modes by the render methods
     */
    var OutputMode;
    (function (OutputMode) {
        /**
         * Two channels with single left/right samples one after another
         */
        OutputMode[OutputMode["StereoInterleaved"] = 0] = "StereoInterleaved";
        /**
         * Two channels with all samples for the left channel first then right
         */
        OutputMode[OutputMode["StereoUnweaved"] = 1] = "StereoUnweaved";
        /**
         * A single channel (stereo instruments are mixed into center)
         */
        OutputMode[OutputMode["Mono"] = 2] = "Mono";
    })(OutputMode || (OutputMode = {}));

    class Preset {
        constructor() {
            this.name = "";
            this.presetNumber = 0;
            this.bank = 0;
            this.regions = null;
        }
    }

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    class SynthHelper {
        static timecents2Secs(timecents) {
            return Math.pow(2, timecents / 1200.0);
        }
        static decibelsToGain(db) {
            return db > -100 ? Math.pow(10.0, db * 0.05) : 0;
        }
        static gainToDecibels(gain) {
            return gain <= 0.00001 ? -100 : 20.0 * Math.log10(gain);
        }
        static cents2Hertz(cents) {
            return 8.176 * Math.pow(2.0, cents / 1200.0);
        }
        static clamp(value, min, max) {
            if (value <= min) {
                return min;
            }
            if (value >= max) {
                return max;
            }
            return value;
        }
    }

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    class Envelope {
        constructor(other) {
            this.delay = 0;
            this.attack = 0;
            this.hold = 0;
            this.decay = 0;
            this.sustain = 0;
            this.release = 0;
            this.keynumToHold = 0;
            this.keynumToDecay = 0;
            if (other) {
                this.delay = other.delay;
                this.attack = other.attack;
                this.hold = other.hold;
                this.decay = other.decay;
                this.sustain = other.sustain;
                this.release = other.release;
                this.keynumToHold = other.keynumToHold;
                this.keynumToDecay = other.keynumToDecay;
            }
        }
        clear() {
            this.delay = 0;
            this.attack = 0;
            this.hold = 0;
            this.decay = 0;
            this.sustain = 0;
            this.release = 0;
            this.keynumToHold = 0;
            this.keynumToDecay = 0;
        }
        envToSecs(sustainIsGain) {
            // EG times need to be converted from timecents to seconds.
            // Pin very short EG segments.  Timecents don't get to zero, and our EG is
            // happier with zero values.
            this.delay = this.delay < -11950.0 ? 0.0 : SynthHelper.timecents2Secs(this.delay);
            this.attack = this.attack < -11950.0 ? 0.0 : SynthHelper.timecents2Secs(this.attack);
            this.release = this.release < -11950.0 ? 0.0 : SynthHelper.timecents2Secs(this.release);
            // If we have dynamic hold or decay times depending on key number we need
            // to keep the values in timecents so we can calculate it during startNote
            if (this.keynumToHold === 0) {
                this.hold = this.hold < -11950.0 ? 0.0 : SynthHelper.timecents2Secs(this.hold);
            }
            if (this.keynumToDecay === 0) {
                this.decay = this.decay < -11950.0 ? 0.0 : SynthHelper.timecents2Secs(this.decay);
            }
            if (this.sustain < 0.0) {
                this.sustain = 0.0;
            }
            else if (sustainIsGain) {
                this.sustain = SynthHelper.decibelsToGain(-this.sustain / 10.0);
            }
            else {
                this.sustain = 1.0 - this.sustain / 1000.0;
            }
        }
    }

    var GenOperators;
    (function (GenOperators) {
        GenOperators[GenOperators["StartAddrsOffset"] = 0] = "StartAddrsOffset";
        GenOperators[GenOperators["EndAddrsOffset"] = 1] = "EndAddrsOffset";
        GenOperators[GenOperators["StartloopAddrsOffset"] = 2] = "StartloopAddrsOffset";
        GenOperators[GenOperators["EndloopAddrsOffset"] = 3] = "EndloopAddrsOffset";
        GenOperators[GenOperators["StartAddrsCoarseOffset"] = 4] = "StartAddrsCoarseOffset";
        GenOperators[GenOperators["ModLfoToPitch"] = 5] = "ModLfoToPitch";
        GenOperators[GenOperators["VibLfoToPitch"] = 6] = "VibLfoToPitch";
        GenOperators[GenOperators["ModEnvToPitch"] = 7] = "ModEnvToPitch";
        GenOperators[GenOperators["InitialFilterFc"] = 8] = "InitialFilterFc";
        GenOperators[GenOperators["InitialFilterQ"] = 9] = "InitialFilterQ";
        GenOperators[GenOperators["ModLfoToFilterFc"] = 10] = "ModLfoToFilterFc";
        GenOperators[GenOperators["ModEnvToFilterFc"] = 11] = "ModEnvToFilterFc";
        GenOperators[GenOperators["EndAddrsCoarseOffset"] = 12] = "EndAddrsCoarseOffset";
        GenOperators[GenOperators["ModLfoToVolume"] = 13] = "ModLfoToVolume";
        GenOperators[GenOperators["Unused1"] = 14] = "Unused1";
        GenOperators[GenOperators["ChorusEffectsSend"] = 15] = "ChorusEffectsSend";
        GenOperators[GenOperators["ReverbEffectsSend"] = 16] = "ReverbEffectsSend";
        GenOperators[GenOperators["Pan"] = 17] = "Pan";
        GenOperators[GenOperators["Unused2"] = 18] = "Unused2";
        GenOperators[GenOperators["Unused3"] = 19] = "Unused3";
        GenOperators[GenOperators["Unused4"] = 20] = "Unused4";
        GenOperators[GenOperators["DelayModLFO"] = 21] = "DelayModLFO";
        GenOperators[GenOperators["FreqModLFO"] = 22] = "FreqModLFO";
        GenOperators[GenOperators["DelayVibLFO"] = 23] = "DelayVibLFO";
        GenOperators[GenOperators["FreqVibLFO"] = 24] = "FreqVibLFO";
        GenOperators[GenOperators["DelayModEnv"] = 25] = "DelayModEnv";
        GenOperators[GenOperators["AttackModEnv"] = 26] = "AttackModEnv";
        GenOperators[GenOperators["HoldModEnv"] = 27] = "HoldModEnv";
        GenOperators[GenOperators["DecayModEnv"] = 28] = "DecayModEnv";
        GenOperators[GenOperators["SustainModEnv"] = 29] = "SustainModEnv";
        GenOperators[GenOperators["ReleaseModEnv"] = 30] = "ReleaseModEnv";
        GenOperators[GenOperators["KeynumToModEnvHold"] = 31] = "KeynumToModEnvHold";
        GenOperators[GenOperators["KeynumToModEnvDecay"] = 32] = "KeynumToModEnvDecay";
        GenOperators[GenOperators["DelayVolEnv"] = 33] = "DelayVolEnv";
        GenOperators[GenOperators["AttackVolEnv"] = 34] = "AttackVolEnv";
        GenOperators[GenOperators["HoldVolEnv"] = 35] = "HoldVolEnv";
        GenOperators[GenOperators["DecayVolEnv"] = 36] = "DecayVolEnv";
        GenOperators[GenOperators["SustainVolEnv"] = 37] = "SustainVolEnv";
        GenOperators[GenOperators["ReleaseVolEnv"] = 38] = "ReleaseVolEnv";
        GenOperators[GenOperators["KeynumToVolEnvHold"] = 39] = "KeynumToVolEnvHold";
        GenOperators[GenOperators["KeynumToVolEnvDecay"] = 40] = "KeynumToVolEnvDecay";
        GenOperators[GenOperators["Instrument"] = 41] = "Instrument";
        GenOperators[GenOperators["Reserved1"] = 42] = "Reserved1";
        GenOperators[GenOperators["KeyRange"] = 43] = "KeyRange";
        GenOperators[GenOperators["VelRange"] = 44] = "VelRange";
        GenOperators[GenOperators["StartloopAddrsCoarseOffset"] = 45] = "StartloopAddrsCoarseOffset";
        GenOperators[GenOperators["Keynum"] = 46] = "Keynum";
        GenOperators[GenOperators["Velocity"] = 47] = "Velocity";
        GenOperators[GenOperators["InitialAttenuation"] = 48] = "InitialAttenuation";
        GenOperators[GenOperators["Reserved2"] = 49] = "Reserved2";
        GenOperators[GenOperators["EndloopAddrsCoarseOffset"] = 50] = "EndloopAddrsCoarseOffset";
        GenOperators[GenOperators["CoarseTune"] = 51] = "CoarseTune";
        GenOperators[GenOperators["FineTune"] = 52] = "FineTune";
        GenOperators[GenOperators["SampleID"] = 53] = "SampleID";
        GenOperators[GenOperators["SampleModes"] = 54] = "SampleModes";
        GenOperators[GenOperators["Reserved3"] = 55] = "Reserved3";
        GenOperators[GenOperators["ScaleTuning"] = 56] = "ScaleTuning";
        GenOperators[GenOperators["ExclusiveClass"] = 57] = "ExclusiveClass";
        GenOperators[GenOperators["OverridingRootKey"] = 58] = "OverridingRootKey";
        GenOperators[GenOperators["Unused5"] = 59] = "Unused5";
        GenOperators[GenOperators["EndOper"] = 60] = "EndOper";
    })(GenOperators || (GenOperators = {}));
    class Region {
        constructor(other) {
            this.loopMode = LoopMode.None;
            this.sampleRate = 0;
            this.loKey = 0;
            this.hiKey = 0;
            this.loVel = 0;
            this.hiVel = 0;
            this.group = 0;
            this.offset = 0;
            this.end = 0;
            this.loopStart = 0;
            this.loopEnd = 0;
            this.transpose = 0;
            this.tune = 0;
            this.pitchKeyCenter = 0;
            this.pitchKeyTrack = 0;
            this.attenuation = 0;
            this.pan = 0;
            this.ampEnv = new Envelope();
            this.modEnv = new Envelope();
            this.initialFilterQ = 0;
            this.initialFilterFc = 0;
            this.modEnvToPitch = 0;
            this.modEnvToFilterFc = 0;
            this.modLfoToFilterFc = 0;
            this.modLfoToVolume = 0;
            this.delayModLFO = 0;
            this.freqModLFO = 0;
            this.modLfoToPitch = 0;
            this.delayVibLFO = 0;
            this.freqVibLFO = 0;
            this.vibLfoToPitch = 0;
            if (other) {
                this.loopMode = other.loopMode;
                this.sampleRate = other.sampleRate;
                this.loKey = other.loKey;
                this.hiKey = other.hiKey;
                this.loVel = other.loVel;
                this.hiVel = other.hiVel;
                this.group = other.group;
                this.offset = other.offset;
                this.end = other.end;
                this.loopStart = other.loopStart;
                this.loopEnd = other.loopEnd;
                this.transpose = other.transpose;
                this.tune = other.tune;
                this.pitchKeyCenter = other.pitchKeyCenter;
                this.pitchKeyTrack = other.pitchKeyTrack;
                this.attenuation = other.attenuation;
                this.pan = other.pan;
                this.ampEnv = new Envelope(other.ampEnv);
                this.modEnv = new Envelope(other.modEnv);
                this.initialFilterQ = other.initialFilterQ;
                this.initialFilterFc = other.initialFilterFc;
                this.modEnvToPitch = other.modEnvToPitch;
                this.modEnvToFilterFc = other.modEnvToFilterFc;
                this.modLfoToFilterFc = other.modLfoToFilterFc;
                this.modLfoToVolume = other.modLfoToVolume;
                this.delayModLFO = other.delayModLFO;
                this.freqModLFO = other.freqModLFO;
                this.modLfoToPitch = other.modLfoToPitch;
                this.delayVibLFO = other.delayVibLFO;
                this.freqVibLFO = other.freqVibLFO;
                this.vibLfoToPitch = other.vibLfoToPitch;
            }
        }
        clear(forRelative) {
            this.loopMode = 0;
            this.sampleRate = 0;
            this.loKey = 0;
            this.hiKey = 0;
            this.loVel = 0;
            this.hiVel = 0;
            this.group = 0;
            this.offset = 0;
            this.end = 0;
            this.loopStart = 0;
            this.loopEnd = 0;
            this.transpose = 0;
            this.tune = 0;
            this.pitchKeyCenter = 0;
            this.pitchKeyTrack = 0;
            this.attenuation = 0;
            this.pan = 0;
            this.ampEnv.clear();
            this.modEnv.clear();
            this.initialFilterQ = 0;
            this.initialFilterFc = 0;
            this.modEnvToPitch = 0;
            this.modEnvToFilterFc = 0;
            this.modLfoToFilterFc = 0;
            this.modLfoToVolume = 0;
            this.delayModLFO = 0;
            this.freqModLFO = 0;
            this.modLfoToPitch = 0;
            this.delayVibLFO = 0;
            this.freqVibLFO = 0;
            this.vibLfoToPitch = 0;
            this.hiKey = this.hiVel = 127;
            this.pitchKeyCenter = 60; // C4
            if (forRelative) {
                return;
            }
            this.pitchKeyTrack = 100;
            this.pitchKeyCenter = -1;
            // SF2 defaults in timecents.
            this.ampEnv.delay = this.ampEnv.attack = this.ampEnv.hold = this.ampEnv.decay = this.ampEnv.release = -12000.0;
            this.modEnv.delay = this.modEnv.attack = this.modEnv.hold = this.modEnv.decay = this.modEnv.release = -12000.0;
            this.initialFilterFc = 13500;
            this.delayModLFO = -12000.0;
            this.delayVibLFO = -12000.0;
        }
        operator(genOper, amount) {
            switch (genOper) {
                case GenOperators.StartAddrsOffset:
                    this.offset += TypeConversions.int16ToUint32(amount.shortAmount);
                    break;
                case GenOperators.EndAddrsOffset:
                    this.end += TypeConversions.int16ToUint32(amount.shortAmount);
                    break;
                case GenOperators.StartloopAddrsOffset:
                    this.loopStart += TypeConversions.int16ToUint32(amount.shortAmount);
                    break;
                case GenOperators.EndloopAddrsOffset:
                    this.loopEnd += TypeConversions.int16ToUint32(amount.shortAmount);
                    break;
                case GenOperators.StartAddrsCoarseOffset:
                    this.offset += TypeConversions.int16ToUint32(amount.shortAmount) * 32768;
                    break;
                case GenOperators.ModLfoToPitch:
                    this.modLfoToPitch = amount.shortAmount;
                    break;
                case GenOperators.VibLfoToPitch:
                    this.vibLfoToPitch = amount.shortAmount;
                    break;
                case GenOperators.ModEnvToPitch:
                    this.modEnvToPitch = amount.shortAmount;
                    break;
                case GenOperators.InitialFilterFc:
                    this.initialFilterFc = amount.shortAmount;
                    break;
                case GenOperators.InitialFilterQ:
                    this.initialFilterQ = amount.shortAmount;
                    break;
                case GenOperators.ModLfoToFilterFc:
                    this.modLfoToFilterFc = amount.shortAmount;
                    break;
                case GenOperators.ModEnvToFilterFc:
                    this.modEnvToFilterFc = amount.shortAmount;
                    break;
                case GenOperators.EndAddrsCoarseOffset:
                    this.end += TypeConversions.int16ToUint32(amount.shortAmount) * 32768;
                    break;
                case GenOperators.ModLfoToVolume:
                    this.modLfoToVolume = amount.shortAmount;
                    break;
                case GenOperators.Pan:
                    this.pan = amount.shortAmount / 1000.0;
                    break;
                case GenOperators.DelayModLFO:
                    this.delayModLFO = amount.shortAmount;
                    break;
                case GenOperators.FreqModLFO:
                    this.freqModLFO = amount.shortAmount;
                    break;
                case GenOperators.DelayVibLFO:
                    this.delayVibLFO = amount.shortAmount;
                    break;
                case GenOperators.FreqVibLFO:
                    this.freqVibLFO = amount.shortAmount;
                    break;
                case GenOperators.DelayModEnv:
                    this.modEnv.delay = amount.shortAmount;
                    break;
                case GenOperators.AttackModEnv:
                    this.modEnv.attack = amount.shortAmount;
                    break;
                case GenOperators.HoldModEnv:
                    this.modEnv.hold = amount.shortAmount;
                    break;
                case GenOperators.DecayModEnv:
                    this.modEnv.decay = amount.shortAmount;
                    break;
                case GenOperators.SustainModEnv:
                    this.modEnv.sustain = amount.shortAmount;
                    break;
                case GenOperators.ReleaseModEnv:
                    this.modEnv.release = amount.shortAmount;
                    break;
                case GenOperators.KeynumToModEnvHold:
                    this.modEnv.keynumToHold = amount.shortAmount;
                    break;
                case GenOperators.KeynumToModEnvDecay:
                    this.modEnv.keynumToDecay = amount.shortAmount;
                    break;
                case GenOperators.DelayVolEnv:
                    this.ampEnv.delay = amount.shortAmount;
                    break;
                case GenOperators.AttackVolEnv:
                    this.ampEnv.attack = amount.shortAmount;
                    break;
                case GenOperators.HoldVolEnv:
                    this.ampEnv.hold = amount.shortAmount;
                    break;
                case GenOperators.DecayVolEnv:
                    this.ampEnv.decay = amount.shortAmount;
                    break;
                case GenOperators.SustainVolEnv:
                    this.ampEnv.sustain = amount.shortAmount;
                    break;
                case GenOperators.ReleaseVolEnv:
                    this.ampEnv.release = amount.shortAmount;
                    break;
                case GenOperators.KeynumToVolEnvHold:
                    this.ampEnv.keynumToHold = amount.shortAmount;
                    break;
                case GenOperators.KeynumToVolEnvDecay:
                    this.ampEnv.keynumToDecay = amount.shortAmount;
                    break;
                case GenOperators.KeyRange:
                    this.loKey = amount.lowByteAmount;
                    this.hiKey = amount.highByteAmount;
                    break;
                case GenOperators.VelRange:
                    this.loVel = amount.lowByteAmount;
                    this.hiVel = amount.highByteAmount;
                    break;
                case GenOperators.StartloopAddrsCoarseOffset:
                    this.loopStart += TypeConversions.int16ToUint32(amount.shortAmount) * 32768;
                    break;
                case GenOperators.InitialAttenuation:
                    this.attenuation += amount.shortAmount * 0.1;
                    break;
                case GenOperators.EndloopAddrsCoarseOffset:
                    this.loopEnd += TypeConversions.int16ToUint32(amount.shortAmount) * 32768;
                    break;
                case GenOperators.CoarseTune:
                    this.transpose += amount.shortAmount;
                    break;
                case GenOperators.FineTune:
                    this.tune += amount.shortAmount;
                    break;
                case GenOperators.SampleModes:
                    this.loopMode =
                        (amount.wordAmount & 3) === 3
                            ? LoopMode.Sustain
                            : (amount.wordAmount & 3) === 1
                                ? LoopMode.Continuous
                                : LoopMode.None;
                    break;
                case GenOperators.ScaleTuning:
                    this.pitchKeyTrack = amount.shortAmount;
                    break;
                case GenOperators.ExclusiveClass:
                    this.group = amount.wordAmount;
                    break;
                case GenOperators.OverridingRootKey:
                    this.pitchKeyCenter = amount.shortAmount;
                    break;
            }
        }
    }

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    var VoiceEnvelopeSegment;
    (function (VoiceEnvelopeSegment) {
        VoiceEnvelopeSegment[VoiceEnvelopeSegment["None"] = 0] = "None";
        VoiceEnvelopeSegment[VoiceEnvelopeSegment["Delay"] = 1] = "Delay";
        VoiceEnvelopeSegment[VoiceEnvelopeSegment["Attack"] = 2] = "Attack";
        VoiceEnvelopeSegment[VoiceEnvelopeSegment["Hold"] = 3] = "Hold";
        VoiceEnvelopeSegment[VoiceEnvelopeSegment["Decay"] = 4] = "Decay";
        VoiceEnvelopeSegment[VoiceEnvelopeSegment["Sustain"] = 5] = "Sustain";
        VoiceEnvelopeSegment[VoiceEnvelopeSegment["Release"] = 6] = "Release";
        VoiceEnvelopeSegment[VoiceEnvelopeSegment["Done"] = 7] = "Done";
    })(VoiceEnvelopeSegment || (VoiceEnvelopeSegment = {}));
    class VoiceEnvelope {
        constructor() {
            this.level = 0;
            this.slope = 0;
            this.samplesUntilNextSegment = 0;
            this.segment = VoiceEnvelopeSegment.None;
            this.midiVelocity = 0;
            this.parameters = null;
            this.segmentIsExponential = false;
            this.isAmpEnv = false;
        }
        nextSegment(activeSegment, outSampleRate) {
            if (!this.parameters) {
                return;
            }
            while (true) {
                switch (activeSegment) {
                    case VoiceEnvelopeSegment.None:
                        this.samplesUntilNextSegment = (this.parameters.delay * outSampleRate) | 0;
                        if (this.samplesUntilNextSegment > 0) {
                            this.segment = VoiceEnvelopeSegment.Delay;
                            this.segmentIsExponential = false;
                            this.level = 0.0;
                            this.slope = 0.0;
                            return;
                        }
                        activeSegment = VoiceEnvelopeSegment.Delay;
                        break;
                    case VoiceEnvelopeSegment.Delay:
                        this.samplesUntilNextSegment = (this.parameters.attack * outSampleRate) | 0;
                        if (this.samplesUntilNextSegment > 0) {
                            if (!this.isAmpEnv) {
                                // mod env attack duration scales with velocity (velocity of 1 is full duration, max velocity is 0.125 times duration)
                                this.samplesUntilNextSegment =
                                    (this.parameters.attack * ((145 - this.midiVelocity) / 144.0) * outSampleRate) | 0;
                            }
                            this.segment = VoiceEnvelopeSegment.Attack;
                            this.segmentIsExponential = false;
                            this.level = 0.0;
                            this.slope = 1.0 / this.samplesUntilNextSegment;
                            return;
                        }
                        activeSegment = VoiceEnvelopeSegment.Attack;
                        break;
                    case VoiceEnvelopeSegment.Attack:
                        this.samplesUntilNextSegment = (this.parameters.hold * outSampleRate) | 0;
                        if (this.samplesUntilNextSegment > 0) {
                            this.segment = VoiceEnvelopeSegment.Hold;
                            this.segmentIsExponential = false;
                            this.level = 1.0;
                            this.slope = 0.0;
                            return;
                        }
                        activeSegment = VoiceEnvelopeSegment.Hold;
                        break;
                    case VoiceEnvelopeSegment.Hold:
                        this.samplesUntilNextSegment = (this.parameters.decay * outSampleRate) | 0;
                        if (this.samplesUntilNextSegment > 0) {
                            this.segment = VoiceEnvelopeSegment.Decay;
                            this.level = 1.0;
                            if (this.isAmpEnv) {
                                // I don't truly understand this; just following what LinuxSampler does.
                                let mysterySlope = -9.226 / this.samplesUntilNextSegment;
                                this.slope = Math.exp(mysterySlope);
                                this.segmentIsExponential = true;
                                if (this.parameters.sustain > 0.0) {
                                    // Again, this is following LinuxSampler's example, which is similar to
                                    // SF2-style decay, where "decay" specifies the time it would take to
                                    // get to zero, not to the sustain level.  The SFZ spec is not that
                                    // specific about what "decay" means, so perhaps it's really supposed
                                    // to specify the time to reach the sustain level.
                                    this.samplesUntilNextSegment = (Math.log(this.parameters.sustain) / mysterySlope) | 0;
                                }
                            }
                            else {
                                this.slope = -1.0 / this.samplesUntilNextSegment;
                                this.samplesUntilNextSegment =
                                    (this.parameters.decay * (1.0 - this.parameters.sustain) * outSampleRate) | 0;
                                this.segmentIsExponential = false;
                            }
                            return;
                        }
                        activeSegment = VoiceEnvelopeSegment.Decay;
                        break;
                    case VoiceEnvelopeSegment.Decay:
                        this.segment = VoiceEnvelopeSegment.Sustain;
                        this.level = this.parameters.sustain;
                        this.slope = 0.0;
                        this.samplesUntilNextSegment = 0x7fffffff;
                        this.segmentIsExponential = false;
                        return;
                    case VoiceEnvelopeSegment.Sustain:
                        this.segment = VoiceEnvelopeSegment.Release;
                        this.samplesUntilNextSegment =
                            ((this.parameters.release <= 0 ? VoiceEnvelope.FastReleaseTime : this.parameters.release) *
                                outSampleRate) | 0;
                        if (this.isAmpEnv) {
                            // I don't truly understand this; just following what LinuxSampler does.
                            let mysterySlope = -9.226 / this.samplesUntilNextSegment;
                            this.slope = Math.exp(mysterySlope);
                            this.segmentIsExponential = true;
                        }
                        else {
                            this.slope = -this.level / this.samplesUntilNextSegment;
                            this.segmentIsExponential = false;
                        }
                        return;
                    case VoiceEnvelopeSegment.Release:
                    default:
                        this.segment = VoiceEnvelopeSegment.Done;
                        this.segmentIsExponential = false;
                        this.level = this.slope = 0.0;
                        this.samplesUntilNextSegment = 0x7ffffff;
                        return;
                }
            }
        }
        setup(newParameters, midiNoteNumber, midiVelocity, isAmpEnv, outSampleRate) {
            this.parameters = new Envelope(newParameters);
            if (this.parameters.keynumToHold > 0) {
                this.parameters.hold += this.parameters.keynumToHold * (60.0 - midiNoteNumber);
                this.parameters.hold =
                    this.parameters.hold < -10000.0 ? 0.0 : SynthHelper.timecents2Secs(this.parameters.hold);
            }
            if (this.parameters.keynumToDecay > 0) {
                this.parameters.decay += this.parameters.keynumToDecay * (60.0 - midiNoteNumber);
                this.parameters.decay =
                    this.parameters.decay < -10000.0 ? 0.0 : SynthHelper.timecents2Secs(this.parameters.decay);
            }
            this.midiVelocity = midiVelocity | 0;
            this.isAmpEnv = isAmpEnv;
            this.nextSegment(VoiceEnvelopeSegment.None, outSampleRate);
        }
        process(numSamples, outSampleRate) {
            if (this.slope > 0) {
                if (this.segmentIsExponential) {
                    this.level *= Math.pow(this.slope, numSamples);
                }
                else {
                    this.level += this.slope * numSamples;
                }
            }
            // tslint:disable-next-line: no-conditional-assignment
            if ((this.samplesUntilNextSegment -= numSamples) <= 0) {
                this.nextSegment(this.segment, outSampleRate);
            }
        }
    }
    VoiceEnvelope.FastReleaseTime = 0.01;

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    class VoiceLfo {
        constructor() {
            this.samplesUntil = 0;
            this.level = 0;
            this.delta = 0;
        }
        setup(delay, freqCents, outSampleRate) {
            this.samplesUntil = (delay * outSampleRate) | 0;
            this.delta = (4.0 * SynthHelper.cents2Hertz(freqCents)) / outSampleRate;
            this.level = 0;
        }
        process(blockSamples) {
            if (this.samplesUntil > blockSamples) {
                this.samplesUntil -= blockSamples;
                return;
            }
            this.level += this.delta * blockSamples;
            if (this.level > 1.0) {
                this.delta = -this.delta;
                this.level = 2.0 - this.level;
            }
            else if (this.level < -1.0) {
                this.delta = -this.delta;
                this.level = -2.0 - this.level;
            }
        }
    }

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    class VoiceLowPass {
        constructor(other) {
            this.qInv = 0;
            this.a0 = 0;
            this.a1 = 0;
            this.b1 = 0;
            this.b2 = 0;
            this.z1 = 0;
            this.z2 = 0;
            this.active = false;
            if (other) {
                this.qInv = other.qInv;
                this.a0 = other.a0;
                this.a1 = other.a1;
                this.b1 = other.b1;
                this.b2 = other.b2;
                this.z1 = other.z1;
                this.z2 = other.z2;
                this.active = other.active;
            }
        }
        setup(fc) {
            // Lowpass filter from http://www.earlevel.com/main/2012/11/26/biquad-c-source-code/
            let k = Math.tan(Math.PI * fc);
            let KK = k * k;
            let norm = 1 / (1 + k * this.qInv + KK);
            this.a0 = KK * norm;
            this.a1 = 2 * this.a0;
            this.b1 = 2 * (KK - 1) * norm;
            this.b2 = (1 - k * this.qInv + KK) * norm;
        }
        process(input) {
            let output = input * this.a0 + this.z1;
            this.z1 = input * this.a1 + this.z2 - this.b1 * output;
            this.z2 = input * this.a0 - this.b2 * output;
            return output;
        }
    }

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    class Voice$1 {
        constructor() {
            this.playingPreset = 0;
            this.playingKey = 0;
            this.playingChannel = 0;
            this.region = null;
            this.pitchInputTimecents = 0;
            this.pitchOutputFactor = 0;
            this.sourceSamplePosition = 0;
            this.noteGainDb = 0;
            this.panFactorLeft = 0;
            this.panFactorRight = 0;
            this.playIndex = 0;
            this.loopStart = 0;
            this.loopEnd = 0;
            this.ampEnv = new VoiceEnvelope();
            this.modEnv = new VoiceEnvelope();
            this.lowPass = new VoiceLowPass();
            this.modLfo = new VoiceLfo();
            this.vibLfo = new VoiceLfo();
            this.mixVolume = 0;
            this.mute = false;
        }
        calcPitchRatio(pitchShift, outSampleRate) {
            if (!this.region) {
                return;
            }
            const note = this.playingKey + this.region.transpose + this.region.tune / 100.0;
            let adjustedPitch = this.region.pitchKeyCenter + (note - this.region.pitchKeyCenter) * (this.region.pitchKeyTrack / 100.0);
            if (pitchShift !== 0)
                adjustedPitch += pitchShift;
            this.pitchInputTimecents = adjustedPitch * 100.0;
            this.pitchOutputFactor =
                this.region.sampleRate / (SynthHelper.timecents2Secs(this.region.pitchKeyCenter * 100.0) * outSampleRate);
        }
        end(outSampleRate) {
            if (!this.region) {
                return;
            }
            this.ampEnv.nextSegment(VoiceEnvelopeSegment.Sustain, outSampleRate);
            this.modEnv.nextSegment(VoiceEnvelopeSegment.Sustain, outSampleRate);
            if (this.region.loopMode === LoopMode.Sustain) {
                // Continue playing, but stop looping.
                this.loopEnd = this.loopStart;
            }
        }
        endQuick(outSampleRate) {
            this.ampEnv.parameters.release = 0.0;
            this.ampEnv.nextSegment(VoiceEnvelopeSegment.Sustain, outSampleRate);
            this.modEnv.parameters.release = 0.0;
            this.modEnv.nextSegment(VoiceEnvelopeSegment.Sustain, outSampleRate);
        }
        render(f, outputBuffer, offset, numSamples, isMuted) {
            if (!this.region) {
                return;
            }
            let region = this.region;
            let input = f.fontSamples;
            let outL = 0;
            let outR = f.outputMode === OutputMode.StereoUnweaved ? numSamples : -1;
            // Cache some values, to give them at least some chance of ending up in registers.
            let updateModEnv = region.modEnvToPitch !== 0 || region.modEnvToFilterFc !== 0;
            let updateModLFO = this.modLfo.delta > 0 &&
                (region.modLfoToPitch !== 0 || region.modLfoToFilterFc !== 0 || region.modLfoToVolume !== 0);
            let updateVibLFO = this.vibLfo.delta > 0 && region.vibLfoToPitch !== 0;
            let isLooping = this.loopStart < this.loopEnd;
            let tmpLoopStart = this.loopStart;
            let tmpLoopEnd = this.loopEnd;
            let tmpSampleEndDbl = region.end;
            let tmpLoopEndDbl = tmpLoopEnd + 1.0;
            let tmpSourceSamplePosition = this.sourceSamplePosition;
            let tmpLowpass = new VoiceLowPass(this.lowPass);
            let dynamicLowpass = region.modLfoToFilterFc !== 0 || region.modEnvToFilterFc !== 0;
            let tmpSampleRate = 0;
            let tmpInitialFilterFc = 0;
            let tmpModLfoToFilterFc = 0;
            let tmpModEnvToFilterFc = 0;
            let dynamicPitchRatio = region.modLfoToPitch !== 0 || region.modEnvToPitch !== 0 || region.vibLfoToPitch !== 0;
            let pitchRatio = 0;
            let tmpModLfoToPitch = 0;
            let tmpVibLfoToPitch = 0;
            let tmpModEnvToPitch = 0;
            let dynamicGain = region.modLfoToVolume !== 0;
            let noteGain = 0;
            let tmpModLfoToVolume = 0;
            if (dynamicLowpass) {
                tmpSampleRate = f.outSampleRate;
                tmpInitialFilterFc = region.initialFilterFc;
                tmpModLfoToFilterFc = region.modLfoToFilterFc;
                tmpModEnvToFilterFc = region.modEnvToFilterFc;
            }
            else {
                tmpSampleRate = 0;
                tmpInitialFilterFc = 0;
                tmpModLfoToFilterFc = 0;
                tmpModEnvToFilterFc = 0;
            }
            if (dynamicPitchRatio) {
                pitchRatio = 0;
                tmpModLfoToPitch = region.modLfoToPitch;
                tmpVibLfoToPitch = region.vibLfoToPitch;
                tmpModEnvToPitch = region.modEnvToPitch;
            }
            else {
                pitchRatio = SynthHelper.timecents2Secs(this.pitchInputTimecents) * this.pitchOutputFactor;
                tmpModLfoToPitch = 0;
                tmpVibLfoToPitch = 0;
                tmpModEnvToPitch = 0;
            }
            if (dynamicGain) {
                tmpModLfoToVolume = region.modLfoToVolume * 0.1;
            }
            else {
                noteGain = SynthHelper.decibelsToGain(this.noteGainDb);
                tmpModLfoToVolume = 0;
            }
            while (numSamples > 0) {
                let gainMono;
                let gainLeft;
                let gainRight = 0;
                let blockSamples = numSamples > Voice$1.RenderEffectSampleBLock ? Voice$1.RenderEffectSampleBLock : numSamples;
                numSamples -= blockSamples;
                if (dynamicLowpass) {
                    let fres = tmpInitialFilterFc +
                        this.modLfo.level * tmpModLfoToFilterFc +
                        this.modEnv.level * tmpModEnvToFilterFc;
                    tmpLowpass.active = fres <= 13500.0;
                    if (tmpLowpass.active) {
                        tmpLowpass.setup(SynthHelper.cents2Hertz(fres) / tmpSampleRate);
                    }
                }
                if (dynamicPitchRatio) {
                    pitchRatio =
                        SynthHelper.timecents2Secs(this.pitchInputTimecents +
                            (this.modLfo.level * tmpModLfoToPitch +
                                this.vibLfo.level * tmpVibLfoToPitch +
                                this.modEnv.level * tmpModEnvToPitch)) * this.pitchOutputFactor;
                }
                if (dynamicGain) {
                    noteGain = SynthHelper.decibelsToGain(this.noteGainDb + this.modLfo.level * tmpModLfoToVolume);
                }
                gainMono = noteGain * this.ampEnv.level;
                if (isMuted) {
                    gainMono = 0;
                }
                else {
                    gainMono *= this.mixVolume;
                }
                // Update EG.
                this.ampEnv.process(blockSamples, f.outSampleRate);
                if (updateModEnv) {
                    this.modEnv.process(blockSamples, f.outSampleRate);
                }
                // Update LFOs.
                if (updateModLFO) {
                    this.modLfo.process(blockSamples);
                }
                if (updateVibLFO) {
                    this.vibLfo.process(blockSamples);
                }
                switch (f.outputMode) {
                    case OutputMode.StereoInterleaved:
                        gainLeft = gainMono * this.panFactorLeft;
                        gainRight = gainMono * this.panFactorRight;
                        while (blockSamples-- > 0 && tmpSourceSamplePosition < tmpSampleEndDbl) {
                            let pos = tmpSourceSamplePosition | 0;
                            let nextPos = pos >= tmpLoopEnd && isLooping ? tmpLoopStart : pos + 1;
                            // Simple linear interpolation.
                            // TODO: check for interpolation mode on voice
                            let alpha = tmpSourceSamplePosition - pos;
                            let val = input[pos] * (1.0 - alpha) + input[nextPos] * alpha;
                            // Low-pass filter.
                            if (tmpLowpass.active)
                                val = tmpLowpass.process(val);
                            outputBuffer[offset + outL] += val * gainLeft;
                            outL++;
                            outputBuffer[offset + outL] += val * gainRight;
                            outL++;
                            // Next sample.
                            tmpSourceSamplePosition += pitchRatio;
                            if (tmpSourceSamplePosition >= tmpLoopEndDbl && isLooping) {
                                tmpSourceSamplePosition -= tmpLoopEnd - tmpLoopStart + 1.0;
                            }
                        }
                        break;
                    case OutputMode.StereoUnweaved:
                        gainLeft = gainMono * this.panFactorLeft;
                        gainRight = gainMono * this.panFactorRight;
                        while (blockSamples-- > 0 && tmpSourceSamplePosition < tmpSampleEndDbl) {
                            let pos = tmpSourceSamplePosition | 0;
                            let nextPos = pos >= tmpLoopEnd && isLooping ? tmpLoopStart : pos + 1;
                            // Simple linear interpolation.
                            let alpha = tmpSourceSamplePosition - pos;
                            let val = input[pos] * (1.0 - alpha) + input[nextPos] * alpha;
                            // Low-pass filter.
                            if (tmpLowpass.active)
                                val = tmpLowpass.process(val);
                            outputBuffer[offset + outL] += val * gainLeft;
                            outL++;
                            outputBuffer[offset + outR] += val * gainRight;
                            outR++;
                            // Next sample.
                            tmpSourceSamplePosition += pitchRatio;
                            if (tmpSourceSamplePosition >= tmpLoopEndDbl && isLooping) {
                                tmpSourceSamplePosition -= tmpLoopEnd - tmpLoopStart + 1.0;
                            }
                        }
                        break;
                    case OutputMode.Mono:
                        while (blockSamples-- > 0 && tmpSourceSamplePosition < tmpSampleEndDbl) {
                            let pos = tmpSourceSamplePosition | 0;
                            let nextPos = pos >= tmpLoopEnd && isLooping ? tmpLoopStart : pos + 1;
                            // Simple linear interpolation.
                            let alpha = tmpSourceSamplePosition - pos;
                            let val = input[pos] * (1.0 - alpha) + input[nextPos] * alpha;
                            // Low-pass filter.
                            if (tmpLowpass.active)
                                val = tmpLowpass.process(val);
                            outputBuffer[offset + outL] = val * gainMono;
                            outL++;
                            // Next sample.
                            tmpSourceSamplePosition += pitchRatio;
                            if (tmpSourceSamplePosition >= tmpLoopEndDbl && isLooping) {
                                tmpSourceSamplePosition -= tmpLoopEnd - tmpLoopStart + 1.0;
                            }
                        }
                        break;
                }
                if (tmpSourceSamplePosition >= tmpSampleEndDbl || this.ampEnv.segment === VoiceEnvelopeSegment.Done) {
                    this.kill();
                    return;
                }
            }
            this.sourceSamplePosition = tmpSourceSamplePosition;
            if (tmpLowpass.active || dynamicLowpass) {
                this.lowPass = tmpLowpass;
            }
        }
        kill() {
            this.playingPreset = -1;
        }
    }
    /**
     * The lower this block size is the more accurate the effects are.
     * Increasing the value significantly lowers the CPU usage of the voice rendering.
     * If LFO affects the low-pass filter it can be hearable even as low as 8.
     */
    Voice$1.RenderEffectSampleBLock = 64;

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    // developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
    // TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
    // Licensed under: MPL-2.0
    class SynthConstants {
    }
    SynthConstants.DefaultChannelCount = 16 + 1;
    SynthConstants.MetronomeChannel = SynthConstants.DefaultChannelCount - 1;
    SynthConstants.AudioChannels = 2;
    SynthConstants.MinVolume = 0;
    SynthConstants.MaxVolume = 1;
    SynthConstants.MinProgram = 0;
    SynthConstants.MaxProgram = 127;
    SynthConstants.MinPlaybackSpeed = 0.125;
    SynthConstants.MaxPlaybackSpeed = 8;

    // The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
    /**
     * This is a tiny soundfont based synthesizer.
     * NOT YET IMPLEMENTED
     *   - Support for ChorusEffectsSend and ReverbEffectsSend generators
     *   - Better low-pass filter without lowering performance too much
     *   - Support for modulators
     */
    class TinySoundFont {
        constructor(sampleRate) {
            this._midiEventQueue = [];
            this._midiEventCounts = new Int32Array(TinySoundFont.MicroBufferCount);
            this._mutedChannels = new Map();
            this._soloChannels = new Map();
            this._isAnySolo = false;
            this._presets = null;
            this._voices = [];
            this._channels = null;
            this._voicePlayIndex = 0;
            this.fontSamples = new Float32Array(0);
            /**
             * Gets the currently configured output mode.
             */
            this.outputMode = OutputMode.StereoInterleaved;
            /**
             * Gets the currently configured sample rate.
             */
            this.outSampleRate = 0;
            /**
             * Gets the currently configured global gain in DB.
             */
            this.globalGainDb = 0;
            this.outSampleRate = sampleRate;
        }
        synthesize() {
            return this.fillWorkingBuffer(false);
        }
        synthesizeSilent() {
            this.fillWorkingBuffer(true);
        }
        channelGetMixVolume(channel) {
            return this._channels && channel < this._channels.channelList.length
                ? this._channels.channelList[channel].mixVolume
                : 1.0;
        }
        channelSetMixVolume(channel, volume) {
            let c = this.channelInit(channel);
            for (let v of this._voices) {
                if (v.playingChannel === channel && v.playingPreset !== -1) {
                    v.mixVolume = volume;
                }
            }
            c.mixVolume = volume;
        }
        channelSetMute(channel, mute) {
            if (mute) {
                this._mutedChannels.set(channel, true);
            }
            else {
                this._mutedChannels.delete(channel);
            }
        }
        channelSetSolo(channel, solo) {
            if (solo) {
                this._soloChannels.set(channel, true);
            }
            else {
                this._soloChannels.delete(channel);
            }
            this._isAnySolo = this._soloChannels.size > 0;
        }
        resetChannelStates() {
            this._mutedChannels = new Map();
            this._soloChannels = new Map();
            this._isAnySolo = false;
        }
        dispatchEvent(i, synthEvent) {
            this._midiEventQueue.unshift(synthEvent);
            this._midiEventCounts[i]++;
        }
        fillWorkingBuffer(silent) {
            // Break the process loop into sections representing the smallest timeframe before the midi controls need to be updated
            // the bigger the timeframe the more efficent the process is, but playback quality will be reduced.
            const buffer = new Float32Array(TinySoundFont.MicroBufferSize * TinySoundFont.MicroBufferCount * SynthConstants.AudioChannels);
            let bufferPos = 0;
            const anySolo = this._isAnySolo;
            // process in micro-buffers
            for (let x = 0; x < TinySoundFont.MicroBufferCount; x++) {
                // process events for first microbuffer
                if (this._midiEventQueue.length > 0) {
                    for (let i = 0; i < this._midiEventCounts[x]; i++) {
                        let m = this._midiEventQueue.pop();
                        if (m) {
                            if (m.isMetronome) {
                                this.channelNoteOff(SynthConstants.MetronomeChannel, 33);
                                this.channelNoteOn(SynthConstants.MetronomeChannel, 33, 95 / 127);
                            }
                            else if (m.event) {
                                this.processMidiMessage(m.event);
                            }
                        }
                    }
                }
                // voice processing loop
                for (const voice of this._voices) {
                    if (voice.playingPreset !== -1) {
                        const channel = voice.playingChannel;
                        // channel is muted if it is either explicitley muted, or another channel is set to solo but not this one.
                        const isChannelMuted = this._mutedChannels.has(channel) || (anySolo && !this._soloChannels.has(channel));
                        if (silent) {
                            voice.kill();
                        }
                        else {
                            voice.render(this, buffer, bufferPos, 64, isChannelMuted);
                        }
                    }
                }
                bufferPos += TinySoundFont.MicroBufferSize * SynthConstants.AudioChannels;
            }
            this._midiEventCounts.fill(0);
            return buffer;
        }
        processMidiMessage(e) {
            Logger.debug('Midi', 'Processing midi ' + e.command);
            const command = e.command;
            const channel = e.channel;
            const data1 = e.data1;
            const data2 = e.data2;
            switch (command) {
                case MidiEventType.NoteOff:
                    this.channelNoteOff(channel, data1);
                    break;
                case MidiEventType.NoteOn:
                    this.channelNoteOn(channel, data1, data2 / 127.0);
                    break;
                case MidiEventType.NoteAftertouch:
                    break;
                case MidiEventType.Controller:
                    this.channelMidiControl(channel, data1, data2);
                    break;
                case MidiEventType.ProgramChange:
                    this.channelSetPresetNumber(channel, data1, channel === 9);
                    break;
                case MidiEventType.ChannelAftertouch:
                    break;
                case MidiEventType.PitchBend:
                    this.channelSetPitchWheel(channel, data1 | (data2 << 8));
                    break;
            }
        }
        get metronomeVolume() {
            return this.channelGetMixVolume(SynthConstants.MetronomeChannel);
        }
        set metronomeVolume(value) {
            this.channelSetMixVolume(SynthConstants.MetronomeChannel, value);
        }
        setupMetronomeChannel(volume) {
            this.channelSetVolume(SynthConstants.MetronomeChannel, 1);
            this.channelSetMixVolume(SynthConstants.MetronomeChannel, volume);
            this.channelSetPresetNumber(SynthConstants.MetronomeChannel, 0, true);
        }
        /**
         * Stop all playing notes immediatly and reset all channel parameters but keeps user
         * defined settings
         */
        resetSoft() {
            for (const v of this._voices) {
                if (v.playingPreset !== -1 &&
                    (v.ampEnv.segment < VoiceEnvelopeSegment.Release || v.ampEnv.parameters.release !== 0)) {
                    v.endQuick(this.outSampleRate);
                }
            }
            if (this._channels) {
                for (const c of this._channels.channelList) {
                    c.presetIndex = c.bank = 0;
                    c.pitchWheel = c.midiPan = 8192;
                    c.midiVolume = c.midiExpression = 16383;
                    c.midiRpn = 0xffff;
                    c.midiData = 0;
                    c.panOffset = 0.0;
                    c.gainDb = 0.0;
                    c.pitchRange = 2.0;
                    c.tuning = 0.0;
                }
            }
        }
        get presetCount() {
            var _a, _b;
            return (_b = (_a = this._presets) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
        }
        /**
         * Stop all playing notes immediatly and reset all channel parameters
         */
        reset() {
            for (let v of this._voices) {
                if (v.playingPreset !== -1 &&
                    (v.ampEnv.segment < VoiceEnvelopeSegment.Release || v.ampEnv.parameters.release !== 0)) {
                    v.endQuick(this.outSampleRate);
                }
            }
            this._channels = null;
        }
        /**
         * Setup the parameters for the voice render methods
         * @param outputMode if mono or stereo and how stereo channel data is ordered
         * @param sampleRate the number of samples per second (output frequency)
         * @param globalGainDb volume gain in decibels (>0 means higher, <0 means lower)
         */
        setOutput(outputMode, sampleRate, globalGainDb) {
            this.outputMode = outputMode;
            this.outSampleRate = sampleRate >= 1 ? sampleRate : 44100.0;
            this.globalGainDb = globalGainDb;
        }
        /**
         * Start playing a note
         * @param presetIndex preset index >= 0 and < {@link presetCount}
         * @param key note value between 0 and 127 (60 being middle C)
         * @param vel velocity as a float between 0.0 (equal to note off) and 1.0 (full)
         */
        noteOn(presetIndex, key, vel) {
            if (!this._presets) {
                return;
            }
            const midiVelocity = (vel * 127) | 0;
            if (presetIndex < 0 || presetIndex >= this._presets.length) {
                return;
            }
            if (vel <= 0.0) {
                this.noteOff(presetIndex, key);
                return;
            }
            // Play all matching regions.
            const voicePlayIndex = this._voicePlayIndex++;
            for (const region of this._presets[presetIndex].regions) {
                if (key < region.loKey ||
                    key > region.hiKey ||
                    midiVelocity < region.loVel ||
                    midiVelocity > region.hiVel) {
                    continue;
                }
                let voice = null;
                if (region.group !== 0) {
                    for (const v of this._voices) {
                        if (v.playingPreset === presetIndex && v.region.group === region.group) {
                            v.endQuick(this.outSampleRate);
                        }
                        else if (v.playingPreset === -1 && !voice) {
                            voice = v;
                        }
                    }
                }
                else {
                    for (let v of this._voices) {
                        if (v.playingPreset === -1) {
                            voice = v;
                        }
                    }
                }
                if (!voice) {
                    for (let i = 0; i < 4; i++) {
                        const newVoice = new Voice$1();
                        newVoice.playingPreset = -1;
                        this._voices.push(newVoice);
                    }
                    voice = this._voices[this._voices.length - 4];
                }
                voice.region = region;
                voice.playingPreset = presetIndex;
                voice.playingKey = key;
                voice.playIndex = voicePlayIndex;
                voice.noteGainDb = this.globalGainDb - region.attenuation - SynthHelper.gainToDecibels(1.0 / vel);
                if (this._channels) {
                    this._channels.setupVoice(this, voice);
                }
                else {
                    voice.calcPitchRatio(0, this.outSampleRate);
                    // The SFZ spec is silent about the pan curve, but a 3dB pan law seems common. This sqrt() curve matches what Dimension LE does; Alchemy Free seems closer to sin(adjustedPan * pi/2).
                    voice.panFactorLeft = Math.sqrt(0.5 - region.pan);
                    voice.panFactorRight = Math.sqrt(0.5 + region.pan);
                }
                // Offset/end.
                voice.sourceSamplePosition = region.offset;
                // Loop.
                const doLoop = region.loopMode !== LoopMode.None && region.loopStart < region.loopEnd;
                voice.loopStart = doLoop ? region.loopStart : 0;
                voice.loopEnd = doLoop ? region.loopEnd : 0;
                // Setup envelopes.
                voice.ampEnv.setup(region.ampEnv, key, midiVelocity, true, this.outSampleRate);
                voice.modEnv.setup(region.modEnv, key, midiVelocity, false, this.outSampleRate);
                // Setup lowpass filter.
                const filterQDB = region.initialFilterQ / 10.0;
                voice.lowPass.qInv = 1.0 / Math.pow(10.0, filterQDB / 20.0);
                voice.lowPass.z1 = voice.lowPass.z2 = 0;
                voice.lowPass.active = region.initialFilterFc <= 13500;
                if (voice.lowPass.active) {
                    voice.lowPass.setup(SynthHelper.cents2Hertz(region.initialFilterFc) / this.outSampleRate);
                }
                // Setup LFO filters.
                voice.modLfo.setup(region.delayModLFO, region.freqModLFO, this.outSampleRate);
                voice.vibLfo.setup(region.delayVibLFO, region.freqVibLFO, this.outSampleRate);
            }
        }
        /**
         * Start playing a note
         * @param bank instrument bank number (alternative to preset_index)
         * @param presetNumber preset number (alternative to preset_index)
         * @param key note value between 0 and 127 (60 being middle C)
         * @param vel velocity as a float between 0.0 (equal to note off) and 1.0 (full)
         * @returns returns false if preset does not exist, otherwise true
         */
        bankNoteOn(bank, presetNumber, key, vel) {
            let presetIndex = this.getPresetIndex(bank, presetNumber);
            if (presetIndex === -1) {
                return false;
            }
            this.noteOn(presetIndex, key, vel);
            return true;
        }
        /**
         * Stop playing a note
         */
        noteOff(presetIndex, key) {
            let matchFirst = null;
            let matchLast = null;
            let matches = [];
            for (let v of this._voices) {
                if (v.playingPreset !== presetIndex ||
                    v.playingKey !== key ||
                    v.ampEnv.segment >= VoiceEnvelopeSegment.Release) {
                    continue;
                }
                else if (!matchFirst || v.playIndex < matchFirst.playIndex) {
                    matchFirst = v;
                    matchLast = v;
                    matches.push(v);
                }
                else if (v.playIndex === matchFirst.playIndex) {
                    matchLast = v;
                    matches.push(v);
                }
            }
            if (!matchFirst) {
                return;
            }
            for (const v of matches) {
                if (v !== matchFirst &&
                    v !== matchLast &&
                    (v.playIndex !== matchFirst.playIndex ||
                        v.playingPreset !== presetIndex ||
                        v.playingKey !== key ||
                        v.ampEnv.segment >= VoiceEnvelopeSegment.Release)) {
                    continue;
                }
                v.end(this.outSampleRate);
            }
        }
        /**
         * Stop playing a note
         * @returns returns false if preset does not exist, otherwise true
         */
        bankNoteOff(bank, presetNumber, key) {
            const presetIndex = this.getPresetIndex(bank, presetNumber);
            if (presetIndex === -1) {
                return false;
            }
            this.noteOff(presetIndex, key);
            return true;
        }
        /**
         * Stop playing all notes (end with sustain and release)
         */
        noteOffAll(immediate) {
            for (const voice of this._voices) {
                if (voice.playingPreset !== -1 && voice.ampEnv.segment < VoiceEnvelopeSegment.Release) {
                    if (immediate) {
                        voice.endQuick(this.outSampleRate);
                    }
                    else {
                        voice.end(this.outSampleRate);
                    }
                }
            }
        }
        get activeVoiceCount() {
            let count = 0;
            for (const v of this._voices) {
                if (v.playingPreset !== -1) {
                    count++;
                }
            }
            return count;
        }
        channelInit(channel) {
            if (this._channels && channel < this._channels.channelList.length) {
                return this._channels.channelList[channel];
            }
            if (!this._channels) {
                this._channels = new Channels();
            }
            for (let i = this._channels.channelList.length; i <= channel; i++) {
                let c = new Channel();
                c.presetIndex = c.bank = 0;
                c.pitchWheel = c.midiPan = 8192;
                c.midiVolume = c.midiExpression = 16383;
                c.midiRpn = 0xffff;
                c.midiData = 0;
                c.panOffset = 0.0;
                c.gainDb = 0.0;
                c.pitchRange = 2.0;
                c.tuning = 0.0;
                c.mixVolume = 1;
                this._channels.channelList.push(c);
            }
            return this._channels.channelList[channel];
        }
        /**
         * Returns the preset index from a bank and preset number, or -1 if it does not exist in the loaded SoundFont
         */
        getPresetIndex(bank, presetNumber) {
            if (!this._presets) {
                return -1;
            }
            for (let i = 0; i < this._presets.length; i++) {
                let preset = this._presets[i];
                if (preset.presetNumber === presetNumber && preset.bank === bank) {
                    return i;
                }
            }
            return -1;
        }
        /**
         * Returns the name of a preset index >= 0 and < GetPresetName()
         * @param presetIndex
         */
        getPresetName(presetIndex) {
            if (!this._presets) {
                return null;
            }
            return presetIndex < 0 || presetIndex >= this._presets.length ? null : this._presets[presetIndex].name;
        }
        /**
         * Returns the name of a preset by bank and preset number
         */
        bankGetPresetName(bank, presetNumber) {
            return this.getPresetName(this.getPresetIndex(bank, presetNumber));
        }
        /**
         * Start playing a note on a channel
         * @param channel channel number
         * @param key note value between 0 and 127 (60 being middle C)
         * @param vel velocity as a float between 0.0 (equal to note off) and 1.0 (full)
         */
        channelNoteOn(channel, key, vel) {
            if (!this._channels || channel > this._channels.channelList.length) {
                return;
            }
            this._channels.activeChannel = channel;
            this.noteOn(this._channels.channelList[channel].presetIndex, key, vel);
        }
        /**
         * Stop playing notes on a channel
         * @param channel channel number
         * @param key note value between 0 and 127 (60 being middle C)
         */
        channelNoteOff(channel, key) {
            const matches = [];
            let matchFirst = null;
            let matchLast = null;
            for (const v of this._voices) {
                // Find the first and last entry in the voices list with matching channel, key and look up the smallest play index
                if (v.playingPreset === -1 ||
                    v.playingChannel !== channel ||
                    v.playingKey !== key ||
                    v.ampEnv.segment >= VoiceEnvelopeSegment.Release) {
                    continue;
                }
                if (!matchFirst || v.playIndex < matchFirst.playIndex) {
                    matchFirst = matchLast = v;
                    matches.push(v);
                }
                else if (v.playIndex === matchFirst.playIndex) {
                    matchLast = v;
                    matches.push(v);
                }
            }
            if (!matchFirst) {
                return;
            }
            for (const v of matches) {
                // Stop all voices with matching channel, key and the smallest play index which was enumerated above
                if (v !== matchFirst &&
                    v !== matchLast &&
                    (v.playIndex !== matchFirst.playIndex ||
                        v.playingPreset === -1 ||
                        v.playingChannel !== channel ||
                        v.playingKey !== key ||
                        v.ampEnv.segment >= VoiceEnvelopeSegment.Release)) {
                    continue;
                }
                v.end(this.outSampleRate);
            }
        }
        /**
         * Stop playing all notes on a channel with sustain and release.
         * @param channel channel number
         */
        channelNoteOffAll(channel) {
            for (const v of this._voices) {
                if (v.playingPreset !== -1 &&
                    v.playingChannel === channel &&
                    v.ampEnv.segment < VoiceEnvelopeSegment.Release) {
                    v.end(this.outSampleRate);
                }
            }
        }
        /**
         * Stop playing all notes on a channel immediately
         * @param channel channel number
         */
        channelSoundsOffAll(channel) {
            for (let v of this._voices) {
                if (v.playingPreset !== -1 &&
                    v.playingChannel === channel &&
                    (v.ampEnv.segment < VoiceEnvelopeSegment.Release || v.ampEnv.parameters.release === 0)) {
                    v.endQuick(this.outSampleRate);
                }
            }
        }
        /**
         *
         * @param channel channel number
         * @param presetIndex preset index <= 0 and > {@link presetCount}
         */
        channelSetPresetIndex(channel, presetIndex) {
            this.channelInit(channel).presetIndex = TypeConversions.int32ToUint16(presetIndex);
        }
        /**
         * @param channel channel number
         * @param presetNumber preset number (alternative to preset_index)
         * @param midiDrums false for normal channels, otherwise apply MIDI drum channel rules
         * @returns return false if preset does not exist, otherwise true
         */
        channelSetPresetNumber(channel, presetNumber, midiDrums = false) {
            const c = this.channelInit(channel);
            let presetIndex = 0;
            if (midiDrums) {
                presetIndex = this.getPresetIndex(128 | (c.bank & 0x7fff), presetNumber);
                if (presetIndex === -1) {
                    presetIndex = this.getPresetIndex(128, presetNumber);
                }
                if (presetIndex === -1) {
                    presetIndex = this.getPresetIndex(128, 0);
                }
                if (presetIndex === -1) {
                    presetIndex = this.getPresetIndex(c.bank & 0x7ff, presetNumber);
                }
            }
            else {
                presetIndex = this.getPresetIndex(c.bank & 0x7ff, presetNumber);
            }
            if (presetIndex === -1) {
                presetIndex = this.getPresetIndex(0, presetNumber);
            }
            if (presetIndex !== -1) {
                c.presetIndex = presetIndex;
                return true;
            }
            return false;
        }
        /**
         * @param channel channel number
         * @param bank instrument bank number (alternative to preset_index)
         */
        channelSetBank(channel, bank) {
            this.channelInit(channel).bank = TypeConversions.int32ToUint16(bank);
        }
        /**
         * @param channel channel number
         * @param bank instrument bank number (alternative to preset_index)
         * @param presetNumber preset number (alternative to preset_index)
         * @returns return false if preset does not exist, otherwise true
         */
        channelSetBankPreset(channel, bank, presetNumber) {
            const c = this.channelInit(channel);
            const presetIndex = this.getPresetIndex(bank, presetNumber);
            if (presetIndex === -1) {
                return false;
            }
            c.presetIndex = TypeConversions.int32ToUint16(presetIndex);
            c.bank = TypeConversions.int32ToUint16(bank);
            return true;
        }
        /**
         * @param channel channel number
         * @param pan stereo panning value from 0.0 (left) to 1.0 (right) (default 0.5 center)
         */
        channelSetPan(channel, pan) {
            for (const v of this._voices) {
                if (v.playingChannel === channel && v.playingPreset !== -1) {
                    let newPan = v.region.pan + pan - 0.5;
                    if (newPan <= -0.5) {
                        v.panFactorLeft = 1;
                        v.panFactorRight = 0;
                    }
                    else if (newPan >= 0.5) {
                        v.panFactorLeft = 0;
                        v.panFactorRight = 1;
                    }
                    else {
                        v.panFactorLeft = Math.sqrt(0.5 - newPan);
                        v.panFactorRight = Math.sqrt(0.5 + newPan);
                    }
                }
            }
            this.channelInit(channel).panOffset = pan - 0.5;
        }
        /**
         * @param channel channel number
         * @param volume linear volume scale factor (default 1.0 full)
         */
        channelSetVolume(channel, volume) {
            const c = this.channelInit(channel);
            const gainDb = SynthHelper.gainToDecibels(volume);
            const gainDBChange = gainDb - c.gainDb;
            if (gainDBChange === 0) {
                return;
            }
            for (const v of this._voices) {
                if (v.playingChannel === channel && v.playingPreset !== -1) {
                    v.noteGainDb += gainDBChange;
                }
            }
            c.gainDb = gainDb;
        }
        /**
         * @param channel channel number
         * @param pitchWheel pitch wheel position 0 to 16383 (default 8192 unpitched)
         */
        channelSetPitchWheel(channel, pitchWheel) {
            const c = this.channelInit(channel);
            if (c.pitchWheel === pitchWheel) {
                return;
            }
            c.pitchWheel = TypeConversions.int32ToUint16(pitchWheel);
            this.channelApplyPitch(channel, c);
        }
        channelApplyPitch(channel, c) {
            const pitchShift = c.pitchWheel === 8192
                ? c.tuning
                : (c.pitchWheel / 16383.0 * c.pitchRange * 2) - c.pitchRange + c.tuning;
            for (const v of this._voices) {
                if (v.playingChannel === channel && v.playingPreset !== -1) {
                    v.calcPitchRatio(pitchShift, this.outSampleRate);
                }
            }
        }
        /**
         * @param channel channel number
         * @param pitchRange range of the pitch wheel in semitones (default 2.0, total +/- 2 semitones)
         */
        channelSetPitchRange(channel, pitchRange) {
            const c = this.channelInit(channel);
            if (c.pitchRange === pitchRange) {
                return;
            }
            c.pitchRange = pitchRange;
            if (c.pitchWheel !== 8192) {
                this.channelApplyPitch(channel, c);
            }
        }
        /**
         * @param channel channel number
         * @param tuning tuning of all playing voices in semitones (default 0.0, standard (A440) tuning)
         */
        channelSetTuning(channel, tuning) {
            const c = this.channelInit(channel);
            if (c.tuning === tuning) {
                return;
            }
            c.tuning = tuning;
            this.channelApplyPitch(channel, c);
        }
        /**
         * Apply a MIDI control change to the channel (not all controllers are supported!)
         */
        channelMidiControl(channel, controller, controlValue) {
            let c = this.channelInit(channel);
            switch (controller) {
                case 5: /*Portamento_Time_MSB*/
                case 96: /*DATA_BUTTON_INCREMENT*/
                case 97: /*DATA_BUTTON_DECREMENT*/
                case 64: /*HOLD_PEDAL*/
                case 65: /*Portamento*/
                case 66: /*SostenutoPedal */
                case 122: /*LocalKeyboard */
                case 124: /*OmniModeOff */
                case 125: /*OmniModeon */
                case 126: /*MonoMode */
                case 127 /*PolyMode*/:
                    return;
                case 38 /*DATA_ENTRY_LSB*/:
                    c.midiData = TypeConversions.int32ToUint16((c.midiData & 0x3f80) | controlValue);
                    if (c.midiRpn === 0) {
                        this.channelSetPitchRange(channel, (c.midiData >> 7) + 0.01 * (c.midiData & 0x7f));
                    }
                    else if (c.midiRpn === 1) {
                        this.channelSetTuning(channel, (c.tuning | 0) + (c.midiData - 8192.0) / 8192.0); // fine tune
                    }
                    else if (c.midiRpn === 2) {
                        this.channelSetTuning(channel, controlValue - 64.0 + (c.tuning - (c.tuning | 0))); // coarse tune
                    }
                    return;
                case 7 /*VOLUME_MSB*/:
                    c.midiVolume = TypeConversions.int32ToUint16((c.midiVolume & 0x7f) | (controlValue << 7));
                    // Raising to the power of 3 seems to result in a decent sounding volume curve for MIDI
                    this.channelSetVolume(channel, Math.pow((c.midiVolume / 16383.0) * (c.midiExpression / 16383.0), 3.0));
                    return;
                case 39 /*VOLUME_LSB*/:
                    c.midiVolume = TypeConversions.int32ToUint16((c.midiVolume & 0x3f80) | controlValue);
                    // Raising to the power of 3 seems to result in a decent sounding volume curve for MIDI
                    this.channelSetVolume(channel, Math.pow((c.midiVolume / 16383.0) * (c.midiExpression / 16383.0), 3.0));
                    return;
                case 11 /*EXPRESSION_MSB*/:
                    c.midiExpression = TypeConversions.int32ToUint16((c.midiExpression & 0x7f) | (controlValue << 7));
                    // Raising to the power of 3 seems to result in a decent sounding volume curve for MIDI
                    this.channelSetVolume(channel, Math.pow((c.midiVolume / 16383.0) * (c.midiExpression / 16383.0), 3.0));
                    return;
                case 43 /*EXPRESSION_LSB*/:
                    c.midiExpression = TypeConversions.int32ToUint16((c.midiExpression & 0x3f80) | controlValue);
                    // Raising to the power of 3 seems to result in a decent sounding volume curve for MIDI
                    this.channelSetVolume(channel, Math.pow((c.midiVolume / 16383.0) * (c.midiExpression / 16383.0), 3.0));
                    return;
                case 10 /*PAN_MSB*/:
                    c.midiPan = TypeConversions.int32ToUint16((c.midiPan & 0x7f) | (controlValue << 7));
                    this.channelSetPan(channel, c.midiPan / 16383.0);
                    return;
                case 42 /*PAN_LSB*/:
                    c.midiPan = TypeConversions.int32ToUint16((c.midiPan & 0x3f80) | controlValue);
                    this.channelSetPan(channel, c.midiPan / 16383.0);
                    return;
                case 6 /*DATA_ENTRY_MSB*/:
                    c.midiData = TypeConversions.int32ToUint16((c.midiData & 0x7f) | (controlValue << 7));
                    if (c.midiRpn === 0) {
                        this.channelSetPitchRange(channel, (c.midiData >> 7) + 0.01 * (c.midiData & 0x7f));
                    }
                    else if (c.midiRpn === 1) {
                        this.channelSetTuning(channel, (c.tuning | 0) + (c.midiData - 8192.0) / 8192.0); // fine tune
                    }
                    else if (c.midiRpn === 2 && controller === 6) {
                        this.channelSetTuning(channel, controlValue - 64.0 + (c.tuning - (c.tuning | 0))); // coarse tune
                    }
                    return;
                case 0 /*BANK_SELECT_MSB*/:
                    c.bank = TypeConversions.int32ToUint16(0x8000 | controlValue);
                    return;
                // bank select MSB alone acts like LSB
                case 32 /*BANK_SELECT_LSB*/:
                    c.bank = TypeConversions.int32ToUint16(((c.bank & 0x8000) !== 0 ? (c.bank & 0x7f) << 7 : 0) | controlValue);
                    return;
                case 101 /*RPN_MSB*/:
                    c.midiRpn = TypeConversions.int32ToUint16(((c.midiRpn === 0xffff ? 0 : c.midiRpn) & 0x7f) | (controlValue << 7));
                    // TODO
                    return;
                case 100 /*RPN_LSB*/:
                    c.midiRpn = TypeConversions.int32ToUint16(((c.midiRpn === 0xffff ? 0 : c.midiRpn) & 0x3f80) | controlValue);
                    // TODO
                    return;
                case 98 /*NRPN_LSB*/:
                    c.midiRpn = 0xffff;
                    // TODO
                    return;
                case 99 /*NRPN_MSB*/:
                    c.midiRpn = 0xffff;
                    // TODO
                    return;
                case 120 /*ALL_SOUND_OFF*/:
                    this.channelSoundsOffAll(channel);
                    return;
                case 123 /*ALL_NOTES_OFF*/:
                    this.channelNoteOffAll(channel);
                    return;
                case 121 /*ALL_CTRL_OFF*/:
                    c.midiVolume = c.midiExpression = 16383;
                    c.midiPan = 8192;
                    c.bank = 0;
                    this.channelSetVolume(channel, 1);
                    this.channelSetPan(channel, 0.5);
                    this.channelSetPitchRange(channel, 2);
                    // TODO
                    return;
            }
        }
        /**
         * Gets the current preset index of the given channel.
         * @param channel The channel index
         * @returns The current preset index of the given channel.
         */
        channelGetPresetIndex(channel) {
            return this._channels && channel < this._channels.channelList.length
                ? this._channels.channelList[channel].presetIndex
                : 0;
        }
        /**
         * Gets the current bank of the given channel.
         * @param channel The channel index
         * @returns The current bank of the given channel.
         */
        channelGetPresetBank(channel) {
            return this._channels && channel < this._channels.channelList.length
                ? this._channels.channelList[channel].bank & 0x7fff
                : 0;
        }
        /**
         * Gets the current pan of the given channel.
         * @param channel The channel index
         * @returns The current pan of the given channel.
         */
        channelGetPan(channel) {
            return this._channels && channel < this._channels.channelList.length
                ? this._channels.channelList[channel].panOffset - 0.5
                : 0.5;
        }
        /**
         * Gets the current volume of the given channel.
         * @param channel The channel index
         * @returns The current volune of the given channel.
         */
        channelGetVolume(channel) {
            return this._channels && channel < this._channels.channelList.length
                ? SynthHelper.decibelsToGain(this._channels.channelList[channel].gainDb)
                : 1.0;
        }
        /**
         * Gets the current pitch wheel of the given channel.
         * @param channel The channel index
         * @returns The current pitch wheel of the given channel.
         */
        channelGetPitchWheel(channel) {
            return this._channels && channel < this._channels.channelList.length
                ? this._channels.channelList[channel].pitchWheel
                : 8192;
        }
        /**
         * Gets the current pitch range of the given channel.
         * @param channel The channel index
         * @returns The current pitch range of the given channel.
         */
        channelGetPitchRange(channel) {
            return this._channels && channel < this._channels.channelList.length
                ? this._channels.channelList[channel].pitchRange
                : 2.0;
        }
        /**
         * Gets the current tuning of the given channel.
         * @param channel The channel index
         * @returns The current tuning of the given channel.
         */
        channelGetTuning(channel) {
            return this._channels && channel < this._channels.channelList.length
                ? this._channels.channelList[channel].tuning
                : 0.0;
        }
        loadPresets(hydra) {
            this._presets = new Array(hydra.phdrs.length - 1);
            this.fontSamples = hydra.fontSamples;
            for (let phdrIndex = 0; phdrIndex < hydra.phdrs.length - 1; phdrIndex++) {
                let sortedIndex = 0;
                const phdr = hydra.phdrs[phdrIndex];
                for (let otherPhdrIndex = 0; otherPhdrIndex < hydra.phdrs.length; otherPhdrIndex++) {
                    let otherPhdr = hydra.phdrs[otherPhdrIndex];
                    if (otherPhdrIndex === phdrIndex || otherPhdr.bank > phdr.bank) {
                        continue;
                    }
                    else if (otherPhdr.bank < phdr.bank) {
                        sortedIndex++;
                    }
                    else if (otherPhdr.preset > phdr.preset) {
                        continue;
                    }
                    else if (otherPhdr.preset < phdr.preset) {
                        sortedIndex++;
                    }
                    else if (otherPhdrIndex < phdrIndex) {
                        sortedIndex++;
                    }
                }
                let regionIndex = 0;
                const preset = (this._presets[sortedIndex] = new Preset());
                preset.name = phdr.presetName;
                preset.bank = phdr.bank;
                preset.presetNumber = phdr.preset;
                let regionNum = 0;
                for (let pbagIndex = phdr.presetBagNdx; pbagIndex < hydra.phdrs[phdrIndex + 1].presetBagNdx; pbagIndex++) {
                    const pbag = hydra.pbags[pbagIndex];
                    let plokey = 0;
                    let phikey = 127;
                    let plovel = 0;
                    let phivel = 127;
                    for (let pgenIndex = pbag.genNdx; pgenIndex < hydra.pbags[pbagIndex + 1].genNdx; pgenIndex++) {
                        let pgen = hydra.pgens[pgenIndex];
                        if (pgen.genOper === HydraPgen.GenKeyRange) {
                            plokey = pgen.genAmount.lowByteAmount;
                            phikey = pgen.genAmount.highByteAmount;
                            continue;
                        }
                        if (pgen.genOper === HydraPgen.GenVelRange) {
                            plovel = pgen.genAmount.lowByteAmount;
                            phivel = pgen.genAmount.highByteAmount;
                            continue;
                        }
                        if (pgen.genOper !== HydraPgen.GenInstrument) {
                            continue;
                        }
                        if (pgen.genAmount.wordAmount >= hydra.insts.length) {
                            continue;
                        }
                        let pinst = hydra.insts[pgen.genAmount.wordAmount];
                        for (let ibagIndex = pinst.instBagNdx; ibagIndex < hydra.insts[pgen.genAmount.wordAmount + 1].instBagNdx; ibagIndex++) {
                            let ibag = hydra.ibags[ibagIndex];
                            let ilokey = 0;
                            let ihikey = 127;
                            let ilovel = 0;
                            let ihivel = 127;
                            for (let igenIndex = ibag.instGenNdx; igenIndex < hydra.ibags[ibagIndex + 1].instGenNdx; igenIndex++) {
                                let igen = hydra.igens[igenIndex];
                                if (igen.genOper === HydraPgen.GenKeyRange) {
                                    ilokey = igen.genAmount.lowByteAmount;
                                    ihikey = igen.genAmount.highByteAmount;
                                    continue;
                                }
                                if (igen.genOper === HydraPgen.GenVelRange) {
                                    ilovel = igen.genAmount.lowByteAmount;
                                    ihivel = igen.genAmount.highByteAmount;
                                    continue;
                                }
                                if (igen.genOper === 53 &&
                                    ihikey >= plokey &&
                                    ilokey <= phikey &&
                                    ihivel >= plovel &&
                                    ilovel <= phivel) {
                                    regionNum++;
                                }
                            }
                        }
                    }
                }
                preset.regions = new Array(regionNum);
                let globalRegion = new Region();
                globalRegion.clear(true);
                // Zones.
                for (let pbagIndex = phdr.presetBagNdx; pbagIndex < hydra.phdrs[phdrIndex + 1].presetBagNdx; pbagIndex++) {
                    const pbag = hydra.pbags[pbagIndex];
                    const presetRegion = new Region(globalRegion);
                    let hadGenInstrument = false;
                    // Generators.
                    for (let pgenIndex = pbag.genNdx; pgenIndex < hydra.pbags[pbagIndex + 1].genNdx; pgenIndex++) {
                        const pgen = hydra.pgens[pgenIndex];
                        // Instrument.
                        if (pgen.genOper === HydraPgen.GenInstrument) {
                            let whichInst = pgen.genAmount.wordAmount;
                            if (whichInst >= hydra.insts.length) {
                                continue;
                            }
                            let instRegion = new Region();
                            instRegion.clear(false);
                            // Generators
                            let inst = hydra.insts[whichInst];
                            for (let ibagIndex = inst.instBagNdx; ibagIndex < hydra.insts[whichInst + 1].instBagNdx; ibagIndex++) {
                                let ibag = hydra.ibags[ibagIndex];
                                let zoneRegion = new Region(instRegion);
                                let hadSampleId = false;
                                for (let igenIndex = ibag.instGenNdx; igenIndex < hydra.ibags[ibagIndex + 1].instGenNdx; igenIndex++) {
                                    let igen = hydra.igens[igenIndex];
                                    if (igen.genOper === HydraPgen.GenSampleId) {
                                        // preset region key and vel ranges are a filter for the zone regions
                                        if (zoneRegion.hiKey < presetRegion.loKey ||
                                            zoneRegion.loKey > presetRegion.hiKey) {
                                            continue;
                                        }
                                        if (zoneRegion.hiVel < presetRegion.loVel ||
                                            zoneRegion.loVel > presetRegion.hiVel) {
                                            continue;
                                        }
                                        if (presetRegion.loKey > zoneRegion.loKey) {
                                            zoneRegion.loKey = presetRegion.loKey;
                                        }
                                        if (presetRegion.hiKey < zoneRegion.hiKey) {
                                            zoneRegion.hiKey = presetRegion.hiKey;
                                        }
                                        if (presetRegion.loVel > zoneRegion.loVel) {
                                            zoneRegion.loVel = presetRegion.loVel;
                                        }
                                        if (presetRegion.hiVel < zoneRegion.hiVel) {
                                            zoneRegion.hiVel = presetRegion.hiVel;
                                        }
                                        // sum regions
                                        zoneRegion.offset += presetRegion.offset;
                                        zoneRegion.end += presetRegion.end;
                                        zoneRegion.loopStart += presetRegion.loopStart;
                                        zoneRegion.loopEnd += presetRegion.loopEnd;
                                        zoneRegion.transpose += presetRegion.transpose;
                                        zoneRegion.tune += presetRegion.tune;
                                        zoneRegion.pitchKeyTrack += presetRegion.pitchKeyTrack;
                                        zoneRegion.attenuation += presetRegion.attenuation;
                                        zoneRegion.pan += presetRegion.pan;
                                        zoneRegion.ampEnv.delay += presetRegion.ampEnv.delay;
                                        zoneRegion.ampEnv.attack += presetRegion.ampEnv.attack;
                                        zoneRegion.ampEnv.hold += presetRegion.ampEnv.hold;
                                        zoneRegion.ampEnv.decay += presetRegion.ampEnv.decay;
                                        zoneRegion.ampEnv.sustain += presetRegion.ampEnv.sustain;
                                        zoneRegion.ampEnv.release += presetRegion.ampEnv.release;
                                        zoneRegion.modEnv.delay += presetRegion.modEnv.delay;
                                        zoneRegion.modEnv.attack += presetRegion.modEnv.attack;
                                        zoneRegion.modEnv.hold += presetRegion.modEnv.hold;
                                        zoneRegion.modEnv.decay += presetRegion.modEnv.decay;
                                        zoneRegion.modEnv.sustain += presetRegion.modEnv.sustain;
                                        zoneRegion.modEnv.release += presetRegion.modEnv.release;
                                        zoneRegion.initialFilterQ += presetRegion.initialFilterQ;
                                        zoneRegion.initialFilterFc += presetRegion.initialFilterFc;
                                        zoneRegion.modEnvToPitch += presetRegion.modEnvToPitch;
                                        zoneRegion.modEnvToFilterFc += presetRegion.modEnvToFilterFc;
                                        zoneRegion.delayModLFO += presetRegion.delayModLFO;
                                        zoneRegion.freqModLFO += presetRegion.freqModLFO;
                                        zoneRegion.modLfoToPitch += presetRegion.modLfoToPitch;
                                        zoneRegion.modLfoToFilterFc += presetRegion.modLfoToFilterFc;
                                        zoneRegion.modLfoToVolume += presetRegion.modLfoToVolume;
                                        zoneRegion.delayVibLFO += presetRegion.delayVibLFO;
                                        zoneRegion.freqVibLFO += presetRegion.freqVibLFO;
                                        zoneRegion.vibLfoToPitch += presetRegion.vibLfoToPitch;
                                        // EG times need to be converted from timecents to seconds.
                                        zoneRegion.ampEnv.envToSecs(true);
                                        zoneRegion.modEnv.envToSecs(false);
                                        // LFO times need to be converted from timecents to seconds.
                                        zoneRegion.delayModLFO =
                                            zoneRegion.delayModLFO < -11950.0
                                                ? 0.0
                                                : SynthHelper.timecents2Secs(zoneRegion.delayModLFO);
                                        zoneRegion.delayVibLFO =
                                            zoneRegion.delayVibLFO < -11950.0
                                                ? 0.0
                                                : SynthHelper.timecents2Secs(zoneRegion.delayVibLFO);
                                        // Pin values to their ranges.
                                        if (zoneRegion.pan < -0.5) {
                                            zoneRegion.pan = -0.5;
                                        }
                                        else if (zoneRegion.pan > 0.5) {
                                            zoneRegion.pan = 0.5;
                                        }
                                        if (zoneRegion.initialFilterQ < 1500 || zoneRegion.initialFilterQ > 13500) {
                                            zoneRegion.initialFilterQ = 0;
                                        }
                                        let shdr = hydra.sHdrs[igen.genAmount.wordAmount];
                                        zoneRegion.offset += shdr.start;
                                        zoneRegion.end += shdr.end;
                                        zoneRegion.loopStart += shdr.startLoop;
                                        zoneRegion.loopEnd += shdr.endLoop;
                                        if (shdr.endLoop > 0) {
                                            zoneRegion.loopEnd -= 1;
                                        }
                                        if (zoneRegion.pitchKeyCenter === -1) {
                                            zoneRegion.pitchKeyCenter = shdr.originalPitch;
                                        }
                                        zoneRegion.tune += shdr.pitchCorrection;
                                        zoneRegion.sampleRate = shdr.sampleRate;
                                        if (zoneRegion.end !== 0 && zoneRegion.end < this.fontSamples.length) {
                                            zoneRegion.end++;
                                        }
                                        else {
                                            zoneRegion.end = this.fontSamples.length;
                                        }
                                        preset.regions[regionIndex] = new Region(zoneRegion);
                                        regionIndex++;
                                        hadSampleId = true;
                                    }
                                    else {
                                        zoneRegion.operator(igen.genOper, igen.genAmount);
                                    }
                                }
                                // Handle instrument's global zone.
                                if (ibag === hydra.ibags[inst.instBagNdx] && !hadSampleId) {
                                    instRegion = new Region(zoneRegion);
                                }
                                // Modulators (TODO)
                                //if (ibag->instModNdx < ibag[1].instModNdx) addUnsupportedOpcode("any modulator");
                            }
                            hadGenInstrument = true;
                        }
                        else {
                            presetRegion.operator(pgen.genOper, pgen.genAmount);
                        }
                    }
                    // Modulators (TODO)
                    // if (pbag->modNdx < pbag[1].modNdx) addUnsupportedOpcode("any modulator");
                    // Handle preset's global zone.
                    if (pbag === hydra.pbags[phdr.presetBagNdx] && !hadGenInstrument) {
                        globalRegion = presetRegion;
                    }
                }
            }
        }
    }
    TinySoundFont.MicroBufferCount = 32; // 4069 samples in total
    TinySoundFont.MicroBufferSize = 64; // 64 stereo samples

    class EventEmitter {
        constructor() {
            this._listeners = [];
        }
        on(value) {
            this._listeners.push(value);
        }
        off(value) {
            this._listeners = this._listeners.filter(l => l !== value);
        }
        trigger() {
            for (const l of this._listeners) {
                l();
            }
        }
    }
    class EventEmitterOfT {
        constructor() {
            this._listeners = [];
        }
        on(value) {
            this._listeners.push(value);
        }
        off(value) {
            this._listeners = this._listeners.filter(l => l !== value);
        }
        trigger(arg) {
            for (const l of this._listeners) {
                l(arg);
            }
        }
    }

    class MidiFileSequencerTempoChange {
        constructor(bpm, ticks, time) {
            this.bpm = bpm;
            this.ticks = ticks;
            this.time = time;
        }
    }
    /**
     * This sequencer dispatches midi events to the synthesizer based on the current
     * synthesize position. The sequencer does not consider the playback speed.
     */
    class MidiFileSequencer {
        constructor(synthesizer) {
            this._tempoChanges = [];
            this._firstProgramEventPerChannel = new Map();
            this._synthData = [];
            this._division = 0;
            this._eventIndex = 0;
            this._currentTime = 0;
            this._playbackRange = null;
            this._playbackRangeStartTime = 0;
            this._playbackRangeEndTime = 0;
            this._endTime = 0;
            this.isLooping = false;
            /**
             * Gets the duration of the song in ticks.
             */
            this.endTick = 0;
            /**
             * Gets or sets the playback speed.
             */
            this.playbackSpeed = 1;
            this.finished = new EventEmitter();
            this._synthesizer = synthesizer;
        }
        get playbackRange() {
            return this._playbackRange;
        }
        set playbackRange(value) {
            this._playbackRange = value;
            if (value) {
                this._playbackRangeStartTime = this.tickPositionToTimePositionWithSpeed(value.startTick, 1);
                this._playbackRangeEndTime = this.tickPositionToTimePositionWithSpeed(value.endTick, 1);
            }
        }
        get endTime() {
            return this._endTime / this.playbackSpeed;
        }
        seek(timePosition) {
            // map to speed=1
            timePosition *= this.playbackSpeed;
            // ensure playback range
            if (this.playbackRange) {
                if (timePosition < this._playbackRangeStartTime) {
                    timePosition = this._playbackRangeStartTime;
                }
                else if (timePosition > this._playbackRangeEndTime) {
                    timePosition = this._playbackRangeEndTime;
                }
            }
            // move back some ticks to ensure the on-time events are played
            timePosition -= 25;
            if (timePosition < 0) {
                timePosition = 0;
            }
            if (timePosition > this._currentTime) {
                this.silentProcess(timePosition - this._currentTime);
            }
            else if (timePosition < this._currentTime) {
                // we have to restart the midi to make sure we get the right state: instruments, volume, pan, etc
                this._currentTime = 0;
                this._eventIndex = 0;
                let metronomeVolume = this._synthesizer.metronomeVolume;
                this._synthesizer.noteOffAll(true);
                this._synthesizer.resetSoft();
                this._synthesizer.setupMetronomeChannel(metronomeVolume);
                this.silentProcess(timePosition);
            }
        }
        silentProcess(milliseconds) {
            if (milliseconds <= 0) {
                return;
            }
            let start = Date.now();
            let finalTime = this._currentTime + milliseconds;
            while (this._currentTime < finalTime) {
                if (this.fillMidiEventQueueLimited(finalTime - this._currentTime)) {
                    this._synthesizer.synthesizeSilent();
                }
            }
            let duration = Date.now() - start;
            Logger.debug('Sequencer', 'Silent seek finished in ' + duration + 'ms');
        }
        loadMidi(midiFile) {
            this._tempoChanges = [];
            this._division = midiFile.division;
            this._eventIndex = 0;
            this._currentTime = 0;
            // build synth events.
            this._synthData = [];
            // Converts midi to milliseconds for easy sequencing
            let bpm = 120;
            let absTick = 0;
            let absTime = 0.0;
            let metronomeLength = 0;
            let metronomeTick = 0;
            let metronomeTime = 0.0;
            let previousTick = 0;
            for (let mEvent of midiFile.events) {
                let synthData = new SynthEvent(this._synthData.length, mEvent);
                this._synthData.push(synthData);
                let deltaTick = mEvent.tick - previousTick;
                absTick += deltaTick;
                absTime += deltaTick * (60000.0 / (bpm * midiFile.division));
                synthData.time = absTime;
                previousTick = mEvent.tick;
                if (mEvent.command === MidiEventType.Meta && mEvent.data1 === MetaEventType.Tempo) {
                    let meta = mEvent;
                    bpm = 60000000 / meta.value;
                    this._tempoChanges.push(new MidiFileSequencerTempoChange(bpm, absTick, absTime));
                }
                else if (mEvent.command === MidiEventType.Meta && mEvent.data1 === MetaEventType.TimeSignature) {
                    let meta = mEvent;
                    let timeSignatureDenominator = Math.pow(2, meta.data[1]);
                    metronomeLength = (this._division * (4.0 / timeSignatureDenominator)) | 0;
                }
                else if (mEvent.command === MidiEventType.ProgramChange) {
                    let channel = mEvent.channel;
                    if (!this._firstProgramEventPerChannel.has(channel)) {
                        this._firstProgramEventPerChannel.set(channel, synthData);
                    }
                }
                if (metronomeLength > 0) {
                    while (metronomeTick < absTick) {
                        let metronome = SynthEvent.newMetronomeEvent(this._synthData.length);
                        this._synthData.push(metronome);
                        metronome.time = metronomeTime;
                        metronomeTick += metronomeLength;
                        metronomeTime += metronomeLength * (60000.0 / (bpm * midiFile.division));
                    }
                }
            }
            this._synthData.sort((a, b) => {
                if (a.time > b.time) {
                    return 1;
                }
                if (a.time < b.time) {
                    return -1;
                }
                return a.eventIndex - b.eventIndex;
            });
            this._endTime = absTime;
            this.endTick = absTick;
        }
        fillMidiEventQueue() {
            return this.fillMidiEventQueueLimited(-1);
        }
        fillMidiEventQueueLimited(maxMilliseconds) {
            let millisecondsPerBuffer = (TinySoundFont.MicroBufferSize / this._synthesizer.outSampleRate) * 1000 * this.playbackSpeed;
            if (maxMilliseconds > 0 && maxMilliseconds < millisecondsPerBuffer) {
                millisecondsPerBuffer = maxMilliseconds;
            }
            let anyEventsDispatched = false;
            let endTime = this.internalEndTime;
            for (let i = 0; i < TinySoundFont.MicroBufferCount; i++) {
                this._currentTime += millisecondsPerBuffer;
                while (this._eventIndex < this._synthData.length &&
                    this._synthData[this._eventIndex].time < this._currentTime &&
                    this._currentTime < endTime) {
                    this._synthesizer.dispatchEvent(i, this._synthData[this._eventIndex]);
                    this._eventIndex++;
                    anyEventsDispatched = true;
                }
            }
            return anyEventsDispatched;
        }
        tickPositionToTimePosition(tickPosition) {
            return this.tickPositionToTimePositionWithSpeed(tickPosition, this.playbackSpeed);
        }
        timePositionToTickPosition(timePosition) {
            return this.timePositionToTickPositionWithSpeed(timePosition, this.playbackSpeed);
        }
        tickPositionToTimePositionWithSpeed(tickPosition, playbackSpeed) {
            let timePosition = 0.0;
            let bpm = 120.0;
            let lastChange = 0;
            // find start and bpm of last tempo change before time
            for (const c of this._tempoChanges) {
                if (tickPosition < c.ticks) {
                    break;
                }
                timePosition = c.time;
                bpm = c.bpm;
                lastChange = c.ticks;
            }
            // add the missing millis
            tickPosition -= lastChange;
            timePosition += tickPosition * (60000.0 / (bpm * this._division));
            return timePosition / playbackSpeed;
        }
        timePositionToTickPositionWithSpeed(timePosition, playbackSpeed) {
            timePosition *= playbackSpeed;
            let ticks = 0;
            let bpm = 120.0;
            let lastChange = 0;
            // find start and bpm of last tempo change before time
            for (const c of this._tempoChanges) {
                if (timePosition < c.time) {
                    break;
                }
                ticks = c.ticks;
                bpm = c.bpm;
                lastChange = c.time;
            }
            // add the missing ticks
            timePosition -= lastChange;
            ticks += (timePosition / (60000.0 / (bpm * this._division))) | 0;
            // we add 1 for possible rounding errors.(floating point issuses)
            return ticks + 1;
        }
        get internalEndTime() {
            return !this.playbackRange ? this._endTime : this._playbackRangeEndTime;
        }
        checkForStop() {
            if (this._currentTime >= this.internalEndTime) {
                let metronomeVolume = this._synthesizer.metronomeVolume;
                this._synthesizer.noteOffAll(true);
                this._synthesizer.resetSoft();
                this._synthesizer.setupMetronomeChannel(metronomeVolume);
                this.finished.trigger();
            }
        }
        stop() {
            if (!this.playbackRange) {
                this._currentTime = 0;
                this._eventIndex = 0;
            }
            else if (this.playbackRange) {
                this._currentTime = this.playbackRange.startTick;
                this._eventIndex = 0;
            }
        }
        setChannelProgram(channel, program) {
            if (this._firstProgramEventPerChannel.has(channel)) {
                this._firstProgramEventPerChannel.get(channel).event.data1 = program;
            }
        }
    }

    /**
     * Lists the different states of the player
     */
    var PlayerState;
    (function (PlayerState) {
        /**
         * Player is paused
         */
        PlayerState[PlayerState["Paused"] = 0] = "Paused";
        /**
         * Player is playing
         */
        PlayerState[PlayerState["Playing"] = 1] = "Playing";
    })(PlayerState || (PlayerState = {}));

    /**
     * Represents the info when the player state changes.
     */
    class PlayerStateChangedEventArgs {
        /**
         * Initializes a new instance of the {@link PlayerStateChangedEventArgs} class.
         * @param state The state.
         */
        constructor(state, stopped) {
            this.state = state;
            this.stopped = stopped;
        }
    }

    /**
     * Represents the info when the time in the synthesizer changes.
     */
    class PositionChangedEventArgs {
        /**
         * Initializes a new instance of the {@link PositionChangedEventArgs} class.
         * @param currentTime The current time.
         * @param endTime The end time.
         * @param currentTick The current tick.
         * @param endTick The end tick.
         */
        constructor(currentTime, endTime, currentTick, endTick) {
            this.currentTime = currentTime;
            this.endTime = endTime;
            this.currentTick = currentTick;
            this.endTick = endTick;
        }
    }

    /**
     * This is the main synthesizer component which can be used to
     * play a {@link MidiFile} via a {@link ISynthOutput}.
     */
    class AlphaSynth {
        /**
         * Initializes a new instance of the {@link AlphaSynth} class.
         * @param output The output to use for playing the generated samples.
         */
        constructor(output) {
            this._isSoundFontLoaded = false;
            this._isMidiLoaded = false;
            this._tickPosition = 0;
            this._timePosition = 0;
            this._metronomeVolume = 0;
            this.isReady = false;
            this.state = PlayerState.Paused;
            this.ready = new EventEmitter();
            this.readyForPlayback = new EventEmitter();
            this.finished = new EventEmitter();
            this.soundFontLoaded = new EventEmitter();
            this.soundFontLoadFailed = new EventEmitterOfT();
            this.midiLoaded = new EventEmitter();
            this.midiLoadFailed = new EventEmitterOfT();
            this.stateChanged = new EventEmitterOfT();
            this.positionChanged = new EventEmitterOfT();
            Logger.debug('AlphaSynth', 'Initializing player');
            this.state = PlayerState.Paused;
            Logger.debug('AlphaSynth', 'Creating output');
            this.output = output;
            this.output.ready.on(() => {
                this.isReady = true;
                this.ready.trigger();
                this.checkReadyForPlayback();
            });
            this.output.finished.on(() => {
                // stop everything
                this.stop();
                Logger.debug('AlphaSynth', 'Finished playback');
                this.finished.trigger();
                if (this._sequencer.isLooping) {
                    this.play();
                }
            });
            this.output.sampleRequest.on(() => {
                // synthesize buffer
                this._sequencer.fillMidiEventQueue();
                let samples = this._synthesizer.synthesize();
                // send it to output
                this.output.addSamples(samples);
                // tell sequencer to check whether its work is done
                this._sequencer.checkForStop();
            });
            this.output.samplesPlayed.on(this.onSamplesPlayed.bind(this));
            Logger.debug('AlphaSynth', 'Creating synthesizer');
            this._synthesizer = new TinySoundFont(this.output.sampleRate);
            this._sequencer = new MidiFileSequencer(this._synthesizer);
            this._sequencer.finished.on(this.output.sequencerFinished.bind(this.output));
            Logger.debug('AlphaSynth', 'Opening output');
            this.output.open();
        }
        get isReadyForPlayback() {
            return this.isReady && this._isSoundFontLoaded && this._isMidiLoaded;
        }
        get logLevel() {
            return Logger.logLevel;
        }
        set logLevel(value) {
            Logger.logLevel = value;
        }
        get masterVolume() {
            return this._synthesizer.globalGainDb;
        }
        set masterVolume(value) {
            value = SynthHelper.clamp(value, SynthConstants.MinVolume, SynthConstants.MaxVolume);
            this._synthesizer.globalGainDb = value;
        }
        get metronomeVolume() {
            return this._metronomeVolume;
        }
        set metronomeVolume(value) {
            value = SynthHelper.clamp(value, SynthConstants.MinVolume, SynthConstants.MaxVolume);
            this._metronomeVolume = value;
            this._synthesizer.metronomeVolume = value;
        }
        get playbackSpeed() {
            return this._sequencer.playbackSpeed;
        }
        set playbackSpeed(value) {
            value = SynthHelper.clamp(value, SynthConstants.MinPlaybackSpeed, SynthConstants.MaxPlaybackSpeed);
            let oldSpeed = this._sequencer.playbackSpeed;
            this._sequencer.playbackSpeed = value;
            this.updateTimePosition(this._timePosition * (oldSpeed / value));
        }
        get tickPosition() {
            return this._tickPosition;
        }
        set tickPosition(value) {
            this.timePosition = this._sequencer.tickPositionToTimePosition(value);
        }
        get timePosition() {
            return this._timePosition;
        }
        set timePosition(value) {
            Logger.debug('AlphaSynth', `Seeking to position ${value}ms`);
            // tell the sequencer to jump to the given position
            this._sequencer.seek(value);
            // update the internal position
            this.updateTimePosition(value);
            // tell the output to reset the already synthesized buffers and request data again
            this.output.resetSamples();
        }
        get playbackRange() {
            return this._sequencer.playbackRange;
        }
        set playbackRange(value) {
            this._sequencer.playbackRange = value;
            if (value) {
                this.tickPosition = value.startTick;
            }
        }
        get isLooping() {
            return this._sequencer.isLooping;
        }
        set isLooping(value) {
            this._sequencer.isLooping = value;
        }
        destroy() {
            Logger.debug('AlphaSynth', 'Destroying player');
            this.stop();
        }
        play() {
            if (this.state === PlayerState.Playing || !this.isReadyForPlayback) {
                return false;
            }
            this.output.activate();
            this._synthesizer.setupMetronomeChannel(this.metronomeVolume);
            Logger.debug('AlphaSynth', 'Starting playback');
            this.state = PlayerState.Playing;
            this.stateChanged.trigger(new PlayerStateChangedEventArgs(this.state, false));
            this.output.play();
            return true;
        }
        pause() {
            if (this.state === PlayerState.Paused || !this.isReadyForPlayback) {
                return;
            }
            Logger.debug('AlphaSynth', 'Pausing playback');
            this.state = PlayerState.Paused;
            this.stateChanged.trigger(new PlayerStateChangedEventArgs(this.state, false));
            this.output.pause();
            this._synthesizer.noteOffAll(false);
        }
        playPause() {
            if (this.state === PlayerState.Playing || !this.isReadyForPlayback) {
                this.pause();
            }
            else {
                this.play();
            }
        }
        stop() {
            if (!this.isReadyForPlayback) {
                return;
            }
            Logger.debug('AlphaSynth', 'Stopping playback');
            this.state = PlayerState.Paused;
            this.output.pause();
            this._sequencer.stop();
            this._synthesizer.noteOffAll(true);
            this.tickPosition = this._sequencer.playbackRange ? this._sequencer.playbackRange.startTick : 0;
            this.stateChanged.trigger(new PlayerStateChangedEventArgs(this.state, true));
        }
        loadSoundFont(data) {
            this.pause();
            let input = ByteBuffer.fromBuffer(data);
            try {
                Logger.info('AlphaSynth', 'Loading soundfont from bytes');
                let soundFont = new Hydra();
                soundFont.load(input);
                this._synthesizer.loadPresets(soundFont);
                this._isSoundFontLoaded = true;
                this.soundFontLoaded.trigger();
                Logger.info('AlphaSynth', 'soundFont successfully loaded');
                this.checkReadyForPlayback();
            }
            catch (e) {
                Logger.error('AlphaSynth', 'Could not load soundfont from bytes ' + e);
                this.soundFontLoadFailed.trigger(e);
            }
        }
        checkReadyForPlayback() {
            if (this.isReadyForPlayback) {
                this._synthesizer.setupMetronomeChannel(this.metronomeVolume);
                this.readyForPlayback.trigger();
            }
        }
        /**
         * Loads the given midi file for playback.
         * @param midiFile The midi file to load
         */
        loadMidiFile(midiFile) {
            this.stop();
            try {
                Logger.info('AlphaSynth', 'Loading midi from model');
                this._sequencer.loadMidi(midiFile);
                this._isMidiLoaded = true;
                this.midiLoaded.trigger();
                Logger.info('AlphaSynth', 'Midi successfully loaded');
                this.checkReadyForPlayback();
                this.tickPosition = 0;
            }
            catch (e) {
                Logger.error('AlphaSynth', 'Could not load midi from model ' + e);
                this.midiLoadFailed.trigger(e);
            }
        }
        setChannelMute(channel, mute) {
            this._synthesizer.channelSetMute(channel, mute);
        }
        resetChannelStates() {
            this._synthesizer.resetChannelStates();
        }
        setChannelSolo(channel, solo) {
            this._synthesizer.channelSetSolo(channel, solo);
        }
        setChannelVolume(channel, volume) {
            volume = SynthHelper.clamp(volume, SynthConstants.MinVolume, SynthConstants.MaxVolume);
            this._synthesizer.channelSetMixVolume(channel, volume);
        }
        setChannelProgram(channel, program) {
            program = SynthHelper.clamp(program, SynthConstants.MinProgram, SynthConstants.MaxProgram);
            this._sequencer.setChannelProgram(channel, program);
            this._synthesizer.channelSetPresetNumber(channel, program, false);
        }
        onSamplesPlayed(sampleCount) {
            let playedMillis = (sampleCount / this._synthesizer.outSampleRate) * 1000;
            this.updateTimePosition(this._timePosition + playedMillis);
        }
        updateTimePosition(timePosition) {
            // update the real positions
            const currentTime = (this._timePosition = timePosition);
            const currentTick = (this._tickPosition = this._sequencer.timePositionToTickPosition(currentTime));
            const endTime = this._sequencer.endTime;
            const endTick = this._sequencer.endTick;
            Logger.debug('AlphaSynth', `Position changed: (time: ${currentTime}/${endTime}, tick: ${currentTick}/${endTime}, Active Voices: ${this._synthesizer.activeVoiceCount}`);
            this.positionChanged.trigger(new PositionChangedEventArgs(currentTime, endTime, currentTick, endTick));
        }
    }

    /**
     * Represents a midi file with a single track that can be played via {@link AlphaSynth}
     */
    class MidiFile {
        constructor() {
            /**
             * Gets or sets the division per quarter notes.
             */
            this.division = MidiUtils.QuarterTime;
            /**
             * Gets a list of midi events sorted by time.
             */
            this.events = [];
        }
        /**
         * Adds the given midi event a the correct time position into the file.
         */
        addEvent(e) {
            if (this.events.length === 0) {
                this.events.push(e);
            }
            else {
                let insertPos = this.events.length;
                while (insertPos > 0) {
                    const prevItem = this.events[insertPos - 1];
                    if (prevItem.tick > e.tick) {
                        insertPos--;
                    }
                    else {
                        break;
                    }
                }
                this.events.splice(insertPos, 0, e);
            }
        }
        /**
         * Writes the midi file into a binary format.
         * @returns The binary midi file.
         */
        toBinary() {
            let data = ByteBuffer.empty();
            this.writeTo(data);
            return data.toArray();
        }
        /**
         * Writes the midi file as binary into the given stream.
         * @returns The stream to write to.
         */
        writeTo(s) {
            // magic number "MThd" (0x4D546864)
            let b = new Uint8Array([0x4d, 0x54, 0x68, 0x64]);
            s.write(b, 0, b.length);
            // Header Length 6 (0x00000006)
            b = new Uint8Array([0x00, 0x00, 0x00, 0x06]);
            s.write(b, 0, b.length);
            // format
            b = new Uint8Array([0x00, 0x00]);
            s.write(b, 0, b.length);
            // number of tracks
            let v = 1;
            b = new Uint8Array([(v >> 8) & 0xff, v & 0xff]);
            s.write(b, 0, b.length);
            v = this.division;
            b = new Uint8Array([(v >> 8) & 0xff, v & 0xff]);
            s.write(b, 0, b.length);
            // build track data first
            let trackData = ByteBuffer.empty();
            let previousTick = 0;
            for (let midiEvent of this.events) {
                let delta = midiEvent.tick - previousTick;
                MidiFile.writeVariableInt(trackData, delta);
                midiEvent.writeTo(trackData);
                previousTick = midiEvent.tick;
            }
            // end of track
            // magic number "MTrk" (0x4D54726B)
            b = new Uint8Array([0x4d, 0x54, 0x72, 0x6b]);
            s.write(b, 0, b.length);
            // size as integer
            let data = trackData.toArray();
            let l = data.length;
            b = new Uint8Array([(l >> 24) & 0xff, (l >> 16) & 0xff, (l >> 8) & 0xff, l & 0xff]);
            s.write(b, 0, b.length);
            s.write(data, 0, data.length);
        }
        static writeVariableInt(s, value) {
            let array = new Uint8Array(4);
            let n = 0;
            do {
                array[n++] = value & 0x7f;
                value >>= 7;
            } while (value > 0);
            while (n > 0) {
                n--;
                if (n > 0) {
                    s.writeByte(array[n] | 0x80);
                }
                else {
                    s.writeByte(array[n]);
                }
            }
        }
    }

    class MetaDataEvent extends MetaEvent {
        constructor(delta, status, metaId, data) {
            super(delta, status, metaId, 0);
            this.data = data;
        }
        writeTo(s) {
            s.writeByte(0xff);
            s.writeByte(this.metaStatus);
            let l = this.data.length;
            MidiFile.writeVariableInt(s, l);
            s.write(this.data, 0, this.data.length);
        }
    }

    class MetaNumberEvent extends MetaEvent {
        constructor(delta, status, metaId, value) {
            super(delta, status, metaId, 0);
            this.value = value;
        }
        writeTo(s) {
            s.writeByte(0xff);
            s.writeByte(this.metaStatus);
            MidiFile.writeVariableInt(s, 3);
            let b = new Uint8Array([(this.value >> 16) & 0xff, (this.value >> 8) & 0xff, this.value & 0xff]);
            s.write(b, 0, b.length);
        }
    }

    var SystemCommonType;
    (function (SystemCommonType) {
        SystemCommonType[SystemCommonType["SystemExclusive"] = 240] = "SystemExclusive";
        SystemCommonType[SystemCommonType["MtcQuarterFrame"] = 241] = "MtcQuarterFrame";
        SystemCommonType[SystemCommonType["SongPosition"] = 242] = "SongPosition";
        SystemCommonType[SystemCommonType["SongSelect"] = 243] = "SongSelect";
        SystemCommonType[SystemCommonType["TuneRequest"] = 246] = "TuneRequest";
        SystemCommonType[SystemCommonType["SystemExclusive2"] = 247] = "SystemExclusive2";
    })(SystemCommonType || (SystemCommonType = {}));
    class SystemCommonEvent extends MidiEvent {
        get channel() {
            return -1;
        }
        get command() {
            return (this.message & 0x00000ff);
        }
        constructor(delta, status, data1, data2) {
            super(delta, status, data1, data2);
        }
    }

    class SystemExclusiveEvent extends SystemCommonEvent {
        constructor(delta, status, id, data) {
            super(delta, status, id & 0x00ff, (id >> 8) & 0xff);
            this.data = data;
        }
        get manufacturerId() {
            return this.message >> 8;
        }
        writeTo(s) {
            s.writeByte(0xf0);
            let l = this.data.length + 2;
            s.writeByte(this.manufacturerId);
            let b = new Uint8Array([(l >> 24) & 0xff, (l >> 16) & 0xff, (l >> 8) & 0xff, l & 0xff]);
            s.write(b, 0, b.length);
            s.writeByte(0xf7);
        }
    }

    /**
     * All settings related to importers that decode file formats.
     * @json
     */
    class ImporterSettings {
        constructor() {
            /**
             * The text encoding to use when decoding strings. By default UTF-8 is used.
             */
            this.encoding = 'utf-8';
            /**
             * If part-groups should be merged into a single track.
             */
            this.mergePartGroupsInMusicXml = false;
        }
        static toJson(obj) { var json = {}; obj.fillToJson(json); return json; }
        fillToJson(json) { json.encoding = this.encoding; json.mergePartGroupsInMusicXml = this.mergePartGroupsInMusicXml; }
        static fromJson(json) { if (!json)
            return null; var obj = new ImporterSettings(); obj.fillFromJson(json); return obj; }
        fillFromJson(json) { if (json)
            for (const $k in json)
                this.setProperty($k.toLowerCase(), json[$k]); }
        setProperty(property, value) { switch (property) {
            case "encoding":
                this.encoding = value;
                return true;
            case "mergepartgroupsinmusicxml":
                this.mergePartGroupsInMusicXml = value;
                return true;
        } return false; }
    }

    /**
     * Lists all modes how alphaTab can scroll the container during playback.
     */
    (function (ScrollMode) {
        /**
         * Do not scroll automatically
         */
        ScrollMode[ScrollMode["Off"] = 0] = "Off";
        /**
         * Scrolling happens as soon the offsets of the cursors change.
         */
        ScrollMode[ScrollMode["Continuous"] = 1] = "Continuous";
        /**
         * Scrolling happens as soon the cursors exceed the displayed range.
         */
        ScrollMode[ScrollMode["OffScreen"] = 2] = "OffScreen";
    })(exports.ScrollMode || (exports.ScrollMode = {}));
    /**
     * This object defines the details on how to generate the vibrato effects.
     * @json
     */
    class VibratoPlaybackSettings {
        constructor() {
            /**
             * Gets or sets the wavelength of the note-wide vibrato in midi ticks.
             */
            this.noteWideLength = 480;
            /**
             * Gets or sets the amplitude for the note-wide vibrato in semitones.
             */
            this.noteWideAmplitude = 2;
            /**
             * Gets or sets the wavelength of the note-slight vibrato in midi ticks.
             */
            this.noteSlightLength = 480;
            /**
             * Gets or sets the amplitude for the note-slight vibrato in semitones.
             */
            this.noteSlightAmplitude = 2;
            /**
             * Gets or sets the wavelength of the beat-wide vibrato in midi ticks.
             */
            this.beatWideLength = 240;
            /**
             * Gets or sets the amplitude for the beat-wide vibrato in semitones.
             */
            this.beatWideAmplitude = 3;
            /**
             * Gets or sets the wavelength of the beat-slight vibrato in midi ticks.
             */
            this.beatSlightLength = 240;
            /**
             * Gets or sets the amplitude for the beat-slight vibrato in semitones.
             */
            this.beatSlightAmplitude = 3;
        }
        static toJson(obj) { var json = {}; obj.fillToJson(json); return json; }
        fillToJson(json) { json.noteWideLength = this.noteWideLength; json.noteWideAmplitude = this.noteWideAmplitude; json.noteSlightLength = this.noteSlightLength; json.noteSlightAmplitude = this.noteSlightAmplitude; json.beatWideLength = this.beatWideLength; json.beatWideAmplitude = this.beatWideAmplitude; json.beatSlightLength = this.beatSlightLength; json.beatSlightAmplitude = this.beatSlightAmplitude; }
        static fromJson(json) { if (!json)
            return null; var obj = new VibratoPlaybackSettings(); obj.fillFromJson(json); return obj; }
        fillFromJson(json) { if (json)
            for (const $k in json)
                this.setProperty($k.toLowerCase(), json[$k]); }
        setProperty(property, value) { switch (property) {
            case "notewidelength":
                this.noteWideLength = value;
                return true;
            case "notewideamplitude":
                this.noteWideAmplitude = value;
                return true;
            case "noteslightlength":
                this.noteSlightLength = value;
                return true;
            case "noteslightamplitude":
                this.noteSlightAmplitude = value;
                return true;
            case "beatwidelength":
                this.beatWideLength = value;
                return true;
            case "beatwideamplitude":
                this.beatWideAmplitude = value;
                return true;
            case "beatslightlength":
                this.beatSlightLength = value;
                return true;
            case "beatslightamplitude":
                this.beatSlightAmplitude = value;
                return true;
        } return false; }
    }
    /**
     * The player settings control how the audio playback and UI is behaving.
     * @json
     */
    class PlayerSettings {
        constructor() {
            /**
             * Gets or sets the URl of the sound font to be loaded.
             */
            this.soundFont = null;
            /**
             * Gets or sets the element that should be used for scrolling.
             */
            this.scrollElement = 'html,body';
            /**
             * Gets or sets whether the player should be enabled.
             */
            this.enablePlayer = false;
            /**
             * Gets or sets whether playback cursors should be displayed.
             */
            this.enableCursor = true;
            /**
             * Gets or sets alphaTab should provide user interaction features to
             * select playback ranges and jump to the playback position by click (aka. seeking).
             */
            this.enableUserInteraction = true;
            /**
             * Gets or sets the X-offset to add when scrolling.
             */
            this.scrollOffsetX = 0;
            /**
             * Gets or sets the Y-offset to add when scrolling
             */
            this.scrollOffsetY = 0;
            /**
             * Gets or sets the mode how to scroll.
             */
            this.scrollMode = exports.ScrollMode.Continuous;
            /**
             * Gets or sets how fast the scrolling to the new position should happen (in milliseconds)
             */
            this.scrollSpeed = 300;
            /**
             * Gets or sets the bend duration in milliseconds for songbook bends.
             */
            this.songBookBendDuration = 75;
            /**
             * Gets or sets the duration of whammy dips in milliseconds for songbook whammys.
             */
            this.songBookDipDuration = 150;
            /**
             * Gets or sets the settings on how the vibrato audio is generated.
             */
            this.vibrato = new VibratoPlaybackSettings();
            /**
             * Gets or sets whether the triplet feel should be applied/played during audio playback.
             */
            this.playTripletFeel = true;
        }
        static toJson(obj) { var json = {}; obj.fillToJson(json); return json; }
        fillToJson(json) { json.soundFont = this.soundFont; json.scrollElement = this.scrollElement; json.enablePlayer = this.enablePlayer; json.enableCursor = this.enableCursor; json.enableUserInteraction = this.enableUserInteraction; json.scrollOffsetX = this.scrollOffsetX; json.scrollOffsetY = this.scrollOffsetY; json.scrollMode = this.scrollMode; json.scrollSpeed = this.scrollSpeed; json.songBookBendDuration = this.songBookBendDuration; json.songBookDipDuration = this.songBookDipDuration; if (json.vibrato)
            this.vibrato.fillToJson(json.vibrato);
        else
            json.vibrato = (VibratoPlaybackSettings.toJson(this.vibrato)); json.playTripletFeel = this.playTripletFeel; }
        static fromJson(json) { if (!json)
            return null; var obj = new PlayerSettings(); obj.fillFromJson(json); return obj; }
        fillFromJson(json) { if (json)
            for (const $k in json)
                this.setProperty($k.toLowerCase(), json[$k]); }
        setProperty(property, value) { switch (property) {
            case "soundfont":
                this.soundFont = value;
                return true;
            case "scrollelement":
                this.scrollElement = value;
                return true;
            case "enableplayer":
                this.enablePlayer = value;
                return true;
            case "enablecursor":
                this.enableCursor = value;
                return true;
            case "enableuserinteraction":
                this.enableUserInteraction = value;
                return true;
            case "scrolloffsetx":
                this.scrollOffsetX = value;
                return true;
            case "scrolloffsety":
                this.scrollOffsetY = value;
                return true;
            case "scrollmode":
                this.scrollMode = typeof value === "string" ? exports.ScrollMode[Object.keys(exports.ScrollMode).find($k => $k.toLowerCase() === value.toLowerCase())] : value;
                return true;
            case "scrollspeed":
                this.scrollSpeed = value;
                return true;
            case "songbookbendduration":
                this.songBookBendDuration = value;
                return true;
            case "songbookdipduration":
                this.songBookDipDuration = value;
                return true;
            case "playtripletfeel":
                this.playTripletFeel = value;
                return true;
        } if (["vibrato"].indexOf(property) >= 0) {
            if (this.vibrato)
                this.vibrato.fillFromJson(value);
            else
                this.vibrato = (VibratoPlaybackSettings.fromJson(value));
            return true;
        }
        else {
            for (const $c of ["vibrato"])
                if (property.indexOf($c) === 0) {
                    if (!this.vibrato)
                        this.vibrato = new VibratoPlaybackSettings();
                    if (this.vibrato.setProperty(property.substring($c.length), value))
                        return true;
                }
        } return false; }
    }

    /**
     * This public class contains instance specific settings for alphaTab
     * @json
     */
    class Settings {
        constructor() {
            /**
             * The core settings control the general behavior of alphatab like
             * what modules are active.
             * @json_on_parent
             */
            this.core = new CoreSettings();
            /**
             * The display settings control how the general layout and display of alphaTab is done.
             * @json_on_parent
             */
            this.display = new DisplaySettings();
            /**
             * The notation settings control how various music notation elements are shown and behaving.
             */
            this.notation = new NotationSettings();
            /**
             * All settings related to importers that decode file formats.
             */
            this.importer = new ImporterSettings();
            /**
             * Contains all player related settings
             */
            this.player = new PlayerSettings();
        }
        /**
         * @target web
         */
        fillFromDataAttributes(dataAttributes) {
            for (let kvp of dataAttributes) {
                this.setProperty(kvp[0].toLowerCase(), kvp[1]);
            }
        }
        setSongBookModeSettings() {
            this.notation.notationMode = exports.NotationMode.SongBook;
            this.notation.smallGraceTabNotes = false;
            this.notation.fingeringMode = exports.FingeringMode.SingleNoteEffectBand;
            this.notation.extendBendArrowsOnTiedNotes = false;
            this.notation.showParenthesisForTiedBends = false;
            this.notation.showTabNoteOnTiedBend = false;
            this.notation.showZeroOnDiveWhammy = true;
        }
        static get songBook() {
            let settings = new Settings();
            settings.setSongBookModeSettings();
            return settings;
        }
        /**
         * @target web
         */
        static toJson(obj) { var json = {}; obj.fillToJson(json); return json; }
        fillToJson(json) { if (json.core)
            this.core.fillToJson(json.core);
        else
            json.core = (CoreSettings.toJson(this.core)); if (json.display)
            this.display.fillToJson(json.display);
        else
            json.display = (DisplaySettings.toJson(this.display)); if (json.notation)
            this.notation.fillToJson(json.notation);
        else
            json.notation = (NotationSettings.toJson(this.notation)); if (json.importer)
            this.importer.fillToJson(json.importer);
        else
            json.importer = (ImporterSettings.toJson(this.importer)); if (json.player)
            this.player.fillToJson(json.player);
        else
            json.player = (PlayerSettings.toJson(this.player)); }
        /**
         * @target web
         */
        static fromJson(json) { if (!json)
            return null; var obj = new Settings(); obj.fillFromJson(json); return obj; }
        /**
         * @target web
         */
        fillFromJson(json) { if (json)
            for (const $k in json)
                this.setProperty($k.toLowerCase(), json[$k]); }
        /**
         * @target web
         */
        setProperty(property, value) { if (["core", ""].indexOf(property) >= 0) {
            if (this.core)
                this.core.fillFromJson(value);
            else
                this.core = (CoreSettings.fromJson(value));
            return true;
        }
        else {
            for (const $c of ["core", ""])
                if (property.indexOf($c) === 0) {
                    if (!this.core)
                        this.core = new CoreSettings();
                    if (this.core.setProperty(property.substring($c.length), value))
                        return true;
                }
        } if (["display", ""].indexOf(property) >= 0) {
            if (this.display)
                this.display.fillFromJson(value);
            else
                this.display = (DisplaySettings.fromJson(value));
            return true;
        }
        else {
            for (const $c of ["display", ""])
                if (property.indexOf($c) === 0) {
                    if (!this.display)
                        this.display = new DisplaySettings();
                    if (this.display.setProperty(property.substring($c.length), value))
                        return true;
                }
        } if (["notation"].indexOf(property) >= 0) {
            if (this.notation)
                this.notation.fillFromJson(value);
            else
                this.notation = (NotationSettings.fromJson(value));
            return true;
        }
        else {
            for (const $c of ["notation"])
                if (property.indexOf($c) === 0) {
                    if (!this.notation)
                        this.notation = new NotationSettings();
                    if (this.notation.setProperty(property.substring($c.length), value))
                        return true;
                }
        } if (["importer"].indexOf(property) >= 0) {
            if (this.importer)
                this.importer.fillFromJson(value);
            else
                this.importer = (ImporterSettings.fromJson(value));
            return true;
        }
        else {
            for (const $c of ["importer"])
                if (property.indexOf($c) === 0) {
                    if (!this.importer)
                        this.importer = new ImporterSettings();
                    if (this.importer.setProperty(property.substring($c.length), value))
                        return true;
                }
        } if (["player"].indexOf(property) >= 0) {
            if (this.player)
                this.player.fillFromJson(value);
            else
                this.player = (PlayerSettings.fromJson(value));
            return true;
        }
        else {
            for (const $c of ["player"])
                if (property.indexOf($c) === 0) {
                    if (!this.player)
                        this.player = new PlayerSettings();
                    if (this.player.setProperty(property.substring($c.length), value))
                        return true;
                }
        } return false; }
    }

    /**
     * This class can convert a full {@link Score} instance to a simple JavaScript object and back for further
     * JSON serialization.
     * @target web
     */
    class JsonConverter {
        /**
         * Converts the given score into a JSON encoded string.
         * @param score The score to serialize.
         * @returns A JSON encoded string that can be used togehter with  for conversion.
         */
        static scoreToJson(score) {
            let obj = JsonConverter.scoreToJsObject(score);
            return JSON.stringify(obj, (_, v) => {
                // patch arraybuffer to serialize as array
                if (ArrayBuffer.isView(v)) {
                    return Array.apply([], [v]);
                }
                return v;
            });
        }
        /**
         * Converts the score into a JavaScript object without circular dependencies.
         * @param score The score object to serialize
         * @returns A serialized score object without ciruclar dependencies that can be used for further serializations.
         */
        static scoreToJsObject(score) {
            let score2 = {};
            Score.copyTo(score, score2);
            score2.masterBars = [];
            score2.tracks = [];
            score2.stylesheet = {};
            RenderStylesheet.copyTo(score.stylesheet, score2.stylesheet);
            JsonConverter.masterBarsToJsObject(score, score2);
            JsonConverter.tracksToJsObject(score, score2);
            return score2;
        }
        static tracksToJsObject(score, score2) {
            for (let t = 0; t < score.tracks.length; t++) {
                let track = score.tracks[t];
                let track2 = {};
                track2.color = {};
                Track.copyTo(track, track2);
                track2.playbackInfo = {};
                PlaybackInformation.copyTo(track.playbackInfo, track2.playbackInfo);
                JsonConverter.stavesToJsObject(track, track2);
                score2.tracks.push(track2);
            }
        }
        static stavesToJsObject(track, track2) {
            track2.staves = [];
            for (let s = 0; s < track.staves.length; s++) {
                let staff = track.staves[s];
                let staff2 = {};
                Staff.copyTo(staff, staff2);
                staff2.chords = new Map();
                for (let kvp of staff.chords) {
                    let chord = kvp[1];
                    let chord2 = {};
                    Chord.copyTo(chord, chord2);
                    staff2.chords.set(kvp[0], chord2);
                }
                JsonConverter.barsToJsObject(staff, staff2);
                track2.staves.push(staff2);
            }
        }
        static barsToJsObject(staff, staff2) {
            staff2.bars = [];
            for (let b = 0; b < staff.bars.length; b++) {
                let bar = staff.bars[b];
                let bar2 = {};
                Bar.copyTo(bar, bar2);
                JsonConverter.voicesToJsObject(bar, bar2);
                staff2.bars.push(bar2);
            }
        }
        static voicesToJsObject(bar, bar2) {
            bar2.voices = [];
            for (let v = 0; v < bar.voices.length; v++) {
                let voice = bar.voices[v];
                let voice2 = {};
                Voice.copyTo(voice, voice2);
                JsonConverter.beatsToJsObject(voice, voice2);
                bar2.voices.push(voice2);
            }
        }
        static beatsToJsObject(voice, voice2) {
            voice2.beats = [];
            for (let bb = 0; bb < voice.beats.length; bb++) {
                let beat = voice.beats[bb];
                let dynamicBeat2 = {};
                let beat2 = dynamicBeat2;
                Beat.copyTo(beat, beat2);
                beat2.automations = [];
                for (let a = 0; a < beat.automations.length; a++) {
                    let automation = {};
                    Automation.copyTo(beat.automations[a], automation);
                    beat2.automations.push(automation);
                }
                beat2.whammyBarPoints = [];
                for (let i = 0; i < beat.whammyBarPoints.length; i++) {
                    let point = {};
                    BendPoint.copyTo(beat.whammyBarPoints[i], point);
                    beat2.whammyBarPoints.push(point);
                }
                JsonConverter.notesToJsObject(beat, beat2);
                voice2.beats.push(beat2);
            }
        }
        static notesToJsObject(beat, beat2) {
            beat2.notes = [];
            for (let n = 0; n < beat.notes.length; n++) {
                let note = beat.notes[n];
                let dynamicNote2 = {};
                let note2 = dynamicNote2;
                Note.copyTo(note, note2);
                if (note.isTieDestination) {
                    dynamicNote2.tieOriginId = note.tieOrigin.id;
                }
                if (note.isTieOrigin) {
                    dynamicNote2.tieDestinationId = note.tieDestination.id;
                }
                if (note.isSlurDestination) {
                    dynamicNote2.slurOriginId = note.slurOrigin.id;
                }
                if (note.isSlurOrigin) {
                    dynamicNote2.slurDestinationId = note.slurDestination.id;
                }
                if (note.isHammerPullDestination) {
                    dynamicNote2.hammerPullOriginId = note.hammerPullOrigin.id;
                }
                if (note.isHammerPullOrigin) {
                    dynamicNote2.hammerPullDestinationId = note.hammerPullDestination.id;
                }
                note2.bendPoints = [];
                for (let i = 0; i < note.bendPoints.length; i++) {
                    let point = {};
                    BendPoint.copyTo(note.bendPoints[i], point);
                    note2.bendPoints.push(point);
                }
                beat2.notes.push(note2);
            }
        }
        static masterBarsToJsObject(score, score2) {
            for (let i = 0; i < score.masterBars.length; i++) {
                let masterBar = score.masterBars[i];
                let masterBar2 = {};
                MasterBar.copyTo(masterBar, masterBar2);
                if (masterBar.tempoAutomation) {
                    masterBar2.tempoAutomation = {};
                    Automation.copyTo(masterBar.tempoAutomation, masterBar2.tempoAutomation);
                }
                if (masterBar.section) {
                    masterBar2.section = {};
                    Section.copyTo(masterBar.section, masterBar2.section);
                }
                masterBar2.fermata = {};
                for (let kvp of masterBar.fermata) {
                    let fermata = kvp[1];
                    let fermata2 = {};
                    masterBar2.fermata.set(kvp[0], fermata2);
                    Fermata.copyTo(fermata, fermata2);
                }
                score2.masterBars.push(masterBar2);
            }
        }
        /**
         * Converts the given JSON string back to a {@link Score} object.
         * @param json The JSON string that was created via {@link Score}
         * @param settings The settings to use during conversion.
         * @returns The converted score object.
         */
        static jsonToScore(json, settings) {
            return JsonConverter.jsObjectToScore(JsonConverter.jsObjectToScore(JSON.parse(json), settings), settings);
        }
        /**
         * Converts the given JavaScript object into a score object.
         * @param jsObject The javascript object created via {@link Score}
         * @param settings The settings to use during conversion.
         * @returns The converted score object.
         */
        static jsObjectToScore(jsObject, settings) {
            let score = jsObject;
            let score2 = new Score();
            Score.copyTo(score, score2);
            RenderStylesheet.copyTo(score.stylesheet, score2.stylesheet);
            let allNotes = new Map();
            let notesToLink = [];
            JsonConverter.jsObjectToMasterBars(score, score2);
            JsonConverter.jsObjectToTracks(score, score2, allNotes, notesToLink);
            for (let note of notesToLink) {
                let serializedNote = note;
                if (serializedNote.tieOriginId !== undefined) {
                    note.tieOrigin = allNotes.get(serializedNote.tieOriginId);
                }
                if (serializedNote.tieDestinationId !== undefined) {
                    note.tieDestination = allNotes.get(serializedNote.tieDestinationId);
                }
                if (serializedNote.slurOriginId !== undefined) {
                    note.slurOrigin = allNotes.get(serializedNote.slurOriginId);
                }
                if (serializedNote.slurDestinationId !== undefined) {
                    note.slurDestination = allNotes.get(serializedNote.slurDestinationId);
                }
                if (serializedNote.hammerPullOriginId !== undefined) {
                    note.hammerPullOrigin = allNotes.get(serializedNote.hammerPullOriginId);
                }
                if (serializedNote.hammerPullDestinationId !== undefined) {
                    note.hammerPullDestination = allNotes.get(serializedNote.hammerPullDestinationId);
                }
            }
            score2.finish(settings !== null && settings !== void 0 ? settings : new Settings());
            return score2;
        }
        static jsObjectToTracks(score, score2, allNotes, notesToLink) {
            for (let t = 0; t < score.tracks.length; t++) {
                let track = score.tracks[t];
                let track2 = new Track();
                track2.ensureStaveCount(track.staves.length);
                Track.copyTo(track, track2);
                score2.addTrack(track2);
                PlaybackInformation.copyTo(track.playbackInfo, track2.playbackInfo);
                JsonConverter.jsObjectToStaves(track, track2, allNotes, notesToLink);
            }
        }
        static jsObjectToStaves(track, track2, allNotes, notesToLink) {
            for (let s = 0; s < track.staves.length; s++) {
                let staff = track.staves[s];
                let staff2 = track2.staves[s];
                Staff.copyTo(staff, staff2);
                for (let kvp of staff.chords) {
                    let chord = kvp[1];
                    let chord2 = new Chord();
                    Chord.copyTo(chord, chord2);
                    staff2.addChord(kvp[0], chord2);
                }
                JsonConverter.jsObjectToBars(staff, staff2, allNotes, notesToLink);
            }
        }
        static jsObjectToBars(staff, staff2, allNotes, notesToLink) {
            for (let b = 0; b < staff.bars.length; b++) {
                let bar = staff.bars[b];
                let bar2 = new Bar();
                Bar.copyTo(bar, bar2);
                staff2.addBar(bar2);
                JsonConverter.jsObjectToVoices(bar, bar2, allNotes, notesToLink);
            }
        }
        static jsObjectToVoices(bar, bar2, allNotes, notesToLink) {
            for (let v = 0; v < bar.voices.length; v++) {
                let voice = bar.voices[v];
                let voice2 = new Voice();
                Voice.copyTo(voice, voice2);
                bar2.addVoice(voice2);
                JsonConverter.jsObjectToBeats(voice, voice2, allNotes, notesToLink);
            }
        }
        static jsObjectToBeats(voice, voice2, allNotes, notesToLink) {
            for (let bb = 0; bb < voice.beats.length; bb++) {
                let beat = voice.beats[bb];
                let beat2 = new Beat();
                Beat.copyTo(beat, beat2);
                voice2.addBeat(beat2);
                for (let a = 0; a < beat.automations.length; a++) {
                    let automation = new Automation();
                    Automation.copyTo(beat.automations[a], automation);
                    beat2.automations.push(automation);
                }
                for (let i = 0; i < beat.whammyBarPoints.length; i++) {
                    let point = new BendPoint(0, 0);
                    BendPoint.copyTo(beat.whammyBarPoints[i], point);
                    beat2.addWhammyBarPoint(point);
                }
                JsonConverter.jsObjectToNotes(beat, beat2, allNotes, notesToLink);
            }
        }
        static jsObjectToNotes(beat, beat2, allNotes, notesToLink) {
            for (let n = 0; n < beat.notes.length; n++) {
                let note = beat.notes[n];
                let note2 = new Note();
                Note.copyTo(note, note2);
                beat2.addNote(note2);
                allNotes.set(note2.id, note2);
                let serializedNote = note;
                let serializedNote2 = note2;
                if (serializedNote.tieOriginId !== undefined) {
                    serializedNote2.tieOriginId = serializedNote.tieOriginId;
                    notesToLink.push(note2);
                }
                if (serializedNote.tieDestinationId !== undefined) {
                    serializedNote2.tieDestinationId = serializedNote.tieDestinationId;
                    notesToLink.push(note2);
                }
                if (serializedNote.slurOriginId !== undefined) {
                    serializedNote2.slurOriginId = serializedNote.slurOriginId;
                    notesToLink.push(note2);
                }
                if (serializedNote.slurDestinationId !== undefined) {
                    serializedNote2.slurDestinationId = serializedNote.slurDestinationId;
                    notesToLink.push(note2);
                }
                if (serializedNote.hammerPullOriginId !== undefined) {
                    serializedNote2.hammerPullOriginId = serializedNote.hammerPullOriginId;
                    notesToLink.push(note2);
                }
                if (serializedNote.hammerPullDestinationId !== undefined) {
                    serializedNote2.hammerPullDestinationId = serializedNote.hammerPullDestinationId;
                    notesToLink.push(note2);
                }
                for (let i = 0; i < note.bendPoints.length; i++) {
                    let point = new BendPoint(0, 0);
                    BendPoint.copyTo(note.bendPoints[i], point);
                    note2.addBendPoint(point);
                }
            }
        }
        static jsObjectToMasterBars(score, score2) {
            for (let i = 0; i < score.masterBars.length; i++) {
                let masterBar = score.masterBars[i];
                let masterBar2 = new MasterBar();
                MasterBar.copyTo(masterBar, masterBar2);
                if (masterBar.tempoAutomation) {
                    masterBar2.tempoAutomation = new Automation();
                    Automation.copyTo(masterBar.tempoAutomation, masterBar2.tempoAutomation);
                }
                if (masterBar.section) {
                    masterBar2.section = new Section();
                    Section.copyTo(masterBar.section, masterBar2.section);
                }
                for (let key of Object.keys(masterBar.fermata)) {
                    let fermata = masterBar.fermata[key];
                    let fermata2 = new Fermata();
                    Fermata.copyTo(fermata, fermata2);
                    masterBar2.addFermata(parseInt(key), fermata2);
                }
                score2.addMasterBar(masterBar2);
            }
        }
        static jsObjectToMidiFile(midi) {
            let midi2 = new MidiFile();
            midi2.division = midi.division;
            let midiEvents = midi.events;
            for (let midiEvent of midiEvents) {
                let tick = midiEvent.tick;
                let message = midiEvent.message;
                let midiEvent2;
                switch (midiEvent.type) {
                    case 'SystemExclusiveEvent':
                        midiEvent2 = new SystemExclusiveEvent(tick, 0, 0, midiEvent.data);
                        midiEvent2.message = message;
                        break;
                    case 'MetaDataEvent':
                        midiEvent2 = new MetaDataEvent(tick, 0, 0, midiEvent.data);
                        midiEvent2.message = message;
                        break;
                    case 'MetaNumberEvent':
                        midiEvent2 = new MetaNumberEvent(tick, 0, 0, midiEvent.value);
                        midiEvent2.message = message;
                        break;
                    default:
                        midiEvent2 = new MidiEvent(tick, 0, 0, 0);
                        midiEvent2.message = message;
                        break;
                }
                midi2.events.push(midiEvent2);
            }
            return midi2;
        }
        static midiFileToJsObject(midi) {
            let midi2 = {};
            midi2.division = midi.division;
            let midiEvents = [];
            midi2.events = midiEvents;
            for (let midiEvent of midi.events) {
                let midiEvent2 = {};
                midiEvents.push(midiEvent2);
                midiEvent2.tick = midiEvent.tick;
                midiEvent2.message = midiEvent.message;
                if (midiEvent instanceof SystemExclusiveEvent) {
                    midiEvent2.type = 'SystemExclusiveEvent';
                    midiEvent2.data = midiEvent.data;
                }
                else if (midiEvent instanceof MetaDataEvent) {
                    midiEvent2.type = 'MetaDataEvent';
                    midiEvent2.data = midiEvent.data;
                }
                else if (midiEvent instanceof MetaNumberEvent) {
                    midiEvent2.type = 'MetaNumberEvent';
                    midiEvent2.value = midiEvent.value;
                }
            }
            return midi2;
        }
    }

    /**
     * @target web
     */
    class AlphaSynthWorkerSynthOutput {
        constructor() {
            this.ready = new EventEmitter();
            this.samplesPlayed = new EventEmitterOfT();
            this.sampleRequest = new EventEmitter();
            this.finished = new EventEmitter();
        }
        get sampleRate() {
            return AlphaSynthWorkerSynthOutput.preferredSampleRate;
        }
        open() {
            Logger.debug('AlphaSynth', 'Initializing webworker worker');
            this._worker = globalThis;
            this._worker.addEventListener('message', this.handleMessage.bind(this));
            this.ready.trigger();
        }
        handleMessage(e) {
            let data = e.data;
            let cmd = data.cmd;
            switch (cmd) {
                case AlphaSynthWorkerSynthOutput.CmdOutputSampleRequest:
                    this.sampleRequest.trigger();
                    break;
                case AlphaSynthWorkerSynthOutput.CmdOutputFinished:
                    this.finished.trigger();
                    break;
                case AlphaSynthWorkerSynthOutput.CmdOutputSamplesPlayed:
                    this.samplesPlayed.trigger(data.samples);
                    break;
            }
        }
        sequencerFinished() {
            this._worker.postMessage({
                cmd: 'alphaSynth.output.sequencerFinished'
            });
        }
        addSamples(samples) {
            this._worker.postMessage({
                cmd: 'alphaSynth.output.addSamples',
                samples: samples
            });
        }
        play() {
            this._worker.postMessage({
                cmd: 'alphaSynth.output.play'
            });
        }
        pause() {
            this._worker.postMessage({
                cmd: 'alphaSynth.output.pause'
            });
        }
        resetSamples() {
            this._worker.postMessage({
                cmd: 'alphaSynth.output.resetSamples'
            });
        }
        activate() {
            // nothing to do
        }
    }
    AlphaSynthWorkerSynthOutput.CmdOutputPrefix = 'alphaSynth.output.';
    AlphaSynthWorkerSynthOutput.CmdOutputSequencerFinished = AlphaSynthWorkerSynthOutput.CmdOutputPrefix + 'sequencerFinished';
    AlphaSynthWorkerSynthOutput.CmdOutputAddSamples = AlphaSynthWorkerSynthOutput.CmdOutputPrefix + 'addSamples';
    AlphaSynthWorkerSynthOutput.CmdOutputPlay = AlphaSynthWorkerSynthOutput.CmdOutputPrefix + 'play';
    AlphaSynthWorkerSynthOutput.CmdOutputPause = AlphaSynthWorkerSynthOutput.CmdOutputPrefix + 'pause';
    AlphaSynthWorkerSynthOutput.CmdOutputResetSamples = AlphaSynthWorkerSynthOutput.CmdOutputPrefix + 'resetSamples';
    AlphaSynthWorkerSynthOutput.CmdOutputSampleRequest = AlphaSynthWorkerSynthOutput.CmdOutputPrefix + 'sampleRequest';
    AlphaSynthWorkerSynthOutput.CmdOutputFinished = AlphaSynthWorkerSynthOutput.CmdOutputPrefix + 'finished';
    AlphaSynthWorkerSynthOutput.CmdOutputSamplesPlayed = AlphaSynthWorkerSynthOutput.CmdOutputPrefix + 'samplesPlayed';
    // this value is initialized by the alphaSynth WebWorker wrapper
    // that also includes the alphaSynth library into the worker.
    AlphaSynthWorkerSynthOutput.preferredSampleRate = 0;

    /**
     * This class implements a HTML5 WebWorker based version of alphaSynth
     * which can be controlled via WebWorker messages.
     * @target web
     */
    class AlphaSynthWebWorker {
        constructor(main) {
            this._main = main;
            this._main.addEventListener('message', this.handleMessage.bind(this));
            this._player = new AlphaSynth(new AlphaSynthWorkerSynthOutput());
            this._player.positionChanged.on(this.onPositionChanged.bind(this));
            this._player.stateChanged.on(this.onPlayerStateChanged.bind(this));
            this._player.finished.on(this.onFinished.bind(this));
            this._player.soundFontLoaded.on(this.onSoundFontLoaded.bind(this));
            this._player.soundFontLoadFailed.on(this.onSoundFontLoadFailed.bind(this));
            this._player.soundFontLoadFailed.on(this.onSoundFontLoadFailed.bind(this));
            this._player.midiLoaded.on(this.onMidiLoaded.bind(this));
            this._player.midiLoadFailed.on(this.onMidiLoadFailed.bind(this));
            this._player.readyForPlayback.on(this.onReadyForPlayback.bind(this));
            this._main.postMessage({
                cmd: 'alphaSynth.ready'
            });
        }
        static init() {
            let main = globalThis;
            main.addEventListener('message', e => {
                let data = e.data;
                let cmd = data.cmd;
                switch (cmd) {
                    case 'alphaSynth.initialize':
                        AlphaSynthWorkerSynthOutput.preferredSampleRate = data.sampleRate;
                        Logger.logLevel = data.logLevel;
                        globalThis.alphaSynthWebWorker = new AlphaSynthWebWorker(main);
                        break;
                }
            });
        }
        handleMessage(e) {
            let data = e.data;
            let cmd = data.cmd;
            switch (cmd) {
                case 'alphaSynth.setLogLevel':
                    Logger.logLevel = data.value;
                    break;
                case 'alphaSynth.setMasterVolume':
                    this._player.masterVolume = data.value;
                    break;
                case 'alphaSynth.setMetronomeVolume':
                    this._player.metronomeVolume = data.value;
                    break;
                case 'alphaSynth.setPlaybackSpeed':
                    this._player.playbackSpeed = data.value;
                    break;
                case 'alphaSynth.setTickPosition':
                    this._player.tickPosition = data.value;
                    break;
                case 'alphaSynth.setTimePosition':
                    this._player.timePosition = data.value;
                    break;
                case 'alphaSynth.setPlaybackRange':
                    this._player.playbackRange = data.value;
                    break;
                case 'alphaSynth.setIsLooping':
                    this._player.isLooping = data.value;
                    break;
                case 'alphaSynth.play':
                    this._player.play();
                    break;
                case 'alphaSynth.pause':
                    this._player.pause();
                    break;
                case 'alphaSynth.playPause':
                    this._player.playPause();
                    break;
                case 'alphaSynth.stop':
                    this._player.stop();
                    break;
                case 'alphaSynth.loadSoundFontBytes':
                    this._player.loadSoundFont(data.data);
                    break;
                case 'alphaSynth.loadMidi':
                    this._player.loadMidiFile(JsonConverter.jsObjectToMidiFile(data.midi));
                    break;
                case 'alphaSynth.setChannelMute':
                    this._player.setChannelMute(data.channel, data.mute);
                    break;
                case 'alphaSynth.setChannelSolo':
                    this._player.setChannelSolo(data.channel, data.solo);
                    break;
                case 'alphaSynth.setChannelVolume':
                    this._player.setChannelVolume(data.channel, data.volume);
                    break;
                case 'alphaSynth.setChannelProgram':
                    this._player.setChannelProgram(data.channel, data.program);
                    break;
                case 'alphaSynth.resetChannelStates':
                    this._player.resetChannelStates();
                    break;
            }
        }
        onPositionChanged(e) {
            this._main.postMessage({
                cmd: 'alphaSynth.positionChanged',
                currentTime: e.currentTime,
                endTime: e.endTime,
                currentTick: e.currentTick,
                endTick: e.endTick
            });
        }
        onPlayerStateChanged(e) {
            this._main.postMessage({
                cmd: 'alphaSynth.playerStateChanged',
                state: e.state,
                stopped: e.stopped
            });
        }
        onFinished() {
            this._main.postMessage({
                cmd: 'alphaSynth.finished'
            });
        }
        onSoundFontLoaded() {
            this._main.postMessage({
                cmd: 'alphaSynth.soundFontLoaded'
            });
        }
        onSoundFontLoadFailed(e) {
            this._main.postMessage({
                cmd: 'alphaSynth.soundFontLoadFailed',
                error: this.serializeException(e)
            });
        }
        serializeException(e) {
            let error = JSON.parse(JSON.stringify(e));
            if (e.message) {
                error.message = e.message;
            }
            if (e.stack) {
                error.stack = e.stack;
            }
            if (e.constructor && e.constructor.name) {
                error.type = e.constructor.name;
            }
            return error;
        }
        onMidiLoaded() {
            this._main.postMessage({
                cmd: 'alphaSynth.midiLoaded'
            });
        }
        onMidiLoadFailed(e) {
            this._main.postMessage({
                cmd: 'alphaSynth.midiLoaded',
                error: this.serializeException(e)
            });
        }
        onReadyForPlayback() {
            this._main.postMessage({
                cmd: 'alphaSynth.readyForPlayback'
            });
        }
    }
    AlphaSynthWebWorker.CmdPrefix = 'alphaSynth.';
    AlphaSynthWebWorker.CmdInitialize = AlphaSynthWebWorker.CmdPrefix + 'initialize';
    AlphaSynthWebWorker.CmdSetLogLevel = AlphaSynthWebWorker.CmdPrefix + 'setLogLevel';
    AlphaSynthWebWorker.CmdSetMasterVolume = AlphaSynthWebWorker.CmdPrefix + 'setMasterVolume';
    AlphaSynthWebWorker.CmdSetMetronomeVolume = AlphaSynthWebWorker.CmdPrefix + 'setMetronomeVolume';
    AlphaSynthWebWorker.CmdSetPlaybackSpeed = AlphaSynthWebWorker.CmdPrefix + 'setPlaybackSpeed';
    AlphaSynthWebWorker.CmdSetTickPosition = AlphaSynthWebWorker.CmdPrefix + 'setTickPosition';
    AlphaSynthWebWorker.CmdSetTimePosition = AlphaSynthWebWorker.CmdPrefix + 'setTimePosition';
    AlphaSynthWebWorker.CmdSetPlaybackRange = AlphaSynthWebWorker.CmdPrefix + 'setPlaybackRange';
    AlphaSynthWebWorker.CmdSetIsLooping = AlphaSynthWebWorker.CmdPrefix + 'setIsLooping';
    AlphaSynthWebWorker.CmdPlay = AlphaSynthWebWorker.CmdPrefix + 'play';
    AlphaSynthWebWorker.CmdPause = AlphaSynthWebWorker.CmdPrefix + 'pause';
    AlphaSynthWebWorker.CmdPlayPause = AlphaSynthWebWorker.CmdPrefix + 'playPause';
    AlphaSynthWebWorker.CmdStop = AlphaSynthWebWorker.CmdPrefix + 'stop';
    AlphaSynthWebWorker.CmdLoadSoundFontBytes = AlphaSynthWebWorker.CmdPrefix + 'loadSoundFontBytes';
    AlphaSynthWebWorker.CmdLoadMidi = AlphaSynthWebWorker.CmdPrefix + 'loadMidi';
    AlphaSynthWebWorker.CmdSetChannelMute = AlphaSynthWebWorker.CmdPrefix + 'setChannelMute';
    AlphaSynthWebWorker.CmdSetChannelSolo = AlphaSynthWebWorker.CmdPrefix + 'setChannelSolo';
    AlphaSynthWebWorker.CmdSetChannelVolume = AlphaSynthWebWorker.CmdPrefix + 'setChannelVolume';
    AlphaSynthWebWorker.CmdSetChannelProgram = AlphaSynthWebWorker.CmdPrefix + 'setChannelProgram';
    AlphaSynthWebWorker.CmdResetChannelStates = AlphaSynthWebWorker.CmdPrefix + 'resetChannelStates';
    AlphaSynthWebWorker.CmdReady = AlphaSynthWebWorker.CmdPrefix + 'ready';
    AlphaSynthWebWorker.CmdReadyForPlayback = AlphaSynthWebWorker.CmdPrefix + 'readyForPlayback';
    AlphaSynthWebWorker.CmdPositionChanged = AlphaSynthWebWorker.CmdPrefix + 'positionChanged';
    AlphaSynthWebWorker.CmdPlayerStateChanged = AlphaSynthWebWorker.CmdPrefix + 'playerStateChanged';
    AlphaSynthWebWorker.CmdFinished = AlphaSynthWebWorker.CmdPrefix + 'finished';
    AlphaSynthWebWorker.CmdSoundFontLoaded = AlphaSynthWebWorker.CmdPrefix + 'soundFontLoaded';
    AlphaSynthWebWorker.CmdSoundFontLoadFailed = AlphaSynthWebWorker.CmdPrefix + 'soundFontLoadFailed';
    AlphaSynthWebWorker.CmdMidiLoaded = AlphaSynthWebWorker.CmdPrefix + 'midiLoaded';
    AlphaSynthWebWorker.CmdMidiLoadFailed = AlphaSynthWebWorker.CmdPrefix + 'midiLoadFailed';
    AlphaSynthWebWorker.CmdLog = AlphaSynthWebWorker.CmdPrefix + 'log';

    /**
     * This public class stores text widths for several fonts and allows width calculation
     * @partial
     */
    class FontSizes {
        /**
         * @target web
         */
        static generateFontLookup(family) {
            if (FontSizes.FontSizeLookupTables.has(family)) {
                return;
            }
            if (!Platform.isRunningInWorker) {
                let canvas = document.createElement('canvas');
                let measureContext = canvas.getContext('2d');
                measureContext.font = `11px ${family}`;
                let sizes = [];
                for (let i = 0x20; i < 255; i++) {
                    let s = String.fromCharCode(i);
                    sizes.push(measureContext.measureText(s).width);
                }
                let data = new Uint8Array(sizes);
                FontSizes.FontSizeLookupTables.set(family, data);
            }
            else {
                FontSizes.FontSizeLookupTables.set(family, new Uint8Array([8]));
            }
        }
        static measureString(s, family, size, style) {
            let data;
            let dataSize = 11;
            if (!FontSizes.FontSizeLookupTables.has(family)) {
                FontSizes.generateFontLookup(family);
            }
            data = FontSizes.FontSizeLookupTables.get(family);
            let factor = 1;
            if ((style & FontStyle.Italic) !== 0) {
                factor *= 1.2;
            }
            if ((style & FontStyle.Bold) !== 0) {
                factor *= 1.2;
            }
            let stringSize = 0;
            for (let i = 0; i < s.length; i++) {
                let code = Math.min(data.length - 1, s.charCodeAt(i) - 32);
                if (code >= 0) {
                    stringSize += (data[code] * size) / dataSize;
                }
            }
            return stringSize * factor;
        }
    }
    // prettier-ignore
    FontSizes.Georgia = new Uint8Array([
        3, 4, 5, 7, 7, 9, 8, 2, 4, 4, 5, 7, 3, 4, 3, 5, 7, 5, 6, 6, 6, 6, 6, 6, 7, 6, 3, 3, 7,
        7, 7, 5, 10, 7, 7, 7, 8, 7, 7, 8, 9, 4, 6, 8, 7, 10, 8, 8, 7, 8, 8, 6, 7, 8, 7, 11, 8,
        7, 7, 4, 5, 4, 7, 7, 6, 6, 6, 5, 6, 5, 4, 6, 6, 3, 3, 6, 3, 10, 6, 6, 6, 6, 5, 5, 4, 6,
        5, 8, 6, 5, 5, 5, 4, 5, 7, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 4, 6, 7, 6, 7, 4, 6, 6, 10, 6, 6, 7, 0, 10, 7,
        5, 7, 6, 6, 6, 6, 6, 3, 6, 6, 6, 6, 12, 12, 12, 5, 7, 7, 7, 7, 7, 7, 11, 7, 7, 7, 7, 7,
        4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 7, 7, 6, 6, 6, 6, 6, 6, 6, 8, 5, 5,
        5, 5, 5, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 5, 6
    ]);
    // prettier-ignore
    FontSizes.Arial = new Uint8Array([
        3, 3, 4, 6, 6, 10, 7, 2, 4, 4, 4, 6, 3, 4, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 6,
        6, 6, 6, 11, 7, 7, 8, 8, 7, 7, 9, 8, 3, 6, 7, 6, 9, 8, 9, 7, 9, 8, 7, 7, 8, 7, 10, 7, 7,
        7, 3, 3, 3, 5, 6, 4, 6, 6, 6, 6, 6, 3, 6, 6, 2, 2, 6, 2, 9, 6, 6, 6, 6, 4, 6, 3, 6, 6,
        8, 6, 6, 6, 4, 3, 4, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 6, 6, 6, 6, 3, 6, 4, 8, 4, 6, 6, 0, 8, 6, 4,
        6, 4, 4, 4, 6, 6, 4, 4, 4, 4, 6, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 11, 8, 7, 7, 7, 7, 3, 3,
        3, 3, 8, 8, 9, 9, 9, 9, 9, 6, 9, 8, 8, 8, 8, 7, 7, 7, 6, 6, 6, 6, 6, 6, 10, 6, 6, 6, 6,
        6, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6
    ]);
    FontSizes.FontSizeLookupTables = new Map([
        ['Arial', FontSizes.Arial],
        ["'Arial'", FontSizes.Arial],
        ['"Arial"', FontSizes.Arial],
        ['Georgia', FontSizes.Georgia],
        ["'Georgia'", FontSizes.Georgia],
        ['"Georgia"', FontSizes.Georgia]
    ]);
    FontSizes.ControlChars = 0x20;

    /**
     * This eventargs define the details about the rendering and layouting process and are
     * provided whenever a part of of the music sheet is rendered.
     */
    class RenderFinishedEventArgs {
        constructor() {
            /**
             * Gets or sets the width of the current rendering result.
             */
            this.width = 0;
            /**
             * Gets or sets the height of the current rendering result.
             */
            this.height = 0;
            /**
             * Gets or sets the currently known total width of the final music sheet.
             */
            this.totalWidth = 0;
            /**
             * Gets or sets the currently known total height of the final music sheet.
             */
            this.totalHeight = 0;
            /**
             * Gets or sets the index of the first masterbar that was rendered in this result.
             */
            this.firstMasterBarIndex = 0;
            /**
             * Gets or sets the index of the last masterbar that was rendered in this result.
             */
            this.lastMasterBarIndex = 0;
            /**
             * Gets or sets the render engine specific result object which contains the rendered music sheet.
             */
            this.renderResult = null;
        }
    }

    /**
     * Represents the boundaries of a single bar.
     */
    class BarBounds {
        constructor() {
            /**
             * Gets or sets a list of the beats contained in this lookup.
             */
            this.beats = [];
        }
        /**
         * Adds a new beat to this lookup.
         * @param bounds The beat bounds to add.
         */
        addBeat(bounds) {
            bounds.barBounds = this;
            this.beats.push(bounds);
            this.masterBarBounds.addBeat(bounds);
        }
        /**
         * Tries to find the beat at the given X-position.
         * @param x The X-position of the beat to find.
         * @returns The beat at the given X-position or null if none was found.
         */
        findBeatAtPos(x) {
            let beat = null;
            for (let t of this.beats) {
                if (!beat || t.realBounds.x < x) {
                    beat = t;
                }
                else if (t.realBounds.x > x) {
                    break;
                }
            }
            return beat;
        }
    }

    /**
     * Represents the bounds of a single beat.
     */
    class BeatBounds {
        constructor() {
            /**
             * Gets or sets the individual note positions of this beat (if {@link CoreSettings.includeNoteBounds} was set to true).
             */
            this.notes = null;
        }
        /**
         * Adds a new note to this bounds.
         * @param bounds The note bounds to add.
         */
        addNote(bounds) {
            if (!this.notes) {
                this.notes = [];
            }
            this.notes.push(bounds);
        }
        /**
         * Tries to find a note at the given position.
         * @param x The X-position of the note to find.
         * @param y The Y-position of the note to find.
         * @returns The note at the given position or null if no note was found, or the note lookup was not enabled before rendering.
         */
        findNoteAtPos(x, y) {
            if (!this.notes) {
                return null;
            }
            // TODO: can be likely optimized
            // a beat is mostly vertically aligned, we could sort the note bounds by Y
            // and then do a binary search on the Y-axis.
            for (let note of this.notes) {
                let bottom = note.noteHeadBounds.y + note.noteHeadBounds.h;
                let right = note.noteHeadBounds.x + note.noteHeadBounds.w;
                if (note.noteHeadBounds.x >= x && note.noteHeadBounds.y >= y && x <= right && y <= bottom) {
                    return note.note;
                }
            }
            return null;
        }
    }

    /**
     * Represents the boundaries of a list of bars related to a single master bar.
     */
    class MasterBarBounds {
        constructor() {
            /**
             * Gets or sets the index of this bounds relative within the parent lookup.
             */
            this.index = 0;
            /**
             * Gets or sets a value indicating whether this bounds are the first of the line.
             */
            this.isFirstOfLine = false;
            /**
             * Gets or sets the list of individual bars within this lookup.
             */
            this.bars = [];
        }
        /**
         * Adds a new bar to this lookup.
         * @param bounds The bar bounds to add to this lookup.
         */
        addBar(bounds) {
            bounds.masterBarBounds = this;
            this.bars.push(bounds);
        }
        /**
         * Tries to find a beat at the given location.
         * @param x The absolute X position where the beat spans across.
         * @param y The absolute Y position where the beat spans across.
         * @returns The beat that spans across the given point, or null if none of the contained bars had a beat at this position.
         */
        findBeatAtPos(x, y) {
            let beat = null;
            for (let bar of this.bars) {
                let b = bar.findBeatAtPos(x);
                if (b && (!beat || beat.realBounds.x < b.realBounds.x)) {
                    beat = b;
                }
            }
            return !beat ? null : beat.beat;
        }
        /**
         * Finishes the lookup object and optimizes itself for fast access.
         */
        finish() {
            this.bars.sort((a, b) => {
                if (a.realBounds.y < b.realBounds.y) {
                    return -1;
                }
                if (a.realBounds.y > b.realBounds.y) {
                    return 1;
                }
                if (a.realBounds.x < b.realBounds.x) {
                    return -1;
                }
                if (a.realBounds.x > b.realBounds.x) {
                    return 1;
                }
                return 0;
            });
        }
        /**
         * Adds a new beat to the lookup.
         * @param bounds The beat bounds to add.
         */
        addBeat(bounds) {
            this.staveGroupBounds.boundsLookup.addBeat(bounds);
        }
    }

    /**
     * Represents the bounds of a single note
     */
    class NoteBounds {
    }

    /**
     * Represents the bounds of a stave group.
     */
    class StaveGroupBounds {
        constructor() {
            /**
             * Gets or sets the index of the bounds within the parent lookup.
             * This allows fast access of the next/previous groups.
             */
            this.index = 0;
            /**
             * Gets or sets the list of master bar bounds related to this stave group.
             */
            this.bars = [];
        }
        /**
         * Finished the lookup for optimized access.
         */
        finish() {
            for (let t of this.bars) {
                t.finish();
            }
        }
        /**
         * Adds a new master bar to this lookup.
         * @param bounds The master bar bounds to add.
         */
        addBar(bounds) {
            this.boundsLookup.addMasterBar(bounds);
            bounds.staveGroupBounds = this;
            this.bars.push(bounds);
        }
        /**
         * Tries to find the master bar bounds that are located at the given X-position.
         * @param x The X-position to find a master bar.
         * @returns The master bounds at the given X-position.
         */
        findBarAtPos(x) {
            let b = null;
            // move from left to right as long we find bars that start before the clicked position
            for (let bar of this.bars) {
                if (!b || bar.realBounds.x < x) {
                    b = bar;
                }
                else if (x > bar.realBounds.x + bar.realBounds.w) {
                    break;
                }
            }
            return b;
        }
    }

    class BoundsLookup {
        constructor() {
            this._beatLookup = new Map();
            this._masterBarLookup = new Map();
            this._currentStaveGroup = null;
            /**
             * Gets a list of all individual stave groups contained in the rendered music notation.
             */
            this.staveGroups = [];
            /**
             * Gets or sets a value indicating whether this lookup was finished already.
             */
            this.isFinished = false;
        }
        /**
         * @target web
         */
        toJson() {
            let json = {};
            let staveGroups = [];
            json.staveGroups = staveGroups;
            for (let group of this.staveGroups) {
                let g = {};
                g.visualBounds = this.boundsToJson(group.visualBounds);
                g.realBounds = this.boundsToJson(group.realBounds);
                g.bars = [];
                for (let masterBar of group.bars) {
                    let mb = {};
                    mb.lineAlignedBounds = this.boundsToJson(masterBar.lineAlignedBounds);
                    mb.visualBounds = this.boundsToJson(masterBar.visualBounds);
                    mb.realBounds = this.boundsToJson(masterBar.realBounds);
                    mb.index = masterBar.index;
                    mb.bars = [];
                    for (let bar of masterBar.bars) {
                        let b = {};
                        b.visualBounds = this.boundsToJson(bar.visualBounds);
                        b.realBounds = this.boundsToJson(bar.realBounds);
                        b.beats = [];
                        for (let beat of bar.beats) {
                            let bb = {};
                            bb.visualBounds = this.boundsToJson(beat.visualBounds);
                            bb.realBounds = this.boundsToJson(beat.realBounds);
                            let bbd = bb;
                            bbd.beatIndex = beat.beat.index;
                            bbd.voiceIndex = beat.beat.voice.index;
                            bbd.barIndex = beat.beat.voice.bar.index;
                            bbd.staffIndex = beat.beat.voice.bar.staff.index;
                            bbd.trackIndex = beat.beat.voice.bar.staff.track.index;
                            if (beat.notes) {
                                let notes = (bb.notes = []);
                                for (let note of beat.notes) {
                                    let n = {};
                                    let nd = n;
                                    nd.index = note.note.index;
                                    n.noteHeadBounds = this.boundsToJson(note.noteHeadBounds);
                                    notes.push(n);
                                }
                            }
                            b.beats.push(bb);
                        }
                        mb.bars.push(b);
                    }
                    g.bars.push(mb);
                }
                staveGroups.push(g);
            }
            return json;
        }
        /**
         * @target web
         */
        static fromJson(json, score) {
            let lookup = new BoundsLookup();
            let staveGroups = json['staveGroups'];
            for (let staveGroup of staveGroups) {
                let sg = new StaveGroupBounds();
                sg.visualBounds = staveGroup.visualBounds;
                sg.realBounds = staveGroup.realBounds;
                lookup.addStaveGroup(sg);
                for (let masterBar of staveGroup.bars) {
                    let mb = new MasterBarBounds();
                    mb.index = masterBar.index;
                    mb.isFirstOfLine = masterBar.isFirstOfLine;
                    mb.lineAlignedBounds = masterBar.lineAlignedBounds;
                    mb.visualBounds = masterBar.visualBounds;
                    mb.realBounds = masterBar.realBounds;
                    sg.addBar(mb);
                    for (let bar of masterBar.bars) {
                        let b = new BarBounds();
                        b.visualBounds = bar.visualBounds;
                        b.realBounds = bar.realBounds;
                        mb.addBar(b);
                        for (let beat of bar.beats) {
                            let bb = new BeatBounds();
                            bb.visualBounds = beat.visualBounds;
                            bb.realBounds = beat.realBounds;
                            let bd = beat;
                            bb.beat =
                                score.tracks[bd.trackIndex].staves[bd.staffIndex].bars[bd.barIndex].voices[bd.voiceIndex].beats[bd.beatIndex];
                            if (beat.notes) {
                                bb.notes = [];
                                for (let note of beat.notes) {
                                    let n = new NoteBounds();
                                    let nd = note;
                                    n.note = bb.beat.notes[nd.index];
                                    n.noteHeadBounds = note.noteHeadBounds;
                                    bb.addNote(n);
                                }
                            }
                            b.addBeat(bb);
                        }
                    }
                }
            }
            return lookup;
        }
        boundsToJson(bounds) {
            let json = {};
            json.x = bounds.x;
            json.y = bounds.y;
            json.w = bounds.w;
            json.h = bounds.h;
            return json;
        }
        /**
         * Finishes the lookup for optimized access.
         */
        finish() {
            for (let t of this.staveGroups) {
                t.finish();
            }
            this.isFinished = true;
        }
        /**
         * Adds a new note to the lookup.
         * @param bounds The note bounds to add.
         */
        addNote(bounds) {
            let beat = this.findBeat(bounds.note.beat);
            beat.addNote(bounds);
        }
        /**
         * Adds a new stave group to the lookup.
         * @param bounds The stave group bounds to add.
         */
        addStaveGroup(bounds) {
            bounds.index = this.staveGroups.length;
            bounds.boundsLookup = this;
            this.staveGroups.push(bounds);
            this._currentStaveGroup = bounds;
        }
        /**
         * Adds a new master bar to the lookup.
         * @param bounds The master bar bounds to add.
         */
        addMasterBar(bounds) {
            if (!bounds.staveGroupBounds) {
                bounds.staveGroupBounds = this._currentStaveGroup;
                this._masterBarLookup.set(bounds.index, bounds);
                this._currentStaveGroup.addBar(bounds);
            }
            else {
                this._masterBarLookup.set(bounds.index, bounds);
            }
        }
        /**
         * Adds a new beat to the lookup.
         * @param bounds The beat bounds to add.
         */
        addBeat(bounds) {
            this._beatLookup.set(bounds.beat.id, bounds);
        }
        /**
         * Tries to find the master bar bounds by a given index.
         * @param index The index of the master bar to find.
         * @returns The master bar bounds if it was rendered, or null if no boundary information is available.
         */
        findMasterBarByIndex(index) {
            if (this._masterBarLookup.has(index)) {
                return this._masterBarLookup.get(index);
            }
            return null;
        }
        /**
         * Tries to find the master bar bounds by a given master bar.
         * @param bar The master bar to find.
         * @returns The master bar bounds if it was rendered, or null if no boundary information is available.
         */
        findMasterBar(bar) {
            let id = bar.index;
            if (this._masterBarLookup.has(id)) {
                return this._masterBarLookup.get(id);
            }
            return null;
        }
        /**
         * Tries to find the bounds of a given beat.
         * @param beat The beat to find.
         * @returns The beat bounds if it was rendered, or null if no boundary information is available.
         */
        findBeat(beat) {
            let id = beat.id;
            if (this._beatLookup.has(id)) {
                return this._beatLookup.get(id);
            }
            return null;
        }
        /**
         * Tries to find a beat at the given absolute position.
         * @param x The absolute X-position of the beat to find.
         * @param y The absolute Y-position of the beat to find.
         * @returns The beat found at the given position or null if no beat could be found.
         */
        getBeatAtPos(x, y) {
            //
            // find a bar which matches in y-axis
            let bottom = 0;
            let top = this.staveGroups.length - 1;
            let staveGroupIndex = -1;
            while (bottom <= top) {
                let middle = ((top + bottom) / 2) | 0;
                let group = this.staveGroups[middle];
                // found?
                if (y >= group.realBounds.y && y <= group.realBounds.y + group.realBounds.h) {
                    staveGroupIndex = middle;
                    break;
                }
                // search in lower half
                if (y < group.realBounds.y) {
                    top = middle - 1;
                }
                else {
                    bottom = middle + 1;
                }
            }
            // no bar found
            if (staveGroupIndex === -1) {
                return null;
            }
            //
            // Find the matching bar in the row
            let staveGroup = this.staveGroups[staveGroupIndex];
            let bar = staveGroup.findBarAtPos(x);
            if (bar) {
                return bar.findBeatAtPos(x, y);
            }
            return null;
        }
        /**
         * Tries to find the note at the given position using the given beat for fast access.
         * Use {@link findBeat} to find a beat for a given position first.
         * @param beat The beat containing the note.
         * @param x The X-position of the note.
         * @param y The Y-position of the note.
         * @returns The note at the given position within the beat.
         */
        getNoteAtPos(beat, x, y) {
            let beatBounds = this.findBeat(beat);
            if (!beatBounds) {
                return null;
            }
            x -= beatBounds.barBounds.masterBarBounds.staveGroupBounds.realBounds.x;
            y -= beatBounds.barBounds.masterBarBounds.staveGroupBounds.realBounds.y;
            return beatBounds.findNoteAtPos(x, y);
        }
    }

    /**
     * This is the main wrapper of the rendering engine which
     * can render a single track of a score object into a notation sheet.
     */
    class ScoreRenderer {
        /**
         * Initializes a new instance of the {@link ScoreRenderer} class.
         * @param settings The settings to use for rendering.
         */
        constructor(settings) {
            this._currentLayoutMode = exports.LayoutMode.Page;
            this._currentRenderEngine = null;
            this._renderedTracks = null;
            this.canvas = null;
            this.score = null;
            this.tracks = null;
            this.layout = null;
            this.boundsLookup = null;
            this.width = 0;
            this.preRender = new EventEmitterOfT();
            this.renderFinished = new EventEmitterOfT();
            this.partialRenderFinished = new EventEmitterOfT();
            this.postRenderFinished = new EventEmitter();
            this.error = new EventEmitterOfT();
            this.settings = settings;
            this.recreateCanvas();
            this.recreateLayout();
        }
        destroy() {
            this.score = null;
            this.canvas = null;
            this.layout = null;
            this.boundsLookup = null;
            this.tracks = null;
        }
        recreateCanvas() {
            if (this._currentRenderEngine !== this.settings.core.engine) {
                this.canvas = Environment.getRenderEngineFactory(this.settings).createCanvas();
                this._currentRenderEngine = this.settings.core.engine;
                return true;
            }
            return false;
        }
        recreateLayout() {
            if (!this.layout || this._currentLayoutMode !== this.settings.display.layoutMode) {
                this.layout = Environment.getLayoutEngineFactory(this.settings).createLayout(this);
                this._currentLayoutMode = this.settings.display.layoutMode;
                return true;
            }
            return false;
        }
        renderScore(score, trackIndexes) {
            try {
                this.score = score;
                let tracks;
                if (!trackIndexes) {
                    tracks = score.tracks.slice(0);
                }
                else {
                    tracks = [];
                    for (let track of trackIndexes) {
                        if (track >= 0 && track < score.tracks.length) {
                            tracks.push(score.tracks[track]);
                        }
                    }
                }
                if (tracks.length === 0 && score.tracks.length > 0) {
                    tracks.push(score.tracks[0]);
                }
                this.tracks = tracks;
                this.render();
            }
            catch (e) {
                this.error.trigger(e);
            }
        }
        /**
         * Initiates rendering fof the given tracks.
         * @param tracks The tracks to render.
         */
        renderTracks(tracks) {
            if (tracks.length === 0) {
                this.score = null;
            }
            else {
                this.score = tracks[0].score;
            }
            this.tracks = tracks;
            this.render();
        }
        updateSettings(settings) {
            this.settings = settings;
        }
        render() {
            if (this.width === 0) {
                Logger.warning('Rendering', 'AlphaTab skipped rendering because of width=0 (element invisible)', null);
                return;
            }
            this.boundsLookup = new BoundsLookup();
            if (!this.tracks || this.tracks.length === 0) {
                return;
            }
            this.recreateCanvas();
            this.canvas.lineWidth = this.settings.display.scale;
            this.canvas.settings = this.settings;
            Logger.info('Rendering', 'Rendering ' + this.tracks.length + ' tracks');
            for (let i = 0; i < this.tracks.length; i++) {
                let track = this.tracks[i];
                Logger.info('Rendering', 'Track ' + i + ': ' + track.name);
            }
            this.preRender.trigger(false);
            this.recreateLayout();
            this.layoutAndRender();
            this._renderedTracks = this.tracks;
            Logger.info('Rendering', 'Rendering finished');
        }
        resizeRender() {
            if (this.recreateLayout() || this.recreateCanvas() || this._renderedTracks !== this.tracks || !this.tracks) {
                Logger.info('Rendering', 'Starting full rerendering due to layout or canvas change', null);
                this.render();
            }
            else if (this.layout.supportsResize) {
                Logger.info('Rendering', 'Starting optimized rerendering for resize');
                this.boundsLookup = new BoundsLookup();
                this.preRender.trigger(true);
                this.canvas.settings = this.settings;
                this.layout.resize();
                this.layout.renderAnnotation();
                this.onRenderFinished();
                this.postRenderFinished.trigger();
            }
            else {
                Logger.warning('Rendering', 'Current layout does not support dynamic resizing, nothing was done', null);
            }
            Logger.debug('Rendering', 'Resize finished');
        }
        layoutAndRender() {
            Logger.info('Rendering', 'Rendering at scale ' + this.settings.display.scale + ' with layout ' + this.layout.name, null);
            this.layout.layoutAndRender();
            this.layout.renderAnnotation();
            this.onRenderFinished();
            this.postRenderFinished.trigger();
        }
        onRenderFinished() {
            const e = new RenderFinishedEventArgs();
            e.totalHeight = this.layout.height;
            e.totalWidth = this.layout.width;
            e.renderResult = this.canvas.onRenderFinished();
            this.renderFinished.trigger(e);
        }
    }

    /**
     * @target web
     */
    class AlphaTabWebWorker {
        constructor(main) {
            this._main = main;
            this._main.addEventListener('message', this.handleMessage.bind(this), false);
        }
        static init() {
            globalThis.alphaTabWebWorker = new AlphaTabWebWorker(globalThis);
        }
        handleMessage(e) {
            let data = e.data;
            let cmd = data ? data.cmd : '';
            switch (cmd) {
                case 'alphaTab.initialize':
                    let settings = new Settings();
                    settings.fillFromJson(data.settings);
                    Logger.logLevel = settings.core.logLevel;
                    this._renderer = new ScoreRenderer(settings);
                    this._renderer.partialRenderFinished.on(result => {
                        this._main.postMessage({
                            cmd: 'alphaTab.partialRenderFinished',
                            result: result
                        });
                    });
                    this._renderer.renderFinished.on(result => {
                        this._main.postMessage({
                            cmd: 'alphaTab.renderFinished',
                            result: result
                        });
                    });
                    this._renderer.postRenderFinished.on(() => {
                        var _a, _b;
                        this._main.postMessage({
                            cmd: 'alphaTab.postRenderFinished',
                            boundsLookup: (_b = (_a = this._renderer.boundsLookup) === null || _a === void 0 ? void 0 : _a.toJson()) !== null && _b !== void 0 ? _b : null
                        });
                    });
                    this._renderer.preRender.on(resize => {
                        this._main.postMessage({
                            cmd: 'alphaTab.preRender',
                            resize: resize
                        });
                    });
                    this._renderer.error.on(this.error.bind(this));
                    break;
                case 'alphaTab.invalidate':
                    this._renderer.render();
                    break;
                case 'alphaTab.resizeRender':
                    this._renderer.resizeRender();
                    break;
                case 'alphaTab.setWidth':
                    this._renderer.width = data.width;
                    break;
                case 'alphaTab.renderScore':
                    this.updateFontSizes(data.fontSizes);
                    let score = JsonConverter.jsObjectToScore(data.score, this._renderer.settings);
                    this.renderMultiple(score, data.trackIndexes);
                    break;
                case 'alphaTab.updateSettings':
                    this.updateSettings(data.settings);
                    break;
            }
        }
        updateFontSizes(fontSizes) {
            if (fontSizes) {
                if (!FontSizes.FontSizeLookupTables) {
                    FontSizes.FontSizeLookupTables = new Map();
                }
                for (let font in fontSizes) {
                    FontSizes.FontSizeLookupTables.set(font, fontSizes[font]);
                }
            }
        }
        updateSettings(json) {
            this._renderer.settings.fillFromJson(json);
        }
        renderMultiple(score, trackIndexes) {
            try {
                this._renderer.renderScore(score, trackIndexes);
            }
            catch (e) {
                this.error(e);
            }
        }
        error(error) {
            Logger.error('Worker', 'An unexpected error occurred in worker', error);
            this._main.postMessage({
                cmd: 'alphaTab.error',
                error: error
            });
        }
    }

    /**
     * This public enum lists all different text alignments
     */
    var TextAlign;
    (function (TextAlign) {
        /**
         * Text is left aligned.
         */
        TextAlign[TextAlign["Left"] = 0] = "Left";
        /**
         * Text is centered.
         */ TextAlign[TextAlign["Center"] = 1] = "Center";
        /**
         * Text is right aligned.
         */ TextAlign[TextAlign["Right"] = 2] = "Right";
    })(TextAlign || (TextAlign = {}));
    /**
     * This public enum lists all base line modes
     */
    var TextBaseline;
    (function (TextBaseline) {
        /**
         * Text is aligned on top.
         */
        TextBaseline[TextBaseline["Top"] = 0] = "Top";
        /**
         * Text is aligned middle
         */ TextBaseline[TextBaseline["Middle"] = 1] = "Middle";
        /**
         * Text is aligend on the bottom.
         */ TextBaseline[TextBaseline["Bottom"] = 2] = "Bottom";
    })(TextBaseline || (TextBaseline = {}));

    var MusicFontSymbol;
    (function (MusicFontSymbol) {
        MusicFontSymbol[MusicFontSymbol["None"] = -1] = "None";
        MusicFontSymbol[MusicFontSymbol["ClefG"] = 57424] = "ClefG";
        MusicFontSymbol[MusicFontSymbol["ClefC"] = 57436] = "ClefC";
        MusicFontSymbol[MusicFontSymbol["ClefF"] = 57442] = "ClefF";
        MusicFontSymbol[MusicFontSymbol["ClefNeutral"] = 57449] = "ClefNeutral";
        MusicFontSymbol[MusicFontSymbol["ClefTab"] = 57453] = "ClefTab";
        MusicFontSymbol[MusicFontSymbol["ClefTabSmall"] = 57454] = "ClefTabSmall";
        MusicFontSymbol[MusicFontSymbol["RestQuadrupleWhole"] = 58593] = "RestQuadrupleWhole";
        MusicFontSymbol[MusicFontSymbol["RestDoubleWhole"] = 58594] = "RestDoubleWhole";
        MusicFontSymbol[MusicFontSymbol["RestWhole"] = 58595] = "RestWhole";
        MusicFontSymbol[MusicFontSymbol["RestHalf"] = 58596] = "RestHalf";
        MusicFontSymbol[MusicFontSymbol["RestQuarter"] = 58597] = "RestQuarter";
        MusicFontSymbol[MusicFontSymbol["RestEighth"] = 58598] = "RestEighth";
        MusicFontSymbol[MusicFontSymbol["RestSixteenth"] = 58599] = "RestSixteenth";
        MusicFontSymbol[MusicFontSymbol["RestThirtySecond"] = 58600] = "RestThirtySecond";
        MusicFontSymbol[MusicFontSymbol["RestSixtyFourth"] = 58601] = "RestSixtyFourth";
        MusicFontSymbol[MusicFontSymbol["RestOneHundredTwentyEighth"] = 58602] = "RestOneHundredTwentyEighth";
        MusicFontSymbol[MusicFontSymbol["RestTwoHundredFiftySixth"] = 58603] = "RestTwoHundredFiftySixth";
        MusicFontSymbol[MusicFontSymbol["Trill"] = 58726] = "Trill";
        MusicFontSymbol[MusicFontSymbol["Num0"] = 57472] = "Num0";
        MusicFontSymbol[MusicFontSymbol["Num1"] = 57473] = "Num1";
        MusicFontSymbol[MusicFontSymbol["Num2"] = 57474] = "Num2";
        MusicFontSymbol[MusicFontSymbol["Num3"] = 57475] = "Num3";
        MusicFontSymbol[MusicFontSymbol["Num4"] = 57476] = "Num4";
        MusicFontSymbol[MusicFontSymbol["Num5"] = 57477] = "Num5";
        MusicFontSymbol[MusicFontSymbol["Num6"] = 57478] = "Num6";
        MusicFontSymbol[MusicFontSymbol["Num7"] = 57479] = "Num7";
        MusicFontSymbol[MusicFontSymbol["Num8"] = 57480] = "Num8";
        MusicFontSymbol[MusicFontSymbol["Num9"] = 57481] = "Num9";
        MusicFontSymbol[MusicFontSymbol["TimeSignatureCommon"] = 57482] = "TimeSignatureCommon";
        MusicFontSymbol[MusicFontSymbol["TimeSignatureCutCommon"] = 57483] = "TimeSignatureCutCommon";
        MusicFontSymbol[MusicFontSymbol["NoteQuadrupleWhole"] = 57505] = "NoteQuadrupleWhole";
        MusicFontSymbol[MusicFontSymbol["NoteDoubleWhole"] = 57504] = "NoteDoubleWhole";
        MusicFontSymbol[MusicFontSymbol["NoteWhole"] = 57506] = "NoteWhole";
        MusicFontSymbol[MusicFontSymbol["NoteHalf"] = 57507] = "NoteHalf";
        MusicFontSymbol[MusicFontSymbol["NoteQuarter"] = 57508] = "NoteQuarter";
        MusicFontSymbol[MusicFontSymbol["NoteDead"] = 57514] = "NoteDead";
        MusicFontSymbol[MusicFontSymbol["NoteHarmonic"] = 57564] = "NoteHarmonic";
        MusicFontSymbol[MusicFontSymbol["NoteHarmonicWhole"] = 57566] = "NoteHarmonicWhole";
        MusicFontSymbol[MusicFontSymbol["NoteHiHat"] = 57523] = "NoteHiHat";
        MusicFontSymbol[MusicFontSymbol["NoteSideStick"] = 57513] = "NoteSideStick";
        MusicFontSymbol[MusicFontSymbol["NoteHiHatHalf"] = 57591] = "NoteHiHatHalf";
        MusicFontSymbol[MusicFontSymbol["NoteChineseCymbal"] = 57593] = "NoteChineseCymbal";
        MusicFontSymbol[MusicFontSymbol["FooterUpEighth"] = 57920] = "FooterUpEighth";
        MusicFontSymbol[MusicFontSymbol["FooterDownEighth"] = 57921] = "FooterDownEighth";
        MusicFontSymbol[MusicFontSymbol["FooterUpSixteenth"] = 57922] = "FooterUpSixteenth";
        MusicFontSymbol[MusicFontSymbol["FooterDownSixteenth"] = 57923] = "FooterDownSixteenth";
        MusicFontSymbol[MusicFontSymbol["FooterUpThirtySecond"] = 57924] = "FooterUpThirtySecond";
        MusicFontSymbol[MusicFontSymbol["FooterDownThirtySecond"] = 57925] = "FooterDownThirtySecond";
        MusicFontSymbol[MusicFontSymbol["FooterUpSixtyFourth"] = 57926] = "FooterUpSixtyFourth";
        MusicFontSymbol[MusicFontSymbol["FooterDownSixtyFourth"] = 57927] = "FooterDownSixtyFourth";
        MusicFontSymbol[MusicFontSymbol["FooterUpOneHundredTwentyEighth"] = 57928] = "FooterUpOneHundredTwentyEighth";
        MusicFontSymbol[MusicFontSymbol["FooterDownOneHundredTwentyEighth"] = 57929] = "FooterDownOneHundredTwentyEighth";
        MusicFontSymbol[MusicFontSymbol["FooterUpTwoHundredFiftySixth"] = 57930] = "FooterUpTwoHundredFiftySixth";
        MusicFontSymbol[MusicFontSymbol["FooterDownTwoHundredFiftySixth"] = 57931] = "FooterDownTwoHundredFiftySixth";
        MusicFontSymbol[MusicFontSymbol["DynamicPPP"] = 58666] = "DynamicPPP";
        MusicFontSymbol[MusicFontSymbol["DynamicPP"] = 58667] = "DynamicPP";
        MusicFontSymbol[MusicFontSymbol["DynamicP"] = 58656] = "DynamicP";
        MusicFontSymbol[MusicFontSymbol["DynamicMP"] = 58668] = "DynamicMP";
        MusicFontSymbol[MusicFontSymbol["DynamicMF"] = 58669] = "DynamicMF";
        MusicFontSymbol[MusicFontSymbol["DynamicF"] = 58658] = "DynamicF";
        MusicFontSymbol[MusicFontSymbol["DynamicFF"] = 58671] = "DynamicFF";
        MusicFontSymbol[MusicFontSymbol["DynamicFFF"] = 58672] = "DynamicFFF";
        MusicFontSymbol[MusicFontSymbol["Accentuation"] = 58528] = "Accentuation";
        MusicFontSymbol[MusicFontSymbol["HeavyAccentuation"] = 58540] = "HeavyAccentuation";
        MusicFontSymbol[MusicFontSymbol["WaveHorizontalSlight"] = 60068] = "WaveHorizontalSlight";
        MusicFontSymbol[MusicFontSymbol["WaveHorizontalWide"] = 60126] = "WaveHorizontalWide";
        MusicFontSymbol[MusicFontSymbol["PickStrokeDown"] = 58896] = "PickStrokeDown";
        MusicFontSymbol[MusicFontSymbol["PickStrokeUp"] = 58898] = "PickStrokeUp";
        MusicFontSymbol[MusicFontSymbol["TremoloPickingThirtySecond"] = 57890] = "TremoloPickingThirtySecond";
        MusicFontSymbol[MusicFontSymbol["TremoloPickingSixteenth"] = 57889] = "TremoloPickingSixteenth";
        MusicFontSymbol[MusicFontSymbol["TremoloPickingEighth"] = 57888] = "TremoloPickingEighth";
        MusicFontSymbol[MusicFontSymbol["Tempo"] = 57813] = "Tempo";
        MusicFontSymbol[MusicFontSymbol["NoteEighth"] = 57815] = "NoteEighth";
        MusicFontSymbol[MusicFontSymbol["AccidentalFlat"] = 57952] = "AccidentalFlat";
        MusicFontSymbol[MusicFontSymbol["AccidentalNatural"] = 57953] = "AccidentalNatural";
        MusicFontSymbol[MusicFontSymbol["AccidentalSharp"] = 57954] = "AccidentalSharp";
        MusicFontSymbol[MusicFontSymbol["AccidentalQuarterToneFlatArrowUp"] = 57968] = "AccidentalQuarterToneFlatArrowUp";
        MusicFontSymbol[MusicFontSymbol["AccidentalQuarterToneSharpArrowUp"] = 57972] = "AccidentalQuarterToneSharpArrowUp";
        MusicFontSymbol[MusicFontSymbol["AccidentalQuarterToneNaturalArrowUp"] = 57970] = "AccidentalQuarterToneNaturalArrowUp";
        MusicFontSymbol[MusicFontSymbol["Ottava8"] = 58640] = "Ottava8";
        MusicFontSymbol[MusicFontSymbol["Ottava8va"] = 58641] = "Ottava8va";
        MusicFontSymbol[MusicFontSymbol["Ottava8vb"] = 58652] = "Ottava8vb";
        MusicFontSymbol[MusicFontSymbol["Ottava15"] = 58644] = "Ottava15";
        MusicFontSymbol[MusicFontSymbol["Ottava15ma"] = 58645] = "Ottava15ma";
        MusicFontSymbol[MusicFontSymbol["OttavaMBaseline"] = 60565] = "OttavaMBaseline";
        MusicFontSymbol[MusicFontSymbol["OttavaBBaseline"] = 60563] = "OttavaBBaseline";
        MusicFontSymbol[MusicFontSymbol["SimileMarkSimple"] = 58624] = "SimileMarkSimple";
        MusicFontSymbol[MusicFontSymbol["SimileMarkDouble"] = 58625] = "SimileMarkDouble";
        MusicFontSymbol[MusicFontSymbol["FermataMedium"] = 58560] = "FermataMedium";
        MusicFontSymbol[MusicFontSymbol["FermataShort"] = 58564] = "FermataShort";
        MusicFontSymbol[MusicFontSymbol["FermataLong"] = 58566] = "FermataLong";
        MusicFontSymbol[MusicFontSymbol["FretboardX"] = 59481] = "FretboardX";
        MusicFontSymbol[MusicFontSymbol["FretboardO"] = 59482] = "FretboardO";
    })(MusicFontSymbol || (MusicFontSymbol = {}));

    /**
     * A canvas implementation for HTML5 canvas
     * @target web
     */
    class Html5Canvas {
        constructor() {
            this._canvas = null;
            this._color = new Color(0, 0, 0, 0xff);
            this._font = new Font('Arial', 10, FontStyle.Plain);
            this._lineWidth = 0;
            let fontElement = document.createElement('span');
            fontElement.classList.add('at');
            document.body.appendChild(fontElement);
            let style = window.getComputedStyle(fontElement);
            let family = style.fontFamily;
            if (family.startsWith('"') || family.startsWith("'")) {
                family = family.substr(1, family.length - 2);
            }
            this._musicFont = new Font(family, parseFloat(style.fontSize), FontStyle.Plain);
            this._measureCanvas = document.createElement('canvas');
            this._measureCanvas.width = 10;
            this._measureCanvas.height = 10;
            this._measureCanvas.style.width = '10px';
            this._measureCanvas.style.height = '10px';
            this._measureContext = this._measureCanvas.getContext('2d');
            this._measureContext.textBaseline = 'hanging';
        }
        onRenderFinished() {
            return null;
        }
        beginRender(width, height) {
            this._canvas = document.createElement('canvas');
            this._canvas.width = width | 0;
            this._canvas.height = height | 0;
            this._canvas.style.width = width + 'px';
            this._canvas.style.height = height + 'px';
            this._context = this._canvas.getContext('2d');
            this._context.textBaseline = 'hanging';
            this._context.lineWidth = this._lineWidth;
        }
        endRender() {
            let result = this._canvas;
            this._canvas = null;
            return result;
        }
        get color() {
            return this._color;
        }
        set color(value) {
            if (this._color.rgba === value.rgba) {
                return;
            }
            this._color = value;
            this._context.strokeStyle = value.rgba;
            this._context.fillStyle = value.rgba;
        }
        get lineWidth() {
            return this._lineWidth;
        }
        set lineWidth(value) {
            this._lineWidth = value;
            if (this._context) {
                this._context.lineWidth = value;
            }
        }
        fillRect(x, y, w, h) {
            if (w > 0) {
                this._context.fillRect((x | 0), (y | 0), w, h);
            }
        }
        strokeRect(x, y, w, h) {
            this._context.strokeRect((x | 0), (y | 0), w, h);
        }
        beginPath() {
            this._context.beginPath();
        }
        closePath() {
            this._context.closePath();
        }
        moveTo(x, y) {
            this._context.moveTo((x | 0), (y | 0));
        }
        lineTo(x, y) {
            this._context.lineTo((x | 0), (y | 0));
        }
        quadraticCurveTo(cpx, cpy, x, y) {
            this._context.quadraticCurveTo(cpx, cpy, x, y);
        }
        bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
            this._context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
        }
        fillCircle(x, y, radius) {
            this._context.beginPath();
            this._context.arc((x | 0), (y | 0), radius, 0, Math.PI * 2, true);
            this.fill();
        }
        fill() {
            this._context.fill();
        }
        stroke() {
            this._context.stroke();
        }
        get font() {
            return this._font;
        }
        set font(value) {
            this._font = value;
            if (this._context) {
                this._context.font = value.toCssString(this.settings.display.scale);
            }
            this._measureContext.font = value.toCssString(this.settings.display.scale);
        }
        get textAlign() {
            switch (this._context.textAlign) {
                case 'left':
                    return TextAlign.Left;
                case 'center':
                    return TextAlign.Center;
                case 'right':
                    return TextAlign.Right;
                default:
                    return TextAlign.Left;
            }
        }
        set textAlign(value) {
            switch (value) {
                case TextAlign.Left:
                    this._context.textAlign = 'left';
                    break;
                case TextAlign.Center:
                    this._context.textAlign = 'center';
                    break;
                case TextAlign.Right:
                    this._context.textAlign = 'right';
                    break;
            }
        }
        get textBaseline() {
            switch (this._context.textBaseline) {
                case 'hanging':
                    return TextBaseline.Top;
                case 'middle':
                    return TextBaseline.Middle;
                case 'bottom':
                    return TextBaseline.Bottom;
                default:
                    return TextBaseline.Top;
            }
        }
        set textBaseline(value) {
            switch (value) {
                case TextBaseline.Top:
                    this._context.textBaseline = 'hanging';
                    break;
                case TextBaseline.Middle:
                    this._context.textBaseline = 'middle';
                    break;
                case TextBaseline.Bottom:
                    this._context.textBaseline = 'bottom';
                    break;
            }
        }
        beginGroup(_) {
            // not supported
        }
        endGroup() {
            // not supported
        }
        fillText(text, x, y) {
            this._context.fillText(text, (x | 0), (y | 0));
        }
        measureText(text) {
            return this._measureContext.measureText(text).width;
        }
        fillMusicFontSymbol(x, y, scale, symbol, centerAtPosition = false) {
            if (symbol === MusicFontSymbol.None) {
                return;
            }
            this.fillMusicFontSymbolText(x, y, scale, String.fromCharCode(symbol), centerAtPosition);
        }
        fillMusicFontSymbols(x, y, scale, symbols, centerAtPosition = false) {
            let s = '';
            for (let symbol of symbols) {
                if (symbol !== MusicFontSymbol.None) {
                    s += String.fromCharCode(symbol);
                }
            }
            this.fillMusicFontSymbolText(x, y, scale, s, centerAtPosition);
        }
        fillMusicFontSymbolText(x, y, scale, symbols, centerAtPosition = false) {
            let textAlign = this._context.textAlign;
            let baseLine = this._context.textBaseline;
            let font = this._context.font;
            this._context.font = this._musicFont.toCssString(scale);
            this._context.textBaseline = 'middle';
            if (centerAtPosition) {
                this._context.textAlign = 'center';
            }
            this._context.fillText(symbols, (x | 0), (y | 0));
            this._context.textBaseline = baseLine;
            this._context.font = font;
            this._context.textAlign = textAlign;
        }
        beginRotate(centerX, centerY, angle) {
            this._context.save();
            this._context.translate(centerX, centerY);
            this._context.rotate((angle * Math.PI) / 180.0);
        }
        endRotate() {
            this._context.restore();
        }
    }

    /**
     * This implementation of the {@link IMidiFileHandler}
     * generates a {@link MidiFile} object which can be used in AlphaSynth for playback.
     */
    class AlphaSynthMidiFileHandler {
        /**
         * Initializes a new instance of the {@link AlphaSynthMidiFileHandler} class.
         * @param midiFile The midi file.
         */
        constructor(midiFile) {
            this._midiFile = midiFile;
        }
        addTimeSignature(tick, timeSignatureNumerator, timeSignatureDenominator) {
            let denominatorIndex = 0;
            // tslint:disable-next-line: no-conditional-assignment
            while ((timeSignatureDenominator = timeSignatureDenominator >> 1) > 0) {
                denominatorIndex++;
            }
            const message = new MetaDataEvent(tick, 0xff, MetaEventType.TimeSignature, new Uint8Array([timeSignatureNumerator & 0xff, denominatorIndex & 0xff, 48, 8]));
            this._midiFile.addEvent(message);
        }
        addRest(track, tick, channel) {
            const message = new SystemExclusiveEvent(tick, SystemCommonType.SystemExclusive, 0, new Uint8Array([0xff]));
            this._midiFile.addEvent(message);
        }
        addNote(track, start, length, key, dynamicValue, channel) {
            const velocity = MidiUtils.dynamicToVelocity(dynamicValue);
            const noteOn = new MidiEvent(start, this.makeCommand(MidiEventType.NoteOn, channel), AlphaSynthMidiFileHandler.fixValue(key), AlphaSynthMidiFileHandler.fixValue(velocity));
            this._midiFile.addEvent(noteOn);
            const noteOff = new MidiEvent(start + length, this.makeCommand(MidiEventType.NoteOff, channel), AlphaSynthMidiFileHandler.fixValue(key), AlphaSynthMidiFileHandler.fixValue(velocity));
            this._midiFile.addEvent(noteOff);
        }
        makeCommand(command, channel) {
            return (command & 0xf0) | (channel & 0x0f);
        }
        static fixValue(value) {
            if (value > 127) {
                return 127;
            }
            if (value < 0) {
                return 0;
            }
            return value;
        }
        addControlChange(track, tick, channel, controller, value) {
            const message = new MidiEvent(tick, this.makeCommand(MidiEventType.Controller, channel), AlphaSynthMidiFileHandler.fixValue(controller), AlphaSynthMidiFileHandler.fixValue(value));
            this._midiFile.addEvent(message);
        }
        addProgramChange(track, tick, channel, program) {
            const message = new MidiEvent(tick, this.makeCommand(MidiEventType.ProgramChange, channel), AlphaSynthMidiFileHandler.fixValue(program), 0);
            this._midiFile.addEvent(message);
        }
        addTempo(tick, tempo) {
            // bpm -> microsecond per quarter note
            const tempoInUsq = (60000000 / tempo) | 0;
            const message = new MetaNumberEvent(tick, 0xff, MetaEventType.Tempo, tempoInUsq);
            this._midiFile.addEvent(message);
        }
        addBend(track, tick, channel, value) {
            const message = new MidiEvent(tick, this.makeCommand(MidiEventType.PitchBend, channel), 0, AlphaSynthMidiFileHandler.fixValue(value));
            this._midiFile.addEvent(message);
        }
        finishTrack(track, tick) {
            const message = new MetaDataEvent(tick, 0xff, MetaEventType.EndOfTrack, new Uint8Array(0));
            this._midiFile.addEvent(message);
        }
    }

    /**
     * Represents the time period, for which a {@link Beat} is played.
     */
    class BeatTickLookup {
        constructor() {
            this._highlightedBeats = new Map();
            /**
             * Gets or sets the start time in midi ticks at which the given beat is played.
             */
            this.start = 0;
            /**
             * Gets or sets the end time in midi ticks at which the given beat is played.
             */
            this.end = 0;
            /**
             * Gets or sets whether the beat is the placeholder beat for an empty bar.
             */
            this.isEmptyBar = false;
            /**
             * Gets or sets a list of all beats that should be highlighted when
             * the beat of this lookup starts playing.
             */
            this.beatsToHighlight = [];
        }
        highlightBeat(beat) {
            if (!this._highlightedBeats.has(beat.id)) {
                this._highlightedBeats.set(beat.id, true);
                this.beatsToHighlight.push(beat);
            }
        }
    }

    /**
     * Lists all midi controllers.
     */
    var ControllerType;
    (function (ControllerType) {
        /**
         * Bank Select. MSB
         */
        ControllerType[ControllerType["BankSelectCoarse"] = 0] = "BankSelectCoarse";
        /**
         * Modulation wheel or lever MSB
         */
        ControllerType[ControllerType["ModulationCoarse"] = 1] = "ModulationCoarse";
        //BreathControllerCoarse = 0x02,
        //FootControllerCoarse = 0x04,
        //PortamentoTimeCoarse = 0x05,
        /**
         * Data entry MSB
         */
        ControllerType[ControllerType["DataEntryCoarse"] = 6] = "DataEntryCoarse";
        /**
         * Channel Volume MSB
         */
        ControllerType[ControllerType["VolumeCoarse"] = 7] = "VolumeCoarse";
        //BalanceCoarse = 0x08,
        /**
         * Pan MSB
         */
        ControllerType[ControllerType["PanCoarse"] = 10] = "PanCoarse";
        /**
         * Expression Controller MSB
         */
        ControllerType[ControllerType["ExpressionControllerCoarse"] = 11] = "ExpressionControllerCoarse";
        //EffectControl1Coarse = 0x0C,
        //EffectControl2Coarse = 0x0D,
        //GeneralPurposeSlider1 = 0x10,
        //GeneralPurposeSlider2 = 0x11,
        //GeneralPurposeSlider3 = 0x12,
        //GeneralPurposeSlider4 = 0x13,
        //BankSelectFine = 0x20,
        /**
         * Modulation wheel or level LSB
         */
        ControllerType[ControllerType["ModulationFine"] = 33] = "ModulationFine";
        //BreathControllerFine = 0x22,
        //FootControllerFine = 0x24,
        //PortamentoTimeFine = 0x25,
        /**
         * Data Entry LSB
         */
        ControllerType[ControllerType["DataEntryFine"] = 38] = "DataEntryFine";
        /**
         * Channel Volume LSB
         */
        ControllerType[ControllerType["VolumeFine"] = 39] = "VolumeFine";
        //BalanceFine = 0x28,
        /**
         * Pan LSB
         */
        ControllerType[ControllerType["PanFine"] = 42] = "PanFine";
        /**
         * Expression controller LSB
         */
        ControllerType[ControllerType["ExpressionControllerFine"] = 43] = "ExpressionControllerFine";
        //EffectControl1Fine = 0x2C,
        //EffectControl2Fine = 0x2D,
        /**
         * Damper pedal (sustain)
         */
        ControllerType[ControllerType["HoldPedal"] = 64] = "HoldPedal";
        //Portamento = 0x41,
        //SostenutoPedal = 0x42,
        //SoftPedal = 0x43,
        /**
         * Legato Footswitch
         */
        ControllerType[ControllerType["LegatoPedal"] = 68] = "LegatoPedal";
        //Hold2Pedal = 0x45,
        //SoundVariation = 0x46,
        //SoundTimbre = 0x47,
        //SoundReleaseTime = 0x48,
        //SoundAttackTime = 0x49,
        //SoundBrightness = 0x4A,
        //SoundControl6 = 0x4B,
        //SoundControl7 = 0x4C,
        //SoundControl8 = 0x4D,
        //SoundControl9 = 0x4E,
        //SoundControl10 = 0x4F,
        //GeneralPurposeButton1 = 0x50,
        //GeneralPurposeButton2 = 0x51,
        //GeneralPurposeButton3 = 0x52,
        //GeneralPurposeButton4 = 0x53,
        //EffectsLevel = 0x5B,
        //TremuloLevel = 0x5C,
        //ChorusLevel = 0x5D,
        //CelesteLevel = 0x5E,
        //PhaseLevel = 0x5F,
        //DataButtonIncrement = 0x60,
        //DataButtonDecrement = 0x61,
        /**
         * Non-Registered Parameter Number LSB
         */
        ControllerType[ControllerType["NonRegisteredParameterFine"] = 98] = "NonRegisteredParameterFine";
        /**
         * Non-Registered Parameter Number MSB
         */
        ControllerType[ControllerType["NonRegisteredParameterCourse"] = 99] = "NonRegisteredParameterCourse";
        /**
         * Registered Parameter Number LSB
         */
        ControllerType[ControllerType["RegisteredParameterFine"] = 100] = "RegisteredParameterFine";
        /**
         * Registered Parameter Number MSB
         */
        ControllerType[ControllerType["RegisteredParameterCourse"] = 101] = "RegisteredParameterCourse";
        //AllSoundOff = 0x78,
        /**
         * Reset all controllers
         */
        ControllerType[ControllerType["ResetControllers"] = 121] = "ResetControllers";
        //LocalKeyboard = 0x7A,
        /**
         * All notes of.
         */
        ControllerType[ControllerType["AllNotesOff"] = 123] = "AllNotesOff";
        //OmniModeOff = 0x7C,
        //OmniModeOn = 0x7D,
        //MonoMode = 0x7E,
        //PolyMode = 0x7F
    })(ControllerType || (ControllerType = {}));

    class MidiPlaybackController {
        constructor(score) {
            this._repeatStartIndex = 0;
            this._repeatNumber = 0;
            this._repeatOpen = false;
            this.shouldPlay = true;
            this.index = 0;
            this.currentTick = 0;
            this._score = score;
        }
        get finished() {
            return this.index >= this._score.masterBars.length;
        }
        processCurrent() {
            const masterBar = this._score.masterBars[this.index];
            const masterBarAlternateEndings = masterBar.alternateEndings;
            // if the repeat group wasn't closed we reset the repeating
            // on the last group opening
            if (!masterBar.repeatGroup.isClosed &&
                masterBar.repeatGroup.openings[masterBar.repeatGroup.openings.length - 1] === masterBar) {
                this._repeatNumber = 0;
                this._repeatOpen = false;
            }
            if ((masterBar.isRepeatStart || masterBar.index === 0) && this._repeatNumber === 0) {
                this._repeatStartIndex = this.index;
                this._repeatOpen = true;
            }
            else if (masterBar.isRepeatStart) {
                this.shouldPlay = true;
            }
            // if we encounter an alternate ending
            if (this._repeatOpen && masterBarAlternateEndings > 0) {
                // do we need to skip this section?
                if ((masterBarAlternateEndings & (1 << this._repeatNumber)) === 0) {
                    this.shouldPlay = false;
                }
                else {
                    this.shouldPlay = true;
                }
            }
            if (this.shouldPlay) {
                this.currentTick += masterBar.calculateDuration();
            }
        }
        moveNext() {
            const masterBar = this._score.masterBars[this.index];
            const masterBarRepeatCount = masterBar.repeatCount - 1;
            // if we encounter a repeat end
            if (this._repeatOpen && masterBarRepeatCount > 0) {
                // more repeats required?
                if (this._repeatNumber < masterBarRepeatCount) {
                    // jump to start
                    this.index = this._repeatStartIndex;
                    this._repeatNumber++;
                }
                else {
                    // no repeats anymore, jump after repeat end
                    this._repeatNumber = 0;
                    this._repeatOpen = false;
                    this.shouldPlay = true;
                    this.index++;
                }
            }
            else {
                this.index++;
            }
        }
    }

    /**
     * Represents the time period, for which all bars of a {@link MasterBar} are played.
     */
    class MasterBarTickLookup {
        constructor() {
            /**
             * Gets or sets the start time in midi ticks at which the MasterBar is played.
             */
            this.start = 0;
            /**
             * Gets or sets the end time in midi ticks at which the MasterBar is played.
             */
            this.end = 0;
            /**
             * Gets or sets the current tempo when the MasterBar is played.
             */
            this.tempo = 0;
            /**
             * Gets or sets the list of {@link BeatTickLookup} object which define the durations
             * for all {@link Beats} played within the period of this MasterBar.
             */
            this.beats = [];
            /**
             * Gets or sets the {@link MasterBarTickLookup} of the next masterbar in the {@link Score}
             */
            this.nextMasterBar = null;
        }
        /**
         * Performs the neccessary finalization steps after all information was written.
         */
        finish() {
            this.beats.sort((a, b) => {
                return a.start - b.start;
            });
        }
        /**
         * Adds a new {@link BeatTickLookup} to the list of played beats during this MasterBar period.
         * @param beat
         */
        addBeat(beat) {
            this.beats.push(beat);
        }
    }

    /**
     * Represents the results of searching the currently played beat.
     * @see MidiTickLookup.FindBeat
     */
    class MidiTickLookupFindBeatResult {
        constructor() {
            /**
             * Gets or sets the beat that will be played next.
             */
            this.nextBeat = null;
            /**
             * Gets or sets the duration in milliseconds how long this beat is playing.
             */
            this.duration = 0;
        }
    }
    /**
     * This class holds all information about when {@link MasterBar}s and {@link Beat}s are played.
     */
    class MidiTickLookup {
        constructor() {
            this._currentMasterBar = null;
            /**
             * Gets a dictionary of all master bars played. The index is the index equals to {@link MasterBar.index}.
             * This lookup only contains the first time a MasterBar is played. For a whole sequence of the song refer to {@link MasterBars}.
             */
            this.masterBarLookup = new Map();
            /**
             * Gets a list of all {@link MasterBarTickLookup} sorted by time.
             */
            this.masterBars = [];
        }
        /**
         * Performs the neccessary finalization steps after all information was written.
         */
        finish() {
            let previous = null;
            let activeBeats = [];
            for (let bar of this.masterBars) {
                bar.finish();
                if (previous) {
                    previous.nextMasterBar = bar;
                }
                for (const beat of bar.beats) {
                    // 1. calculate newly which beats are still active
                    const newActiveBeats = [];
                    // TODO: only create new list if current position changed
                    for (let activeBeat of activeBeats) {
                        if (activeBeat.end > beat.start) {
                            newActiveBeats.push(activeBeat);
                            // 2. remember for current beat which active beats to highlight
                            beat.highlightBeat(activeBeat.beat);
                            // 3. ensure that active beat highlights current beat if they match the range
                            if (beat.start <= activeBeat.start) {
                                activeBeat.highlightBeat(beat.beat);
                            }
                        }
                    }
                    newActiveBeats.push(beat);
                    activeBeats = newActiveBeats;
                }
                previous = bar;
            }
        }
        /**
         * Finds the currently played beat given a list of tracks and the current time.
         * @param tracks The tracks in which to search the played beat for.
         * @param tick The current time in midi ticks.
         * @returns The information about the current beat or null if no beat could be found.
         */
        findBeat(tracks, tick) {
            // get all beats within the masterbar
            const masterBar = this.findMasterBar(tick);
            if (!masterBar) {
                return null;
            }
            const trackLookup = new Map();
            for (const track of tracks) {
                trackLookup.set(track.index, true);
            }
            let beat = null;
            let index = 0;
            let beats = masterBar.beats;
            for (let b = 0; b < beats.length; b++) {
                // is the current beat played on the given tick?
                let currentBeat = beats[b];
                // skip non relevant beats
                if (!trackLookup.has(currentBeat.beat.voice.bar.staff.track.index)) {
                    continue;
                }
                if (currentBeat.start <= tick && tick < currentBeat.end) {
                    // take the latest played beat we can find. (most right)
                    if (!beat || beat.start < currentBeat.start) {
                        beat = beats[b];
                        index = b;
                    }
                }
                else if (currentBeat.end > tick) {
                    break;
                }
            }
            if (!beat) {
                return null;
            }
            // search for next relevant beat in masterbar
            let nextBeat = null;
            for (let b = index + 1; b < beats.length; b++) {
                const currentBeat = beats[b];
                if (currentBeat.beat.graceType === GraceType.None &&
                    currentBeat.start > beat.start &&
                    trackLookup.has(currentBeat.beat.voice.bar.staff.track.index)) {
                    nextBeat = currentBeat;
                    break;
                }
            }
            // first relevant beat in next bar
            if (!nextBeat && masterBar.nextMasterBar) {
                beats = masterBar.nextMasterBar.beats;
                for (let b = 0; b < beats.length; b++) {
                    const currentBeat = beats[b];
                    if (currentBeat.beat.graceType === GraceType.None &&
                        trackLookup.has(currentBeat.beat.voice.bar.staff.track.index)) {
                        nextBeat = currentBeat;
                        break;
                    }
                }
            }
            const result = new MidiTickLookupFindBeatResult();
            result.currentBeat = beat.beat;
            result.nextBeat = !nextBeat ? null : nextBeat.beat;
            result.duration = !nextBeat
                ? MidiUtils.ticksToMillis(beat.end - beat.start, masterBar.tempo)
                : MidiUtils.ticksToMillis(nextBeat.start - beat.start, masterBar.tempo);
            result.beatsToHighlight = beat.beatsToHighlight;
            return result;
        }
        findMasterBar(tick) {
            const bars = this.masterBars;
            let bottom = 0;
            let top = bars.length - 1;
            while (bottom <= top) {
                const middle = ((top + bottom) / 2) | 0;
                const bar = bars[middle];
                // found?
                if (tick >= bar.start && tick < bar.end) {
                    return bar;
                }
                // search in lower half
                if (tick < bar.start) {
                    top = middle - 1;
                }
                else {
                    bottom = middle + 1;
                }
            }
            return null;
        }
        /**
         * Gets the {@link MasterBarTickLookup} for a given masterbar at which the masterbar is played the first time.
         * @param bar The masterbar to find the time period for.
         * @returns A {@link MasterBarTickLookup} containing the details about the first time the {@link MasterBar} is played.
         */
        getMasterBar(bar) {
            if (!this.masterBarLookup.has(bar.index)) {
                const fallback = new MasterBarTickLookup();
                fallback.masterBar = bar;
                return fallback;
            }
            return this.masterBarLookup.get(bar.index);
        }
        /**
         * Gets the start time in midi ticks for a given masterbar at which the masterbar is played the first time.
         * @param bar The masterbar to find the time period for.
         * @returns The time in midi ticks at which the masterbar is played the first time or 0 if the masterbar is not contained
         */
        getMasterBarStart(bar) {
            if (!this.masterBarLookup.has(bar.index)) {
                return 0;
            }
            return this.masterBarLookup.get(bar.index).start;
        }
        /**
         * Adds a new {@link MasterBarTickLookup} to the lookup table.
         * @param masterBar The item to add.
         */
        addMasterBar(masterBar) {
            this.masterBars.push(masterBar);
            this._currentMasterBar = masterBar;
            if (!this.masterBarLookup.has(masterBar.masterBar.index)) {
                this.masterBarLookup.set(masterBar.masterBar.index, masterBar);
            }
        }
        /**
         * Adds the given {@link BeatTickLookup} to the current {@link MidiTickLookup}.
         * @param beat The lookup to add.
         */
        addBeat(beat) {
            var _a;
            (_a = this._currentMasterBar) === null || _a === void 0 ? void 0 : _a.addBeat(beat);
        }
    }

    class MidiNoteDuration {
        constructor() {
            this.noteOnly = 0;
            this.untilTieEnd = 0;
            this.letRingEnd = 0;
        }
    }
    class TripletFeelDurations {
        constructor() {
            this.firstBeatDuration = 0;
            this.secondBeatStartOffset = 0;
            this.secondBeatDuration = 0;
        }
    }
    /**
     * This generator creates a midi file using a score.
     */
    class MidiFileGenerator {
        /**
         * Initializes a new instance of the {@link MidiFileGenerator} class.
         * @param score The score for which the midi file should be generated.
         * @param settings The settings ot use for generation.
         * @param handler The handler that should be used for generating midi events.
         */
        constructor(score, settings, handler) {
            this._currentTempo = 0;
            this._currentBarRepeatLookup = null;
            /**
             * Gets a lookup object which can be used to quickly find beats and bars
             * at a given midi tick position.
             */
            this.tickLookup = new MidiTickLookup();
            this._currentTripletFeel = null;
            this._score = score;
            this._settings = !settings ? new Settings() : settings;
            this._currentTempo = this._score.tempo;
            this._handler = handler;
        }
        /**
         * Starts the generation of the midi file.
         */
        generate() {
            // initialize tracks
            for (const track of this._score.tracks) {
                this.generateTrack(track);
            }
            Logger.info('Midi', 'Begin midi generation');
            const controller = new MidiPlaybackController(this._score);
            let previousMasterBar = null;
            // store the previous played bar for repeats
            while (!controller.finished) {
                const index = controller.index;
                const bar = this._score.masterBars[index];
                const currentTick = controller.currentTick;
                controller.processCurrent();
                if (controller.shouldPlay) {
                    this.generateMasterBar(bar, previousMasterBar, currentTick);
                    for (const track of this._score.tracks) {
                        for (const staff of track.staves) {
                            if (index < staff.bars.length) {
                                this.generateBar(staff.bars[index], currentTick);
                            }
                        }
                    }
                }
                controller.moveNext();
                previousMasterBar = bar;
            }
            for (const track of this._score.tracks) {
                this._handler.finishTrack(track.index, controller.currentTick);
            }
            this.tickLookup.finish();
            Logger.info('Midi', 'Midi generation done');
        }
        generateTrack(track) {
            // channel
            this.generateChannel(track, track.playbackInfo.primaryChannel, track.playbackInfo);
            if (track.playbackInfo.primaryChannel !== track.playbackInfo.secondaryChannel) {
                this.generateChannel(track, track.playbackInfo.secondaryChannel, track.playbackInfo);
            }
        }
        generateChannel(track, channel, playbackInfo) {
            let volume = MidiFileGenerator.toChannelShort(playbackInfo.volume);
            let balance = MidiFileGenerator.toChannelShort(playbackInfo.balance);
            this._handler.addControlChange(track.index, 0, channel, ControllerType.VolumeCoarse, volume);
            this._handler.addControlChange(track.index, 0, channel, ControllerType.PanCoarse, balance);
            this._handler.addControlChange(track.index, 0, channel, ControllerType.ExpressionControllerCoarse, 127);
            // set parameter that is being updated (0) -> PitchBendRangeCoarse
            this._handler.addControlChange(track.index, 0, channel, ControllerType.RegisteredParameterFine, 0);
            this._handler.addControlChange(track.index, 0, channel, ControllerType.RegisteredParameterCourse, 0);
            // Set PitchBendRangeCoarse to 12
            this._handler.addControlChange(track.index, 0, channel, ControllerType.DataEntryFine, 0);
            this._handler.addControlChange(track.index, 0, channel, ControllerType.DataEntryCoarse, 12);
            this._handler.addProgramChange(track.index, 0, channel, playbackInfo.program);
        }
        static toChannelShort(data) {
            const value = Math.max(-32768, Math.min(32767, data * 8 - 1));
            return Math.max(value, -1) + 1;
        }
        generateMasterBar(masterBar, previousMasterBar, currentTick) {
            // time signature
            if (!previousMasterBar ||
                previousMasterBar.timeSignatureDenominator !== masterBar.timeSignatureDenominator ||
                previousMasterBar.timeSignatureNumerator !== masterBar.timeSignatureNumerator) {
                this._handler.addTimeSignature(currentTick, masterBar.timeSignatureNumerator, masterBar.timeSignatureDenominator);
            }
            // tempo
            if (!previousMasterBar) {
                this._handler.addTempo(currentTick, masterBar.score.tempo);
                this._currentTempo = masterBar.score.tempo;
            }
            else if (masterBar.tempoAutomation) {
                this._handler.addTempo(currentTick, masterBar.tempoAutomation.value);
                this._currentTempo = masterBar.tempoAutomation.value;
            }
            const masterBarLookup = new MasterBarTickLookup();
            masterBarLookup.masterBar = masterBar;
            masterBarLookup.start = currentTick;
            masterBarLookup.tempo = this._currentTempo;
            masterBarLookup.end = masterBarLookup.start + masterBar.calculateDuration();
            this.tickLookup.addMasterBar(masterBarLookup);
        }
        generateBar(bar, barStartTick) {
            let playbackBar = this.getPlaybackBar(bar);
            this._currentBarRepeatLookup = null;
            for (const v of playbackBar.voices) {
                this.generateVoice(v, barStartTick, bar);
            }
        }
        getPlaybackBar(bar) {
            switch (bar.simileMark) {
                case SimileMark.Simple:
                    if (bar.previousBar) {
                        bar = this.getPlaybackBar(bar.previousBar);
                    }
                    break;
                case SimileMark.FirstOfDouble:
                    if (bar.previousBar && bar.previousBar.previousBar) {
                        bar = this.getPlaybackBar(bar.previousBar.previousBar);
                    }
                    break;
                case SimileMark.SecondOfDouble:
                    if (bar.previousBar && bar.previousBar.previousBar) {
                        bar = this.getPlaybackBar(bar.previousBar.previousBar);
                    }
                    break;
            }
            return bar;
        }
        generateVoice(voice, barStartTick, realBar) {
            if (voice.isEmpty && (!voice.bar.isEmpty || voice.index !== 0)) {
                return;
            }
            for (const b of voice.beats) {
                this.generateBeat(b, barStartTick, realBar);
            }
        }
        generateBeat(beat, barStartTick, realBar) {
            let beatStart = beat.playbackStart;
            let audioDuration = beat.playbackDuration;
            if (beat.voice.bar.isEmpty) {
                audioDuration = beat.voice.bar.masterBar.calculateDuration();
            }
            else if (beat.voice.bar.masterBar.tripletFeel !== TripletFeel.NoTripletFeel &&
                this._settings.player.playTripletFeel) {
                if (this._currentTripletFeel) {
                    beatStart -= this._currentTripletFeel.secondBeatStartOffset;
                    audioDuration = this._currentTripletFeel.secondBeatDuration;
                    this._currentTripletFeel = null;
                }
                else {
                    this._currentTripletFeel = MidiFileGenerator.calculateTripletFeelInfo(beatStart, audioDuration, beat);
                    if (this._currentTripletFeel) {
                        audioDuration = this._currentTripletFeel.firstBeatDuration;
                    }
                }
            }
            const beatLookup = new BeatTickLookup();
            beatLookup.start = barStartTick + beatStart;
            const realTickOffset = !beat.nextBeat
                ? audioDuration
                : beat.nextBeat.absolutePlaybackStart - beat.absolutePlaybackStart;
            beatLookup.end = barStartTick + beatStart;
            beatLookup.highlightBeat(beat);
            beatLookup.end += realTickOffset > audioDuration ? realTickOffset : audioDuration;
            // in case of normal playback register playback
            if (realBar === beat.voice.bar) {
                beatLookup.beat = beat;
                this.tickLookup.addBeat(beatLookup);
            }
            else {
                beatLookup.isEmptyBar = true;
                beatLookup.beat = realBar.voices[0].beats[0];
                if (!this._currentBarRepeatLookup) {
                    this._currentBarRepeatLookup = beatLookup;
                    this.tickLookup.addBeat(this._currentBarRepeatLookup);
                }
                else {
                    this._currentBarRepeatLookup.end = beatLookup.end;
                }
            }
            const track = beat.voice.bar.staff.track;
            for (const automation of beat.automations) {
                this.generateAutomation(beat, automation, barStartTick);
            }
            if (beat.isRest) {
                this._handler.addRest(track.index, barStartTick + beatStart, track.playbackInfo.primaryChannel);
            }
            else {
                let brushInfo = this.getBrushInfo(beat);
                for (const n of beat.notes) {
                    this.generateNote(n, barStartTick + beatStart, audioDuration, brushInfo);
                }
            }
            if (beat.vibrato !== VibratoType.None) {
                let phaseLength = 240;
                let bendAmplitude = 3;
                switch (beat.vibrato) {
                    case VibratoType.Slight:
                        phaseLength = this._settings.player.vibrato.beatSlightLength;
                        bendAmplitude = this._settings.player.vibrato.beatSlightAmplitude;
                        break;
                    case VibratoType.Wide:
                        phaseLength = this._settings.player.vibrato.beatWideLength;
                        bendAmplitude = this._settings.player.vibrato.beatWideAmplitude;
                        break;
                }
                this.generateVibratorWithParams(beat.voice.bar.staff.track, barStartTick + beatStart, beat.playbackDuration, phaseLength, bendAmplitude, track.playbackInfo.secondaryChannel);
            }
        }
        static calculateTripletFeelInfo(beatStart, audioDuration, beat) {
            let initialDuration;
            switch (beat.voice.bar.masterBar.tripletFeel) {
                case TripletFeel.Triplet8th:
                case TripletFeel.Dotted8th:
                case TripletFeel.Scottish8th:
                    initialDuration = Duration.Eighth;
                    break;
                case TripletFeel.Triplet16th:
                case TripletFeel.Dotted16th:
                case TripletFeel.Scottish16th:
                    initialDuration = Duration.Sixteenth;
                    break;
                default:
                    // not possible
                    return null;
            }
            const interval = MidiUtils.toTicks(initialDuration);
            // it must be a plain note with the expected duration
            // without dots, triplets, grace notes etc.
            if (audioDuration !== interval) {
                return null;
            }
            // check if the beat is aligned in respect to the duration
            // e.g. the eighth notes on a 4/4 time signature must start exactly on the following
            // times to get a triplet feel applied
            // 0 480 960 1440 1920 2400 2880 3360
            if (beatStart % interval !== 0) {
                return null;
            }
            // ensure next beat matches spec
            if (!beat.nextBeat || beat.nextBeat.voice !== beat.voice || beat.playbackDuration !== interval) {
                return null;
            }
            // looks like we have a triplet feel combination start here!
            const durations = new TripletFeelDurations();
            switch (beat.voice.bar.masterBar.tripletFeel) {
                case TripletFeel.Triplet8th:
                    durations.firstBeatDuration = MidiUtils.applyTuplet(MidiUtils.toTicks(Duration.Quarter), 3, 2);
                    durations.secondBeatDuration = MidiUtils.applyTuplet(MidiUtils.toTicks(Duration.Eighth), 3, 2);
                    break;
                case TripletFeel.Dotted8th:
                    durations.firstBeatDuration = MidiUtils.applyDot(MidiUtils.toTicks(Duration.Eighth), false);
                    durations.secondBeatDuration = MidiUtils.toTicks(Duration.Sixteenth);
                    break;
                case TripletFeel.Scottish8th:
                    durations.firstBeatDuration = MidiUtils.toTicks(Duration.Sixteenth);
                    durations.secondBeatDuration = MidiUtils.applyDot(MidiUtils.toTicks(Duration.Eighth), false);
                    break;
                case TripletFeel.Triplet16th:
                    durations.firstBeatDuration = MidiUtils.applyTuplet(MidiUtils.toTicks(Duration.Eighth), 3, 2);
                    durations.secondBeatDuration = MidiUtils.applyTuplet(MidiUtils.toTicks(Duration.Sixteenth), 3, 2);
                    break;
                case TripletFeel.Dotted16th:
                    durations.firstBeatDuration = MidiUtils.applyDot(MidiUtils.toTicks(Duration.Sixteenth), false);
                    durations.secondBeatDuration = MidiUtils.toTicks(Duration.ThirtySecond);
                    break;
                case TripletFeel.Scottish16th:
                    durations.firstBeatDuration = MidiUtils.toTicks(Duration.ThirtySecond);
                    durations.secondBeatDuration = MidiUtils.applyDot(MidiUtils.toTicks(Duration.Sixteenth), false);
                    break;
            }
            // calculate the number of ticks the second beat can start earlier
            durations.secondBeatStartOffset = audioDuration - durations.firstBeatDuration;
            return durations;
        }
        generateNote(note, beatStart, beatDuration, brushInfo) {
            const track = note.beat.voice.bar.staff.track;
            const staff = note.beat.voice.bar.staff;
            const noteKey = note.realValue;
            const brushOffset = note.isStringed && note.string <= brushInfo.length ? brushInfo[note.string - 1] : 0;
            const noteStart = beatStart + brushOffset;
            const noteDuration = this.getNoteDuration(note, beatDuration);
            noteDuration.untilTieEnd -= brushOffset;
            noteDuration.noteOnly -= brushOffset;
            noteDuration.letRingEnd -= brushOffset;
            const dynamicValue = MidiFileGenerator.getDynamicValue(note);
            const channel = note.hasBend || note.beat.hasWhammyBar || note.beat.vibrato !== VibratoType.None
                ? track.playbackInfo.secondaryChannel
                : track.playbackInfo.primaryChannel;
            let initialBend = MidiFileGenerator.DefaultBend;
            if (note.hasBend) {
                initialBend += Math.round(note.bendPoints[0].value * MidiFileGenerator.DefaultBendSemitone);
            }
            else if (note.beat.hasWhammyBar) {
                initialBend += Math.round(note.beat.whammyBarPoints[0].value * MidiFileGenerator.DefaultBendSemitone);
            }
            else if (note.isTieDestination) {
                initialBend = 0;
            }
            if (initialBend > 0) {
                this._handler.addBend(track.index, noteStart, channel, initialBend);
            }
            //
            // Fade in
            if (note.beat.fadeIn) {
                this.generateFadeIn(note, noteStart, noteDuration);
            }
            //
            // Trill
            if (note.isTrill && !staff.isPercussion) {
                this.generateTrill(note, noteStart, noteDuration, noteKey, dynamicValue, channel);
                // no further generation needed
                return;
            }
            //
            // Tremolo Picking
            if (note.beat.isTremolo) {
                this.generateTremoloPicking(note, noteStart, noteDuration, noteKey, dynamicValue, channel);
                // no further generation needed
                return;
            }
            //
            // All String Bending/Variation effects
            if (note.hasBend) {
                this.generateBend(note, noteStart, noteDuration, channel);
            }
            else if (note.beat.hasWhammyBar && note.index === 0) {
                this.generateWhammy(note.beat, noteStart, noteDuration, channel);
            }
            else if (note.slideInType !== SlideInType.None || note.slideOutType !== SlideOutType.None) ;
            else if (note.vibrato !== VibratoType.None) {
                this.generateVibrato(note, noteStart, noteDuration, channel);
            }
            if (!note.isTieDestination) {
                let noteSoundDuration = Math.max(noteDuration.untilTieEnd, noteDuration.letRingEnd);
                this._handler.addNote(track.index, noteStart, noteSoundDuration, noteKey, dynamicValue, channel);
            }
        }
        getNoteDuration(note, duration) {
            const durationWithEffects = new MidiNoteDuration();
            durationWithEffects.noteOnly = duration;
            durationWithEffects.untilTieEnd = duration;
            durationWithEffects.letRingEnd = duration;
            if (note.isDead) {
                durationWithEffects.noteOnly = this.applyStaticDuration(MidiFileGenerator.DefaultDurationDead, duration);
                durationWithEffects.untilTieEnd = durationWithEffects.noteOnly;
                durationWithEffects.letRingEnd = durationWithEffects.noteOnly;
                return durationWithEffects;
            }
            if (note.isPalmMute) {
                durationWithEffects.noteOnly = this.applyStaticDuration(MidiFileGenerator.DefaultDurationPalmMute, duration);
                durationWithEffects.untilTieEnd = durationWithEffects.noteOnly;
                durationWithEffects.letRingEnd = durationWithEffects.noteOnly;
                return durationWithEffects;
            }
            if (note.isStaccato) {
                durationWithEffects.noteOnly = (duration / 2) | 0;
                durationWithEffects.untilTieEnd = durationWithEffects.noteOnly;
                durationWithEffects.letRingEnd = durationWithEffects.noteOnly;
                return durationWithEffects;
            }
            if (note.isTieOrigin) {
                const endNote = note.tieDestination;
                // for the initial start of the tie calculate absolute duration from start to end note
                if (endNote) {
                    if (!note.isTieDestination) {
                        const startTick = note.beat.absolutePlaybackStart;
                        const tieDestinationDuration = this.getNoteDuration(endNote, endNote.beat.playbackDuration);
                        const endTick = endNote.beat.absolutePlaybackStart + tieDestinationDuration.untilTieEnd;
                        durationWithEffects.untilTieEnd = endTick - startTick;
                    }
                    else {
                        // for continuing ties, take the current duration + the one from the destination
                        // this branch will be entered as part of the recusion of the if branch
                        const tieDestinationDuration = this.getNoteDuration(endNote, endNote.beat.playbackDuration);
                        durationWithEffects.untilTieEnd = duration + tieDestinationDuration.untilTieEnd;
                    }
                }
            }
            if (note.isLetRing && this._settings.notation.notationMode === exports.NotationMode.GuitarPro) {
                // LetRing ends when:
                // - rest
                let lastLetRingBeat = note.beat;
                let letRingEnd = 0;
                const maxDuration = note.beat.voice.bar.masterBar.calculateDuration();
                while (lastLetRingBeat.nextBeat) {
                    let next = lastLetRingBeat.nextBeat;
                    if (next.isRest) {
                        break;
                    }
                    // note on the same string
                    if (note.isStringed && next.hasNoteOnString(note.string)) {
                        break;
                    }
                    lastLetRingBeat = lastLetRingBeat.nextBeat;
                    letRingEnd =
                        lastLetRingBeat.absolutePlaybackStart -
                            note.beat.absolutePlaybackStart +
                            lastLetRingBeat.playbackDuration;
                    if (letRingEnd > maxDuration) {
                        letRingEnd = maxDuration;
                        break;
                    }
                }
                if (lastLetRingBeat === note.beat) {
                    durationWithEffects.letRingEnd = duration;
                }
                else {
                    durationWithEffects.letRingEnd = letRingEnd;
                }
            }
            else {
                durationWithEffects.letRingEnd = durationWithEffects.untilTieEnd;
            }
            return durationWithEffects;
        }
        applyStaticDuration(duration, maximum) {
            const value = ((this._currentTempo * duration) / BendPoint.MaxPosition) | 0;
            return Math.min(value, maximum);
        }
        static getDynamicValue(note) {
            let dynamicValue = note.dynamics;
            // more silent on hammer destination
            if (!note.beat.voice.bar.staff.isPercussion && note.hammerPullOrigin) {
                dynamicValue--;
            }
            // more silent on ghost notes
            if (note.isGhost) {
                dynamicValue--;
            }
            // louder on accent
            switch (note.accentuated) {
                case AccentuationType.Normal:
                    dynamicValue++;
                    break;
                case AccentuationType.Heavy:
                    dynamicValue += 2;
                    break;
            }
            return dynamicValue;
        }
        generateFadeIn(note, noteStart, noteDuration) {
            const track = note.beat.voice.bar.staff.track;
            const endVolume = MidiFileGenerator.toChannelShort(track.playbackInfo.volume);
            const volumeFactor = endVolume / noteDuration.noteOnly;
            const tickStep = 120;
            const steps = (noteDuration.noteOnly / tickStep) | 0;
            const endTick = noteStart + noteDuration.noteOnly;
            for (let i = steps - 1; i >= 0; i--) {
                const tick = endTick - i * tickStep;
                const volume = (tick - noteStart) * volumeFactor;
                if (i === steps - 1) {
                    this._handler.addControlChange(track.index, noteStart, track.playbackInfo.primaryChannel, ControllerType.VolumeCoarse, volume);
                    this._handler.addControlChange(track.index, noteStart, track.playbackInfo.secondaryChannel, ControllerType.VolumeCoarse, volume);
                }
                this._handler.addControlChange(track.index, tick, track.playbackInfo.primaryChannel, ControllerType.VolumeCoarse, volume);
                this._handler.addControlChange(track.index, tick, track.playbackInfo.secondaryChannel, ControllerType.VolumeCoarse, volume);
            }
        }
        generateVibrato(note, noteStart, noteDuration, channel) {
            let phaseLength = 0;
            let bendAmplitude = 0;
            switch (note.vibrato) {
                case VibratoType.Slight:
                    phaseLength = this._settings.player.vibrato.noteSlightLength;
                    bendAmplitude = this._settings.player.vibrato.noteSlightAmplitude;
                    break;
                case VibratoType.Wide:
                    phaseLength = this._settings.player.vibrato.noteWideLength;
                    bendAmplitude = this._settings.player.vibrato.noteWideAmplitude;
                    break;
                default:
                    return;
            }
            const track = note.beat.voice.bar.staff.track;
            this.generateVibratorWithParams(track, noteStart, noteDuration.noteOnly, phaseLength, bendAmplitude, channel);
        }
        generateVibratorWithParams(track, noteStart, noteDuration, phaseLength, bendAmplitude, channel) {
            const resolution = 16;
            const phaseHalf = (phaseLength / 2) | 0;
            // 1st Phase stays at bend 0,
            // then we have a sine wave with the given amplitude and phase length
            noteStart += phaseLength;
            const noteEnd = noteStart + noteDuration;
            while (noteStart < noteEnd) {
                let phase = 0;
                const phaseDuration = noteStart + phaseLength < noteEnd ? phaseLength : noteEnd - noteStart;
                while (phase < phaseDuration) {
                    let bend = bendAmplitude * Math.sin((phase * Math.PI) / phaseHalf);
                    this._handler.addBend(track.index, (noteStart + phase) | 0, channel, MidiFileGenerator.DefaultBend + bend);
                    phase += resolution;
                }
                noteStart += phaseLength;
            }
        }
        generateBend(note, noteStart, noteDuration, channel) {
            let bendPoints = note.bendPoints;
            let track = note.beat.voice.bar.staff.track;
            // if bend is extended on next tied note, we directly bend to the final bend value
            let finalBendValue = null;
            // Bends are spread across all tied notes unless they have a bend on their own.
            let duration;
            if (note.isTieOrigin && this._settings.notation.extendBendArrowsOnTiedNotes) {
                let endNote = note;
                while (endNote.isTieOrigin && !endNote.tieDestination.hasBend) {
                    endNote = endNote.tieDestination;
                }
                duration =
                    endNote.beat.absolutePlaybackStart -
                        note.beat.absolutePlaybackStart +
                        this.getNoteDuration(endNote, endNote.beat.playbackDuration).noteOnly;
            }
            else if (note.isTieOrigin && note.beat.graceType !== GraceType.None) {
                switch (note.tieDestination.bendType) {
                    case BendType.Bend:
                    case BendType.BendRelease:
                    case BendType.PrebendBend:
                        finalBendValue = note.tieDestination.bendPoints[1].value;
                        break;
                    case BendType.Prebend:
                    case BendType.PrebendRelease:
                        finalBendValue = note.tieDestination.bendPoints[0].value;
                        break;
                }
                duration = Math.max(noteDuration.noteOnly, MidiUtils.millisToTicks(this._settings.player.songBookBendDuration, this._currentTempo));
            }
            else {
                duration = noteDuration.noteOnly;
            }
            // ensure prebends are slightly before the actual note.
            if (bendPoints[0].value > 0 && !note.isContinuedBend) {
                noteStart--;
            }
            const bendDuration = Math.min(duration, MidiUtils.millisToTicks(this._settings.player.songBookBendDuration, this._currentTempo));
            let playedBendPoints = [];
            switch (note.bendType) {
                case BendType.Custom:
                    playedBendPoints = bendPoints;
                    break;
                case BendType.Bend:
                case BendType.Release:
                    switch (note.bendStyle) {
                        case BendStyle.Default:
                            playedBendPoints = bendPoints;
                            break;
                        case BendStyle.Gradual:
                            playedBendPoints.push(new BendPoint(0, note.bendPoints[0].value));
                            if (!finalBendValue || finalBendValue < note.bendPoints[1].value) {
                                finalBendValue = note.bendPoints[1].value;
                            }
                            playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, finalBendValue));
                            break;
                        case BendStyle.Fast:
                            if (!finalBendValue || finalBendValue < note.bendPoints[1].value) {
                                finalBendValue = note.bendPoints[1].value;
                            }
                            if (note.beat.graceType === GraceType.BendGrace) {
                                this.generateSongBookWhammyOrBend(noteStart, channel, duration, track, true, [note.bendPoints[0].value, finalBendValue], bendDuration);
                            }
                            else {
                                this.generateSongBookWhammyOrBend(noteStart, channel, duration, track, false, [note.bendPoints[0].value, finalBendValue], bendDuration);
                            }
                            return;
                    }
                    break;
                case BendType.BendRelease:
                    switch (note.bendStyle) {
                        case BendStyle.Default:
                            playedBendPoints = bendPoints;
                            break;
                        case BendStyle.Gradual:
                            playedBendPoints.push(new BendPoint(0, note.bendPoints[0].value));
                            playedBendPoints.push(new BendPoint((BendPoint.MaxPosition / 2) | 0, note.bendPoints[1].value));
                            playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, note.bendPoints[2].value));
                            break;
                        case BendStyle.Fast:
                            this.generateSongBookWhammyOrBend(noteStart, channel, duration, track, false, [
                                note.bendPoints[0].value,
                                note.bendPoints[1].value,
                                note.bendPoints[2].value
                            ], bendDuration);
                            return;
                    }
                    break;
                case BendType.Hold:
                    playedBendPoints = bendPoints;
                    break;
                case BendType.Prebend:
                    playedBendPoints = bendPoints;
                    break;
                case BendType.PrebendBend:
                    switch (note.bendStyle) {
                        case BendStyle.Default:
                            playedBendPoints = bendPoints;
                            break;
                        case BendStyle.Gradual:
                            playedBendPoints.push(new BendPoint(0, note.bendPoints[0].value));
                            playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, note.bendPoints[1].value));
                            break;
                        case BendStyle.Fast:
                            const preBendValue = MidiFileGenerator.DefaultBend +
                                note.bendPoints[0].value * MidiFileGenerator.DefaultBendSemitone;
                            this._handler.addBend(track.index, noteStart, channel, preBendValue | 0);
                            if (!finalBendValue || finalBendValue < note.bendPoints[1].value) {
                                finalBendValue = note.bendPoints[1].value;
                            }
                            this.generateSongBookWhammyOrBend(noteStart, channel, duration, track, false, [note.bendPoints[0].value, finalBendValue], bendDuration);
                            return;
                    }
                    break;
                case BendType.PrebendRelease:
                    switch (note.bendStyle) {
                        case BendStyle.Default:
                            playedBendPoints = bendPoints;
                            break;
                        case BendStyle.Gradual:
                            playedBendPoints.push(new BendPoint(0, note.bendPoints[0].value));
                            playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, note.bendPoints[1].value));
                            break;
                        case BendStyle.Fast:
                            const preBendValue = MidiFileGenerator.DefaultBend +
                                note.bendPoints[0].value * MidiFileGenerator.DefaultBendSemitone;
                            this._handler.addBend(track.index, noteStart, channel, preBendValue | 0);
                            this.generateSongBookWhammyOrBend(noteStart, channel, duration, track, false, [note.bendPoints[0].value, note.bendPoints[1].value], bendDuration);
                            return;
                    }
                    break;
            }
            this.generateWhammyOrBend(noteStart, channel, duration, playedBendPoints, track);
        }
        generateSongBookWhammyOrBend(noteStart, channel, duration, track, bendAtBeginning, bendValues, bendDuration) {
            const startTick = bendAtBeginning ? noteStart : noteStart + duration - bendDuration;
            const ticksBetweenPoints = bendDuration / (bendValues.length - 1);
            for (let i = 0; i < bendValues.length - 1; i++) {
                const currentBendValue = MidiFileGenerator.DefaultBend + bendValues[i] * MidiFileGenerator.DefaultBendSemitone;
                const nextBendValue = MidiFileGenerator.DefaultBend + bendValues[i + 1] * MidiFileGenerator.DefaultBendSemitone;
                const tick = startTick + ticksBetweenPoints * i;
                this.generateBendValues(tick, channel, track, ticksBetweenPoints, currentBendValue, nextBendValue);
            }
        }
        generateWhammy(beat, noteStart, noteDuration, channel) {
            const bendPoints = beat.whammyBarPoints;
            const track = beat.voice.bar.staff.track;
            const duration = noteDuration.noteOnly;
            // ensure prebends are slightly before the actual note.
            if (bendPoints[0].value > 0 && !beat.isContinuedWhammy) {
                noteStart--;
            }
            let playedBendPoints = [];
            switch (beat.whammyBarType) {
                case WhammyType.Custom:
                    playedBendPoints = bendPoints;
                    break;
                case WhammyType.Dive:
                    switch (beat.whammyStyle) {
                        case BendStyle.Default:
                            playedBendPoints = bendPoints;
                            break;
                        case BendStyle.Gradual:
                            playedBendPoints.push(new BendPoint(0, bendPoints[0].value));
                            playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, bendPoints[1].value));
                            break;
                        case BendStyle.Fast:
                            const whammyDuration = Math.min(duration, MidiUtils.millisToTicks(this._settings.player.songBookBendDuration, this._currentTempo));
                            this.generateSongBookWhammyOrBend(noteStart, channel, duration, track, false, [bendPoints[0].value, bendPoints[1].value], whammyDuration);
                            return;
                    }
                    break;
                case WhammyType.Dip:
                    switch (beat.whammyStyle) {
                        case BendStyle.Default:
                            playedBendPoints = bendPoints;
                            break;
                        case BendStyle.Gradual:
                            playedBendPoints.push(new BendPoint(0, bendPoints[0].value));
                            playedBendPoints.push(new BendPoint((BendPoint.MaxPosition / 2) | 0, bendPoints[1].value));
                            playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, bendPoints[2].value));
                            break;
                        case BendStyle.Fast:
                            const whammyDuration = Math.min(duration, MidiUtils.millisToTicks(this._settings.player.songBookDipDuration, this._currentTempo));
                            this.generateSongBookWhammyOrBend(noteStart, channel, duration, track, true, [bendPoints[0].value, bendPoints[1].value, bendPoints[2].value], whammyDuration);
                            return;
                    }
                    break;
                case WhammyType.Hold:
                    playedBendPoints = bendPoints;
                    break;
                case WhammyType.Predive:
                    playedBendPoints = bendPoints;
                    break;
                case WhammyType.PrediveDive:
                    switch (beat.whammyStyle) {
                        case BendStyle.Default:
                            playedBendPoints = bendPoints;
                            break;
                        case BendStyle.Gradual:
                            playedBendPoints.push(new BendPoint(0, bendPoints[0].value));
                            playedBendPoints.push(new BendPoint((BendPoint.MaxPosition / 2) | 0, bendPoints[0].value));
                            playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, bendPoints[1].value));
                            break;
                        case BendStyle.Fast:
                            const preDiveValue = MidiFileGenerator.DefaultBend + bendPoints[0].value * MidiFileGenerator.DefaultBendSemitone;
                            this._handler.addBend(track.index, noteStart, channel, preDiveValue | 0);
                            const whammyDuration = Math.min(duration, MidiUtils.millisToTicks(this._settings.player.songBookBendDuration, this._currentTempo));
                            this.generateSongBookWhammyOrBend(noteStart, channel, duration, track, false, [bendPoints[0].value, bendPoints[1].value], whammyDuration);
                            return;
                    }
                    break;
            }
            this.generateWhammyOrBend(noteStart, channel, duration, playedBendPoints, track);
        }
        generateWhammyOrBend(noteStart, channel, duration, playedBendPoints, track) {
            const ticksPerPosition = duration / BendPoint.MaxPosition;
            for (let i = 0; i < playedBendPoints.length - 1; i++) {
                const currentPoint = playedBendPoints[i];
                const nextPoint = playedBendPoints[i + 1];
                // calculate the midi pitchbend values start and end values
                const currentBendValue = MidiFileGenerator.DefaultBend + currentPoint.value * MidiFileGenerator.DefaultBendSemitone;
                const nextBendValue = MidiFileGenerator.DefaultBend + nextPoint.value * MidiFileGenerator.DefaultBendSemitone;
                // how many midi ticks do we have to spend between this point and the next one?
                const ticksBetweenPoints = ticksPerPosition * (nextPoint.offset - currentPoint.offset);
                // we will generate one pitchbend message for each value
                // for this we need to calculate how many ticks to offset per value
                const tick = noteStart + ticksPerPosition * currentPoint.offset;
                this.generateBendValues(tick, channel, track, ticksBetweenPoints, currentBendValue, nextBendValue);
            }
        }
        generateBendValues(currentTick, channel, track, ticksBetweenPoints, currentBendValue, nextBendValue) {
            const ticksPerValue = ticksBetweenPoints / Math.abs(nextBendValue - currentBendValue);
            // bend up
            if (currentBendValue < nextBendValue) {
                while (currentBendValue <= nextBendValue) {
                    this._handler.addBend(track.index, currentTick | 0, channel, Math.round(currentBendValue));
                    currentBendValue++;
                    currentTick += ticksPerValue;
                }
            }
            else if (currentBendValue > nextBendValue) {
                while (currentBendValue >= nextBendValue) {
                    this._handler.addBend(track.index, currentTick | 0, channel, Math.round(currentBendValue));
                    currentBendValue--;
                    currentTick += ticksPerValue;
                }
            }
            else {
                this._handler.addBend(track.index, currentTick | 0, channel, Math.round(currentBendValue));
            }
        }
        generateTrill(note, noteStart, noteDuration, noteKey, dynamicValue, channel) {
            const track = note.beat.voice.bar.staff.track;
            const trillKey = note.stringTuning + note.trillFret;
            let trillLength = MidiUtils.toTicks(note.trillSpeed);
            let realKey = true;
            let tick = noteStart;
            let end = noteStart + noteDuration.untilTieEnd;
            while (tick + 10 < end) {
                // only the rest on last trill play
                if (tick + trillLength >= end) {
                    trillLength = end - tick;
                }
                this._handler.addNote(track.index, tick, trillLength, realKey ? trillKey : noteKey, dynamicValue, channel);
                realKey = !realKey;
                tick += trillLength;
            }
        }
        generateTremoloPicking(note, noteStart, noteDuration, noteKey, dynamicValue, channel) {
            const track = note.beat.voice.bar.staff.track;
            let tpLength = MidiUtils.toTicks(note.beat.tremoloSpeed);
            let tick = noteStart;
            const end = noteStart + noteDuration.untilTieEnd;
            while (tick + 10 < end) {
                // only the rest on last trill play
                if (tick + tpLength >= end) {
                    tpLength = end - tick;
                }
                this._handler.addNote(track.index, tick, tpLength, noteKey, dynamicValue, channel);
                tick += tpLength;
            }
        }
        getBrushInfo(beat) {
            const brushInfo = new Int32Array(beat.voice.bar.staff.tuning.length);
            if (beat.brushType !== BrushType.None) {
                //
                // calculate the number of
                // a mask where the single bits indicate the strings used
                let stringUsed = 0;
                let stringCount = 0;
                for (const n of beat.notes) {
                    if (n.isTieDestination) {
                        continue;
                    }
                    stringUsed |= 0x01 << (n.string - 1);
                    stringCount++;
                }
                //
                // calculate time offset for all strings
                if (beat.notes.length > 0) {
                    let brushMove = 0;
                    const brushIncrement = (beat.brushDuration / (stringCount - 1)) | 0;
                    for (let i = 0; i < beat.voice.bar.staff.tuning.length; i++) {
                        let index = beat.brushType === BrushType.ArpeggioDown || beat.brushType === BrushType.BrushDown
                            ? i
                            : brushInfo.length - 1 - i;
                        if ((stringUsed & (0x01 << index)) !== 0) {
                            brushInfo[index] = brushMove;
                            brushMove += brushIncrement;
                        }
                    }
                }
            }
            return brushInfo;
        }
        generateAutomation(beat, automation, startMove) {
            switch (automation.type) {
                case AutomationType.Instrument:
                    this._handler.addProgramChange(beat.voice.bar.staff.track.index, beat.playbackStart + startMove, beat.voice.bar.staff.track.playbackInfo.primaryChannel, (automation.value | 0) & 0xff);
                    this._handler.addProgramChange(beat.voice.bar.staff.track.index, beat.playbackStart + startMove, beat.voice.bar.staff.track.playbackInfo.secondaryChannel, (automation.value | 0) & 0xff);
                    break;
                case AutomationType.Balance:
                    let balance = MidiFileGenerator.toChannelShort(automation.value);
                    this._handler.addControlChange(beat.voice.bar.staff.track.index, beat.playbackStart + startMove, beat.voice.bar.staff.track.playbackInfo.primaryChannel, ControllerType.PanCoarse, balance);
                    this._handler.addControlChange(beat.voice.bar.staff.track.index, beat.playbackStart + startMove, beat.voice.bar.staff.track.playbackInfo.secondaryChannel, ControllerType.PanCoarse, balance);
                    break;
                case AutomationType.Volume:
                    let volume = MidiFileGenerator.toChannelShort(automation.value);
                    this._handler.addControlChange(beat.voice.bar.staff.track.index, beat.playbackStart + startMove, beat.voice.bar.staff.track.playbackInfo.primaryChannel, ControllerType.VolumeCoarse, volume);
                    this._handler.addControlChange(beat.voice.bar.staff.track.index, beat.playbackStart + startMove, beat.voice.bar.staff.track.playbackInfo.secondaryChannel, ControllerType.VolumeCoarse, volume);
                    break;
            }
        }
    }
    MidiFileGenerator.DefaultDurationDead = 30;
    MidiFileGenerator.DefaultDurationPalmMute = 80;
    MidiFileGenerator.DefaultBend = 0x20;
    MidiFileGenerator.DefaultBendSemitone = 2.75;

    /**
     * Represents a range of the song that should be played.
     */
    class PlaybackRange {
        constructor() {
            /**
             * The position in midi ticks from where the song should start.
             */
            this.startTick = 0;
            /**
             * The position in midi ticks to where the song should be played.
             */
            this.endTick = 0;
        }
    }

    /**
     * A glyph is a single symbol which can be added to a GlyphBarRenderer for automated
     * layouting and drawing of stacked symbols.
     */
    class Glyph {
        constructor(x = 0, y = 0) {
            this.x = 0;
            this.y = 0;
            this.width = 0;
            this.x = x;
            this.y = y;
        }
        get scale() {
            return this.renderer.scale;
        }
        doLayout() {
            // to be implemented in subclass
        }
        paint(cx, cy, canvas) {
            // to be implemented in subclass
        }
    }

    class BeatContainerGlyph extends Glyph {
        constructor(beat, voiceContainer) {
            super(0, 0);
            this.ties = [];
            this.minWidth = 0;
            this.beat = beat;
            this.ties = [];
            this.voiceContainer = voiceContainer;
        }
        get onTimeX() {
            return this.onNotes.x + this.onNotes.centerX;
        }
        registerLayoutingInfo(layoutings) {
            let preBeatStretch = this.onTimeX;
            let postBeatStretch = 0;
            for (let tie of this.ties) {
                if (tie.width > postBeatStretch) {
                    postBeatStretch = tie.width;
                }
            }
            postBeatStretch += this.onNotes.x + (this.onNotes.width - this.onNotes.centerX);
            layoutings.addBeatSpring(this.beat, preBeatStretch, postBeatStretch);
            // store sizes for special renderers like the EffectBarRenderer
            layoutings.setPreBeatSize(this.beat, this.preNotes.width);
            layoutings.setOnBeatSize(this.beat, this.onNotes.width);
            layoutings.setBeatCenterX(this.beat, this.onNotes.centerX);
        }
        applyLayoutingInfo(info) {
            let offset = info.getBeatCenterX(this.beat) - this.onNotes.centerX;
            this.preNotes.x = offset;
            this.preNotes.width = info.getPreBeatSize(this.beat);
            this.onNotes.width = info.getOnBeatSize(this.beat);
            this.onNotes.x = this.preNotes.x + this.preNotes.width;
            this.onNotes.updateBeamingHelper();
        }
        doLayout() {
            this.preNotes.x = 0;
            this.preNotes.renderer = this.renderer;
            this.preNotes.container = this;
            this.preNotes.doLayout();
            this.onNotes.x = this.preNotes.x + this.preNotes.width;
            this.onNotes.renderer = this.renderer;
            this.onNotes.container = this;
            this.onNotes.doLayout();
            let i = this.beat.notes.length - 1;
            while (i >= 0) {
                this.createTies(this.beat.notes[i--]);
            }
            this.updateWidth();
        }
        updateWidth() {
            this.minWidth = this.preNotes.width + this.onNotes.width;
            if (!this.beat.isRest) {
                if (this.onNotes.beamingHelper.beats.length === 1) {
                    // make space for footer
                    if (this.beat.duration >= Duration.Eighth) {
                        this.minWidth += 20 * this.scale;
                    }
                }
                else {
                    // ensure some space for small notes
                    switch (this.beat.duration) {
                        case Duration.OneHundredTwentyEighth:
                        case Duration.TwoHundredFiftySixth:
                            this.minWidth += 10 * this.scale;
                            break;
                    }
                }
            }
            let tieWidth = 0;
            for (let tie of this.ties) {
                if (tie.width > tieWidth) {
                    tieWidth = tie.width;
                }
            }
            this.minWidth += tieWidth;
            this.width = this.minWidth;
        }
        scaleToWidth(beatWidth) {
            for (let tie of this.ties) {
                tie.doLayout();
            }
            this.onNotes.updateBeamingHelper();
            this.width = beatWidth;
        }
        createTies(n) {
            // no default ties
        }
        static getGroupId(beat) {
            return 'b' + beat.id;
        }
        paint(cx, cy, canvas) {
            if (this.beat.voice.isEmpty) {
                return;
            }
            let isEmptyGlyph = this.preNotes.isEmpty && this.onNotes.isEmpty && this.ties.length === 0;
            if (isEmptyGlyph) {
                return;
            }
            canvas.beginGroup(BeatContainerGlyph.getGroupId(this.beat));
            // var c = canvas.Color;
            // var ta = canvas.TextAlign;
            // canvas.Color = new Color(255, 0, 0);
            // canvas.TextAlign = TextAlign.Left;
            // canvas.FillText(Beat.DisplayStart.ToString(), cx + X, cy + Y - 10);
            // canvas.Color = c;
            // canvas.TextAlign = ta;
            // canvas.Color = Color.Random();
            // canvas.FillRect(cx + X, cy + Y, Width, Renderer.Height);
            // var oldColor = canvas.Color;
            // canvas.Color = new Color((byte)Platform.Platform.Random(255), (byte)Platform.Platform.Random(255), (byte)Platform.Platform.Random(255), 100);
            // canvas.FillRect(cx + X, cy + Y, Width, Renderer.Height);
            // canvas.Color = oldColor;
            // canvas.Color = new Color(200, 0, 0, 100);
            // canvas.StrokeRect(cx + X, cy + Y + 15 * Beat.Voice.Index, Width, 10);
            // canvas.Font = new Font("Arial", 10);
            // canvas.Color = new Color(0, 0, 0);
            // canvas.FillText(Beat.Voice.Index + ":" + Beat.Index, cx + X, cy + Y + 15 * Beat.Voice.Index);
            // if (Beat.Voice.Index===0)
            // {
            //    canvas.Color = new Color(200, 0, 0, 100);
            //    canvas.StrokeRect(cx + X, cy + Y + PreNotes.Y + 30, Width, 10);
            // }
            this.preNotes.paint(cx + this.x, cy + this.y, canvas);
            // if (Beat.Voice.Index===0)
            // {
            //    canvas.Color = new Color(200, 0, 0, 100);
            //    canvas.StrokeRect(cx + X + PreNotes.X, cy + Y + PreNotes.Y, PreNotes.Width, 10);
            // }
            this.onNotes.paint(cx + this.x, cy + this.y, canvas);
            // if (Beat.Voice.Index===0)
            // {
            //    canvas.Color = new Color(0, 200, 0, 100);
            //    canvas.StrokeRect(cx + X + OnNotes.X, cy + Y + OnNotes.Y + 10, OnNotes.Width, 10);
            // }
            // paint the ties relative to the whole staff,
            // reason: we have possibly multiple staves involved and need to calculate the correct positions.
            let staffX = cx - this.voiceContainer.x - this.renderer.x;
            let staffY = cy - this.voiceContainer.y - this.renderer.y;
            for (let i = 0, j = this.ties.length; i < j; i++) {
                let t = this.ties[i];
                t.renderer = this.renderer;
                t.paint(staffX, staffY, canvas);
            }
            canvas.endGroup();
        }
    }

    /**
     * Represents the information related to a resize event.
     */
    class ResizeEventArgs {
        constructor() {
            /**
             * Gets the size before the resizing happened.
             */
            this.oldWidth = 0;
            /**
             * Gets the size after the resize was complete.
             */
            this.newWidth = 0;
            /**
             * Gets the settings currently used for rendering.
             */
            this.settings = null;
        }
        core() {
            if (this.settings && this.causeIssue()) {
                return this.settings.core;
            }
            return new CoreSettings();
        }
        causeIssue() {
            this.settings = null;
            return true;
        }
    }

    class SelectionInfo {
        constructor(beat) {
            this.bounds = null;
            this.beat = beat;
        }
    }

    /**
     * This class represents the public API of alphaTab and provides all logic to display
     * a music sheet in any UI using the given {@link IUiFacade}
     * @param <TSettings> The UI object holding the settings.
     */
    class AlphaTabApiBase {
        /**
         * Initializes a new instance of the {@link AlphaTabApiBase} class.
         * @param uiFacade The UI facade to use for interacting with the user interface.
         * @param settings The UI settings object to use for loading the settings.
         */
        constructor(uiFacade, settings) {
            this._startTime = 0;
            this._trackIndexes = null;
            /**
             * Gets the score holding all information about the song being rendered.
             */
            this.score = null;
            /**
             * Gets a list of the tracks that are currently rendered;
             */
            this.tracks = [];
            this._tickCache = null;
            /**
             * Gets the alphaSynth player used for playback. This is the low-level API to the Midi synthesizer used for playback.
             */
            this.player = null;
            this._cursorWrapper = null;
            this._barCursor = null;
            this._beatCursor = null;
            this._selectionWrapper = null;
            this._previousTick = 0;
            this._playerState = PlayerState.Paused;
            this._currentBeat = null;
            this._previousStateForCursor = PlayerState.Paused;
            this._previousCursorCache = null;
            this._lastScroll = 0;
            this.playedBeatChanged = new EventEmitterOfT();
            this._beatMouseDown = false;
            this._selectionStart = null;
            this._selectionEnd = null;
            this.beatMouseDown = new EventEmitterOfT();
            this.beatMouseMove = new EventEmitterOfT();
            this.beatMouseUp = new EventEmitterOfT();
            this.loaded = new EventEmitterOfT();
            this.resize = new EventEmitterOfT();
            this.renderStarted = new EventEmitterOfT();
            this.renderFinished = new EventEmitter();
            this.postRenderFinished = new EventEmitter();
            this.error = new EventEmitterOfT();
            this.readyForPlayback = new EventEmitter();
            this.playerFinished = new EventEmitter();
            this.soundFontLoaded = new EventEmitter();
            this.midiLoaded = new EventEmitter();
            this.playerStateChanged = new EventEmitterOfT();
            this.playerPositionChanged = new EventEmitterOfT();
            this.uiFacade = uiFacade;
            this.container = uiFacade.rootContainer;
            uiFacade.initialize(this, settings);
            Logger.logLevel = this.settings.core.logLevel;
            this.canvasElement = uiFacade.createCanvasElement();
            this.container.appendChild(this.canvasElement);
            this.container.resize.on(Platform.throttle(() => {
                if (this.container.width !== this.renderer.width) {
                    this.triggerResize();
                }
            }, uiFacade.resizeThrottle));
            if (this.settings.core.useWorkers &&
                this.uiFacade.areWorkersSupported &&
                Environment.getRenderEngineFactory(this.settings).supportsWorkers) {
                this.renderer = this.uiFacade.createWorkerRenderer();
            }
            else {
                this.renderer = new ScoreRenderer(this.settings);
            }
            let initialResizeEventInfo = new ResizeEventArgs();
            initialResizeEventInfo.oldWidth = this.renderer.width;
            initialResizeEventInfo.newWidth = this.container.width | 0;
            initialResizeEventInfo.settings = this.settings;
            this.onResize(initialResizeEventInfo);
            this.renderer.preRender.on(this.onRenderStarted.bind(this));
            this.renderer.renderFinished.on(_ => {
                this.onRenderFinished();
            });
            this.renderer.postRenderFinished.on(() => {
                let duration = Date.now() - this._startTime;
                Logger.info('rendering', 'Rendering completed in ' + duration + 'ms');
                this.onPostRenderFinished();
            });
            this.renderer.preRender.on(_ => {
                this._startTime = Date.now();
            });
            this.renderer.partialRenderFinished.on(this.appendRenderResult.bind(this));
            this.renderer.renderFinished.on(r => {
                this.appendRenderResult(r);
                this.appendRenderResult(null); // marks last element
            });
            this.renderer.error.on(this.onError.bind(this));
            if (this.settings.player.enablePlayer) {
                this.setupPlayer();
            }
            this.setupClickHandling();
            this.uiFacade.initialRender();
        }
        /**
         * Destroys the alphaTab control and restores the initial state of the UI.
         */
        destroy() {
            if (this.player) {
                this.player.destroy();
            }
            this.uiFacade.destroy();
            this.renderer.destroy();
        }
        /**
         * Applies any changes that were done to the settings object and informs the {@link renderer} about any new values to consider.
         */
        updateSettings() {
            this.renderer.updateSettings(this.settings);
            // enable/disable player if needed
            if (this.settings.player.enablePlayer) {
                this.setupPlayer();
            }
            else {
                this.destroyPlayer();
            }
        }
        /**
         * Attempts a load of the score represented by the given data object.
         * @param scoreData The data container supported by {@link IUiFacade}
         * @param trackIndexes The indexes of the tracks from the song that should be rendered. If not provided, the first track of the
         * song will be shown.
         * @returns true if the data object is supported and a load was initiated, otherwise false
         */
        load(scoreData, trackIndexes) {
            try {
                return this.uiFacade.load(scoreData, score => {
                    this.renderScore(score, trackIndexes);
                }, error => {
                    this.onError(error);
                });
            }
            catch (e) {
                this.onError(e);
                return false;
            }
        }
        /**
         * Initiates a rendering of the given score.
         * @param score The score containing the tracks to be rendered.
         * @param trackIndexes The indexes of the tracks from the song that should be rendered. If not provided, the first track of the
         * song will be shown.
         */
        renderScore(score, trackIndexes) {
            let tracks = [];
            if (!trackIndexes) {
                if (score.tracks.length > 0) {
                    tracks.push(score.tracks[0]);
                }
            }
            else {
                if (trackIndexes.length === 0) {
                    if (score.tracks.length > 0) {
                        tracks.push(score.tracks[0]);
                    }
                }
                else if (trackIndexes.length === 1 && trackIndexes[0] === -1) {
                    for (let track of score.tracks) {
                        tracks.push(track);
                    }
                }
                else {
                    for (let index of trackIndexes) {
                        if (index >= 0 && index <= score.tracks.length) {
                            tracks.push(score.tracks[index]);
                        }
                    }
                }
            }
            this.internalRenderTracks(score, tracks);
        }
        /**
         * Renders the given list of tracks.
         * @param tracks The tracks to render. They must all belong to the same score.
         */
        renderTracks(tracks) {
            if (tracks.length > 0) {
                let score = tracks[0].score;
                for (let track of tracks) {
                    if (track.score !== score) {
                        this.onError(new ArgumentError('All rendered tracks must belong to the same score.', 'tracks'));
                        return;
                    }
                }
                this.internalRenderTracks(score, tracks);
            }
        }
        internalRenderTracks(score, tracks) {
            if (score !== this.score) {
                ModelUtils.applyPitchOffsets(this.settings, score);
                this.score = score;
                this.tracks = tracks;
                this._trackIndexes = [];
                for (let track of tracks) {
                    this._trackIndexes.push(track.index);
                }
                this.onLoaded(score);
                this.loadMidiForScore();
                this.render();
            }
            else {
                this.tracks = tracks;
                this._trackIndexes = [];
                for (let track of tracks) {
                    this._trackIndexes.push(track.index);
                }
                this.render();
            }
        }
        triggerResize() {
            if (!this.container.isVisible) {
                Logger.warning('Rendering', 'AlphaTab container was invisible while autosizing, waiting for element to become visible', null);
                this.uiFacade.rootContainerBecameVisible.on(() => {
                    Logger.info('Rendering', 'AlphaTab container became visible, doing autosizing', null);
                    this.triggerResize();
                });
            }
            else {
                let resizeEventInfo = new ResizeEventArgs();
                resizeEventInfo.oldWidth = this.renderer.width;
                resizeEventInfo.newWidth = this.container.width;
                resizeEventInfo.settings = this.settings;
                this.onResize(resizeEventInfo);
                this.renderer.updateSettings(this.settings);
                this.renderer.width = this.container.width;
                this.renderer.resizeRender();
            }
        }
        appendRenderResult(result) {
            if (result) {
                this.canvasElement.width = result.totalWidth;
                this.canvasElement.height = result.totalHeight;
                if (this._cursorWrapper) {
                    this._cursorWrapper.width = result.totalWidth;
                    this._cursorWrapper.height = result.totalHeight;
                }
            }
            if (!result || result.renderResult) {
                this.uiFacade.beginAppendRenderResults(result);
            }
        }
        /**
         * Tells alphaTab to render the given alphaTex.
         * @param tex The alphaTex code to render.
         * @param tracks If set, the given tracks will be rendered, otherwise the first track only will be rendered.
         */
        tex(tex, tracks) {
            try {
                let parser = new AlphaTexImporter();
                let data = ByteBuffer.fromBuffer(Platform.stringToByteArray(tex));
                parser.init(data, this.settings);
                let score = parser.readScore();
                this.renderScore(score, tracks);
            }
            catch (e) {
                this.onError(e);
            }
        }
        /**
         * Attempts a load of the score represented by the given data object.
         * @param data The data object to decode
         * @returns true if the data object is supported and a load was initiated, otherwise false
         */
        loadSoundFont(data) {
            if (!this.player) {
                return false;
            }
            return this.uiFacade.loadSoundFont(data);
        }
        /**
         * Initiates a re-rendering of the current setup. If rendering is not yet possible, it will be deferred until the UI changes to be ready for rendering.
         */
        render() {
            if (!this.renderer) {
                return;
            }
            if (this.uiFacade.canRender) {
                // when font is finally loaded, start rendering
                this.renderer.width = this.container.width;
                this.renderer.renderScore(this.score, this._trackIndexes);
            }
            else {
                this.uiFacade.canRenderChanged.on(() => this.render());
            }
        }
        get isReadyForPlayback() {
            if (!this.player) {
                return false;
            }
            return this.player.isReadyForPlayback;
        }
        get playerState() {
            if (!this.player) {
                return PlayerState.Paused;
            }
            return this.player.state;
        }
        get masterVolume() {
            if (!this.player) {
                return 0;
            }
            return this.player.masterVolume;
        }
        set masterVolume(value) {
            if (this.player) {
                this.player.masterVolume = value;
            }
        }
        get metronomeVolume() {
            if (!this.player) {
                return 0;
            }
            return this.player.metronomeVolume;
        }
        set metronomeVolume(value) {
            if (this.player) {
                this.player.metronomeVolume = value;
            }
        }
        get tickPosition() {
            if (!this.player) {
                return 0;
            }
            return this.player.tickPosition;
        }
        set tickPosition(value) {
            if (this.player) {
                this.player.tickPosition = value;
            }
        }
        get timePosition() {
            if (!this.player) {
                return 0;
            }
            return this.player.timePosition;
        }
        set timePosition(value) {
            if (this.player) {
                this.player.timePosition = value;
            }
        }
        get playbackRange() {
            if (!this.player) {
                return null;
            }
            return this.player.playbackRange;
        }
        set playbackRange(value) {
            if (this.player) {
                this.player.playbackRange = value;
            }
        }
        get playbackSpeed() {
            if (!this.player) {
                return 0;
            }
            return this.player.playbackSpeed;
        }
        set playbackSpeed(value) {
            if (this.player) {
                this.player.playbackSpeed = value;
            }
        }
        get isLooping() {
            if (!this.player) {
                return false;
            }
            return this.player.isLooping;
        }
        set isLooping(value) {
            if (this.player) {
                this.player.isLooping = value;
            }
        }
        destroyPlayer() {
            if (!this.player) {
                return;
            }
            this.player.destroy();
            this.player = null;
            this.destroyCursors();
        }
        setupPlayer() {
            if (this.player) {
                return;
            }
            this.player = this.uiFacade.createWorkerPlayer();
            if (!this.player) {
                return;
            }
            this.player.ready.on(() => {
                this.loadMidiForScore();
            });
            this.player.readyForPlayback.on(() => {
                this.onReadyForPlayback();
                if (this.tracks) {
                    for (let track of this.tracks) {
                        let volume = track.playbackInfo.volume / 16;
                        this.player.setChannelVolume(track.playbackInfo.primaryChannel, volume);
                        this.player.setChannelVolume(track.playbackInfo.secondaryChannel, volume);
                    }
                }
            });
            this.player.soundFontLoaded.on(this.onSoundFontLoaded.bind(this));
            this.player.soundFontLoadFailed.on(e => {
                this.onError(e);
            });
            this.player.midiLoaded.on(this.onMidiLoaded.bind(this));
            this.player.midiLoadFailed.on(e => {
                this.onError(e);
            });
            this.player.stateChanged.on(this.onPlayerStateChanged.bind(this));
            this.player.positionChanged.on(this.onPlayerPositionChanged.bind(this));
            this.player.finished.on(this.onPlayerFinished.bind(this));
            if (this.settings.player.enableCursor) {
                this.setupCursors();
            }
            else {
                this.destroyCursors();
            }
        }
        loadMidiForScore() {
            if (!this.player || !this.score || !this.player.isReady) {
                return;
            }
            Logger.info('AlphaTab', 'Generating Midi');
            let midiFile = new MidiFile();
            let handler = new AlphaSynthMidiFileHandler(midiFile);
            let generator = new MidiFileGenerator(this.score, this.settings, handler);
            generator.generate();
            this._tickCache = generator.tickLookup;
            this.player.loadMidiFile(midiFile);
        }
        /**
         * Changes the volume of the given tracks.
         * @param tracks The tracks for which the volume should be changed.
         * @param volume The volume to set for all tracks in percent (0-1)
         */
        changeTrackVolume(tracks, volume) {
            if (!this.player) {
                return;
            }
            for (let track of tracks) {
                this.player.setChannelVolume(track.playbackInfo.primaryChannel, volume);
                this.player.setChannelVolume(track.playbackInfo.secondaryChannel, volume);
            }
        }
        /**
         * Changes the given tracks to be played solo or not.
         * If one or more tracks are set to solo, only those tracks are hearable.
         * @param tracks The list of tracks to play solo or not.
         * @param solo If set to true, the tracks will be added to the solo list. If false, they are removed.
         */
        changeTrackSolo(tracks, solo) {
            if (!this.player) {
                return;
            }
            for (let track of tracks) {
                this.player.setChannelSolo(track.playbackInfo.primaryChannel, solo);
                this.player.setChannelSolo(track.playbackInfo.secondaryChannel, solo);
            }
        }
        /**
         * Changes the given tracks to be muted or not.
         * @param tracks The list of track to mute or unmute.
         * @param mute If set to true, the tracks will be muted. If false they are unmuted.
         */
        changeTrackMute(tracks, mute) {
            if (!this.player) {
                return;
            }
            for (let track of tracks) {
                this.player.setChannelMute(track.playbackInfo.primaryChannel, mute);
                this.player.setChannelMute(track.playbackInfo.secondaryChannel, mute);
            }
        }
        /**
         * Starts the playback of the current song.
         * @returns true if the playback was started, otherwise false. Reasons for not starting can be that the player is not ready or already playing.
         */
        play() {
            if (!this.player) {
                return false;
            }
            return this.player.play();
        }
        /**
         * Pauses the playback of the current song.
         */
        pause() {
            if (!this.player) {
                return;
            }
            this.player.pause();
        }
        /**
         * Toggles between play/pause depending on the current player state.
         */
        playPause() {
            if (!this.player) {
                return;
            }
            this.player.playPause();
        }
        /**
         * Stops the playback of the current song, and moves the playback position back to the start.
         */
        stop() {
            if (!this.player) {
                return;
            }
            this.player.stop();
        }
        destroyCursors() {
            if (!this._cursorWrapper) {
                return;
            }
            this.uiFacade.destroyCursors();
            this._cursorWrapper = null;
            this._barCursor = null;
            this._beatCursor = null;
            this._selectionWrapper = null;
            this._previousTick = 0;
            this._playerState = PlayerState.Paused;
        }
        setupCursors() {
            //
            // Create cursors
            let cursors = this.uiFacade.createCursors();
            if (!cursors) {
                return;
            }
            // store options and created elements for fast access
            this._cursorWrapper = cursors.cursorWrapper;
            this._barCursor = cursors.barCursor;
            this._beatCursor = cursors.beatCursor;
            this._selectionWrapper = cursors.selectionWrapper;
            //
            // Hook into events
            this._previousTick = 0;
            this._playerState = PlayerState.Paused;
            // we need to update our position caches if we render a tablature
            this.renderer.postRenderFinished.on(() => {
                this.cursorUpdateTick(this._previousTick, false);
            });
            if (this.player) {
                this.player.positionChanged.on(e => {
                    this._previousTick = e.currentTick;
                    this.uiFacade.beginInvoke(() => {
                        this.cursorUpdateTick(e.currentTick, false);
                    });
                });
                this.player.stateChanged.on(e => {
                    this._playerState = e.state;
                    if (!e.stopped && e.state === PlayerState.Paused) {
                        let currentBeat = this._currentBeat;
                        let tickCache = this._tickCache;
                        if (currentBeat && tickCache) {
                            this.player.tickPosition =
                                tickCache.getMasterBarStart(currentBeat.voice.bar.masterBar) + currentBeat.playbackStart;
                        }
                    }
                });
            }
        }
        /**
         * updates the cursors to highlight the beat at the specified tick position
         * @param tick
         * @param stop
         */
        cursorUpdateTick(tick, stop = false) {
            this.uiFacade.beginInvoke(() => {
                let cache = this._tickCache;
                if (cache) {
                    let tracks = this.tracks;
                    if (tracks.length > 0) {
                        let beat = cache.findBeat(tracks, tick);
                        if (beat) {
                            this.cursorUpdateBeat(beat.currentBeat, beat.nextBeat, beat.duration, stop, beat.beatsToHighlight);
                        }
                    }
                }
            });
        }
        /**
         * updates the cursors to highlight the specified beat
         */
        cursorUpdateBeat(beat, nextBeat, duration, stop, beatsToHighlight = null) {
            if (!beat) {
                return;
            }
            let cache = this.renderer.boundsLookup;
            if (!cache) {
                return;
            }
            let previousBeat = this._currentBeat;
            let previousCache = this._previousCursorCache;
            let previousState = this._previousStateForCursor;
            this._currentBeat = beat;
            this._previousCursorCache = cache;
            this._previousStateForCursor = this._playerState;
            if (beat === previousBeat && cache === previousCache && previousState === this._playerState) {
                return;
            }
            let barCursor = this._barCursor;
            let beatCursor = this._beatCursor;
            let beatBoundings = cache.findBeat(beat);
            if (!beatBoundings) {
                return;
            }
            let barBoundings = beatBoundings.barBounds.masterBarBounds;
            let barBounds = barBoundings.visualBounds;
            if (barCursor) {
                barCursor.top = barBounds.y;
                barCursor.left = barBounds.x;
                barCursor.width = barBounds.w;
                barCursor.height = barBounds.h;
            }
            if (beatCursor) {
                // move beat to start position immediately
                beatCursor.stopAnimation();
                beatCursor.top = barBounds.y;
                beatCursor.left = beatBoundings.visualBounds.x;
                beatCursor.height = barBounds.h;
            }
            // if playing, animate the cursor to the next beat
            this.uiFacade.removeHighlights();
            if (this._playerState === PlayerState.Playing || stop) {
                duration /= this.playbackSpeed;
                if (!stop) {
                    if (beatsToHighlight) {
                        for (let highlight of beatsToHighlight) {
                            let className = BeatContainerGlyph.getGroupId(highlight);
                            this.uiFacade.highlightElements(className);
                        }
                    }
                    let nextBeatX = barBoundings.visualBounds.x + barBoundings.visualBounds.w;
                    // get position of next beat on same stavegroup
                    if (nextBeat) {
                        // if we are moving within the same bar or to the next bar
                        // transition to the next beat, otherwise transition to the end of the bar.
                        if (nextBeat.voice.bar.index === beat.voice.bar.index ||
                            nextBeat.voice.bar.index === beat.voice.bar.index + 1) {
                            let nextBeatBoundings = cache.findBeat(nextBeat);
                            if (nextBeatBoundings &&
                                nextBeatBoundings.barBounds.masterBarBounds.staveGroupBounds ===
                                    barBoundings.staveGroupBounds) {
                                nextBeatX = nextBeatBoundings.visualBounds.x;
                            }
                        }
                    }
                    if (beatCursor) {
                        this.uiFacade.beginInvoke(() => {
                            // Logger.Info("Player",
                            //    "Transition from " + beatBoundings.VisualBounds.X + " to " + nextBeatX + " in " + duration +
                            //    "(" + Player.PlaybackRange + ")");
                            beatCursor.transitionToX(duration, nextBeatX);
                        });
                    }
                }
                if (!this._beatMouseDown && this.settings.player.scrollMode !== exports.ScrollMode.Off) {
                    let scrollElement = this.uiFacade.getScrollContainer();
                    let isVertical = Environment.getLayoutEngineFactory(this.settings).vertical;
                    let mode = this.settings.player.scrollMode;
                    let elementOffset = this.uiFacade.getOffset(scrollElement, this.container);
                    if (isVertical) {
                        switch (mode) {
                            case exports.ScrollMode.Continuous:
                                let y = elementOffset.y + barBoundings.realBounds.y + this.settings.player.scrollOffsetY;
                                if (y !== this._lastScroll) {
                                    this._lastScroll = y;
                                    this.uiFacade.scrollToY(scrollElement, y, this.settings.player.scrollSpeed);
                                }
                                break;
                            case exports.ScrollMode.OffScreen:
                                let elementBottom = scrollElement.scrollTop + this.uiFacade.getOffset(null, scrollElement).h;
                                if (barBoundings.visualBounds.y + barBoundings.visualBounds.h >= elementBottom ||
                                    barBoundings.visualBounds.y < scrollElement.scrollTop) {
                                    let scrollTop = barBoundings.realBounds.y + this.settings.player.scrollOffsetY;
                                    this._lastScroll = barBoundings.visualBounds.x;
                                    this.uiFacade.scrollToY(scrollElement, scrollTop, this.settings.player.scrollSpeed);
                                }
                                break;
                        }
                    }
                    else {
                        switch (mode) {
                            case exports.ScrollMode.Continuous:
                                let x = barBoundings.visualBounds.x;
                                if (x !== this._lastScroll) {
                                    let scrollLeft = barBoundings.realBounds.x + this.settings.player.scrollOffsetX;
                                    this._lastScroll = barBoundings.visualBounds.x;
                                    this.uiFacade.scrollToX(scrollElement, scrollLeft, this.settings.player.scrollSpeed);
                                }
                                break;
                            case exports.ScrollMode.OffScreen:
                                let elementRight = scrollElement.scrollLeft + this.uiFacade.getOffset(null, scrollElement).w;
                                if (barBoundings.visualBounds.x + barBoundings.visualBounds.w >= elementRight ||
                                    barBoundings.visualBounds.x < scrollElement.scrollLeft) {
                                    let scrollLeft = barBoundings.realBounds.x + this.settings.player.scrollOffsetX;
                                    this._lastScroll = barBoundings.visualBounds.x;
                                    this.uiFacade.scrollToX(scrollElement, scrollLeft, this.settings.player.scrollSpeed);
                                }
                                break;
                        }
                    }
                }
                // trigger an event for others to indicate which beat/bar is played
                this.onPlayedBeatChanged(beat);
            }
        }
        addPlayedBeatChanged(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)');
            this.playedBeatChanged.on(value);
        }
        removePlayedBeatChanged(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)/<name>.off(..)');
            this.playedBeatChanged.off(value);
        }
        onPlayedBeatChanged(beat) {
            this.playedBeatChanged.trigger(beat);
            this.uiFacade.triggerEvent(this.container, 'playedBeatChanged', beat);
        }
        addBeatMouseDown(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)');
            this.beatMouseDown.on(value);
        }
        removeBeatMouseDown(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)/<name>.off(..)');
            this.beatMouseDown.off(value);
        }
        addBeatMouseMove(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)');
            this.beatMouseMove.on(value);
        }
        removeBeatMouseMove(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)/<name>.off(..)');
            this.beatMouseMove.off(value);
        }
        addBeatMouseUp(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)');
            this.beatMouseUp.on(value);
        }
        removeBeatMouseUp(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)/<name>.off(..)');
            this.beatMouseUp.off(value);
        }
        onBeatMouseDown(originalEvent, beat) {
            if (this.settings.player.enablePlayer &&
                this.settings.player.enableCursor &&
                this.settings.player.enableUserInteraction) {
                this._selectionStart = new SelectionInfo(beat);
                this._selectionEnd = null;
            }
            this._beatMouseDown = true;
            this.beatMouseDown.trigger(beat);
            this.uiFacade.triggerEvent(this.container, 'beatMouseDown', beat, originalEvent);
        }
        onBeatMouseMove(originalEvent, beat) {
            if (this.settings.player.enableUserInteraction) {
                if (!this._selectionEnd || this._selectionEnd.beat !== beat) {
                    this._selectionEnd = new SelectionInfo(beat);
                    this.cursorSelectRange(this._selectionStart, this._selectionEnd);
                }
            }
            this.beatMouseMove.trigger(beat);
            this.uiFacade.triggerEvent(this.container, 'beatMouseMove', beat, originalEvent);
        }
        onBeatMouseUp(originalEvent, beat) {
            if (this.settings.player.enableUserInteraction) {
                // for the selection ensure start < end
                if (this._selectionEnd) {
                    let startTick = this._selectionStart.beat.absoluteDisplayStart;
                    let endTick = this._selectionStart.beat.absoluteDisplayStart;
                    if (endTick < startTick) {
                        let t = this._selectionStart;
                        this._selectionStart = this._selectionEnd;
                        this._selectionEnd = t;
                    }
                }
                if (this._selectionStart && this._tickCache) {
                    // get the start and stop ticks (which consider properly repeats)
                    let tickCache = this._tickCache;
                    let realMasterBarStart = tickCache.getMasterBarStart(this._selectionStart.beat.voice.bar.masterBar);
                    // move to selection start
                    this.cursorUpdateBeat(this._selectionStart.beat, null, 0, false, null);
                    this.tickPosition = realMasterBarStart + this._selectionStart.beat.playbackStart;
                    // set playback range
                    if (this._selectionEnd && this._selectionStart.beat !== this._selectionEnd.beat) {
                        let realMasterBarEnd = tickCache.getMasterBarStart(this._selectionEnd.beat.voice.bar.masterBar);
                        let range = new PlaybackRange();
                        range.startTick = realMasterBarStart + this._selectionStart.beat.playbackStart;
                        range.endTick =
                            realMasterBarEnd +
                                this._selectionEnd.beat.playbackStart +
                                this._selectionEnd.beat.playbackDuration -
                                50;
                        this.playbackRange = range;
                    }
                    else {
                        this._selectionStart = null;
                        this.playbackRange = null;
                        this.cursorSelectRange(this._selectionStart, this._selectionEnd);
                    }
                }
            }
            this.beatMouseUp.trigger(beat);
            this.uiFacade.triggerEvent(this.container, 'beatMouseUp', beat, originalEvent);
            this._beatMouseDown = false;
        }
        setupClickHandling() {
            this.canvasElement.mouseDown.on(e => {
                var _a, _b;
                if (!e.isLeftMouseButton) {
                    return;
                }
                if (this.settings.player.enableUserInteraction) {
                    e.preventDefault();
                }
                let relX = e.getX(this.canvasElement);
                let relY = e.getY(this.canvasElement);
                let beat = (_b = (_a = this.renderer.boundsLookup) === null || _a === void 0 ? void 0 : _a.getBeatAtPos(relX, relY)) !== null && _b !== void 0 ? _b : null;
                if (beat) {
                    this.onBeatMouseDown(e, beat);
                }
            });
            this.canvasElement.mouseMove.on(e => {
                var _a, _b;
                if (!this._beatMouseDown) {
                    return;
                }
                let relX = e.getX(this.canvasElement);
                let relY = e.getY(this.canvasElement);
                let beat = (_b = (_a = this.renderer.boundsLookup) === null || _a === void 0 ? void 0 : _a.getBeatAtPos(relX, relY)) !== null && _b !== void 0 ? _b : null;
                if (beat) {
                    this.onBeatMouseMove(e, beat);
                }
            });
            this.canvasElement.mouseUp.on(e => {
                var _a, _b;
                if (!this._beatMouseDown) {
                    return;
                }
                if (this.settings.player.enableUserInteraction) {
                    e.preventDefault();
                }
                let relX = e.getX(this.canvasElement);
                let relY = e.getY(this.canvasElement);
                let beat = (_b = (_a = this.renderer.boundsLookup) === null || _a === void 0 ? void 0 : _a.getBeatAtPos(relX, relY)) !== null && _b !== void 0 ? _b : null;
                this.onBeatMouseUp(e, beat);
            });
            this.renderer.postRenderFinished.on(() => {
                if (!this._selectionStart ||
                    !this.settings.player.enablePlayer ||
                    !this.settings.player.enableCursor ||
                    !this.settings.player.enableUserInteraction) {
                    return;
                }
                this.cursorSelectRange(this._selectionStart, this._selectionEnd);
            });
        }
        cursorSelectRange(startBeat, endBeat) {
            let cache = this.renderer.boundsLookup;
            if (!cache) {
                return;
            }
            let selectionWrapper = this._selectionWrapper;
            if (!selectionWrapper || !startBeat || !endBeat || startBeat.beat === endBeat.beat) {
                return;
            }
            selectionWrapper.clear();
            if (!startBeat.bounds) {
                startBeat.bounds = cache.findBeat(startBeat.beat);
            }
            if (!endBeat.bounds) {
                endBeat.bounds = cache.findBeat(endBeat.beat);
            }
            let startTick = startBeat.beat.absolutePlaybackStart;
            let endTick = endBeat.beat.absolutePlaybackStart;
            if (endTick < startTick) {
                let t = startBeat;
                startBeat = endBeat;
                endBeat = t;
            }
            let startX = startBeat.bounds.realBounds.x;
            let endX = endBeat.bounds.realBounds.x + endBeat.bounds.realBounds.w;
            if (endBeat.beat.index === endBeat.beat.voice.beats.length - 1) {
                endX =
                    endBeat.bounds.barBounds.masterBarBounds.realBounds.x +
                        endBeat.bounds.barBounds.masterBarBounds.realBounds.w;
            }
            // if the selection goes across multiple staves, we need a special selection highlighting
            if (startBeat.bounds.barBounds.masterBarBounds.staveGroupBounds !==
                endBeat.bounds.barBounds.masterBarBounds.staveGroupBounds) {
                // from the startbeat to the end of the staff,
                // then fill all staffs until the end-beat staff
                // then from staff-start to the end beat (or to end of bar if it's the last beat)
                let staffStartX = startBeat.bounds.barBounds.masterBarBounds.staveGroupBounds.visualBounds.x;
                let staffEndX = startBeat.bounds.barBounds.masterBarBounds.staveGroupBounds.visualBounds.x +
                    startBeat.bounds.barBounds.masterBarBounds.staveGroupBounds.visualBounds.w;
                let startSelection = this.uiFacade.createSelectionElement();
                startSelection.top = startBeat.bounds.barBounds.masterBarBounds.visualBounds.y;
                startSelection.left = startX;
                startSelection.width = staffEndX - startX;
                startSelection.height = startBeat.bounds.barBounds.masterBarBounds.visualBounds.h;
                selectionWrapper.appendChild(startSelection);
                let staffStartIndex = startBeat.bounds.barBounds.masterBarBounds.staveGroupBounds.index + 1;
                let staffEndIndex = endBeat.bounds.barBounds.masterBarBounds.staveGroupBounds.index;
                for (let staffIndex = staffStartIndex; staffIndex < staffEndIndex; staffIndex++) {
                    let staffBounds = cache.staveGroups[staffIndex];
                    let middleSelection = this.uiFacade.createSelectionElement();
                    middleSelection.top = staffBounds.visualBounds.y;
                    middleSelection.left = staffStartX;
                    middleSelection.width = staffEndX - staffStartX;
                    middleSelection.height = staffBounds.visualBounds.h;
                    selectionWrapper.appendChild(middleSelection);
                }
                let endSelection = this.uiFacade.createSelectionElement();
                endSelection.top = endBeat.bounds.barBounds.masterBarBounds.visualBounds.y;
                endSelection.left = staffStartX;
                endSelection.width = endX - staffStartX;
                endSelection.height = endBeat.bounds.barBounds.masterBarBounds.visualBounds.h;
                selectionWrapper.appendChild(endSelection);
            }
            else {
                // if the beats are on the same staff, we simply highlight from the startbeat to endbeat
                let selection = this.uiFacade.createSelectionElement();
                selection.top = startBeat.bounds.barBounds.masterBarBounds.visualBounds.y;
                selection.left = startX;
                selection.width = endX - startX;
                selection.height = startBeat.bounds.barBounds.masterBarBounds.visualBounds.h;
                selectionWrapper.appendChild(selection);
            }
        }
        addLoaded(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)');
            this.loaded.on(value);
        }
        removeLoaded(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)/<name>.off(..)');
            this.loaded.off(value);
        }
        onLoaded(score) {
            this.loaded.trigger(score);
            this.uiFacade.triggerEvent(this.container, 'loaded', score);
        }
        addResize(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)');
            this.resize.on(value);
        }
        removeResize(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)/<name>.off(..)');
            this.resize.off(value);
        }
        onResize(e) {
            this.resize.trigger(e);
            this.uiFacade.triggerEvent(this.container, 'resize', e);
        }
        addRenderStarted(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)');
            this.renderStarted.on(value);
        }
        removeRenderStarted(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)/<name>.off(..)');
            this.renderStarted.off(value);
        }
        onRenderStarted(resize) {
            this.renderStarted.trigger(resize);
            this.uiFacade.triggerEvent(this.container, 'render', resize);
        }
        addRenderFinished(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)');
            this.renderFinished.on(value);
        }
        removeRenderFinished(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)/<name>.off(..)');
            this.renderFinished.off(value);
        }
        onRenderFinished() {
            this.renderFinished.trigger();
            this.uiFacade.triggerEvent(this.container, 'rendered', null);
        }
        addPostRenderFinished(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)');
            this.postRenderFinished.on(value);
        }
        removePostRenderFinished(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)/<name>.off(..)');
            this.postRenderFinished.off(value);
        }
        onPostRenderFinished() {
            this.postRenderFinished.trigger();
            this.uiFacade.triggerEvent(this.container, 'postRendered', null);
        }
        addError(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)');
            this.error.on(value);
        }
        removeError(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)/<name>.off(..)');
            this.error.off(value);
        }
        onError(error) {
            Logger.error('API', 'An unexpected error occurred', error);
            this.error.trigger(error);
            this.uiFacade.triggerEvent(this.container, 'error', error);
        }
        addReadyForPlayback(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)');
            this.readyForPlayback.on(value);
        }
        removeReadyForPlayback(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)/<name>.off(..)');
            this.readyForPlayback.off(value);
        }
        onReadyForPlayback() {
            this.readyForPlayback.trigger();
            this.uiFacade.triggerEvent(this.container, 'playerReady', null);
        }
        addPlayerFinished(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)');
            this.playerFinished.on(value);
        }
        removePlayerFinished(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)/<name>.off(..)');
            this.playerFinished.off(value);
        }
        onPlayerFinished() {
            this.playerFinished.trigger();
            this.uiFacade.triggerEvent(this.container, 'finished', null);
        }
        addSoundFontLoaded(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)');
            this.soundFontLoaded.on(value);
        }
        removeSoundFontLoaded(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)/<name>.off(..)');
            this.soundFontLoaded.off(value);
        }
        onSoundFontLoaded() {
            this.soundFontLoaded.trigger();
            this.uiFacade.triggerEvent(this.container, 'soundFontLoaded', null);
        }
        addMidiLoaded(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)');
            this.midiLoaded.on(value);
        }
        removeMidiLoaded(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)/<name>.off(..)');
            this.midiLoaded.off(value);
        }
        onMidiLoaded() {
            this.midiLoaded.trigger();
            this.uiFacade.triggerEvent(this.container, 'midiFileLoaded', null);
        }
        addPlayerStateChanged(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)');
            this.playerStateChanged.on(value);
        }
        removePlayerStateChanged(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)/<name>.off(..)');
            this.playerStateChanged.off(value);
        }
        onPlayerStateChanged(e) {
            this.playerStateChanged.trigger(e);
            this.uiFacade.triggerEvent(this.container, 'playerStateChanged', e);
        }
        addPlayerPositionChanged(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)');
            this.playerPositionChanged.on(value);
        }
        removePlayerPositionChanged(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)/<name>.off(..)');
            this.playerPositionChanged.off(value);
        }
        onPlayerPositionChanged(e) {
            this.playerPositionChanged.trigger(e);
            this.uiFacade.triggerEvent(this.container, 'positionChanged', e);
        }
    }

    /**
     * @target web
     */
    class FileLoadError extends Error {
        constructor(message, xhr) {
            super(message);
            this.xhr = xhr;
        }
    }

    /**
     * An exception indicating no importer for reading the given file could be found.
     */
    class NoImporterFoundError extends Error {
        /**
         * Initializes a new instance of the {@link NoImporterFoundError} class.
         */
        constructor() {
            super('No compatible importer found');
        }
    }

    /**
     * The ScoreLoader enables you easy loading of Scores using all
     * available importers
     */
    class ScoreLoader {
        /**
         * Loads a score asynchronously from the given datasource
         * @param path the source path to load the binary file from
         * @param success this function is called if the Score was successfully loaded from the datasource
         * @param error this function is called if any error during the loading occured.
         * @param settings settings for the score import
         * @target web
         */
        // TODO: use promises
        static loadScoreAsync(path, success, error, settings) {
            let xhr = new XMLHttpRequest();
            xhr.open('GET', path, true, null, null);
            xhr.responseType = 'arraybuffer';
            xhr.onreadystatechange = () => {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    let response = xhr.response;
                    if (xhr.status === 200 || (xhr.status === 0 && response)) {
                        try {
                            let buffer = xhr.response;
                            let reader = new Uint8Array(buffer);
                            let score = ScoreLoader.loadScoreFromBytes(reader, settings);
                            success(score);
                        }
                        catch (e) {
                            error(e);
                        }
                    }
                    else if (xhr.status === 0) {
                        error(new FileLoadError('You are offline!!\n Please Check Your Network.', xhr));
                    }
                    else if (xhr.status === 404) {
                        error(new FileLoadError('Requested URL not found.', xhr));
                    }
                    else if (xhr.status === 500) {
                        error(new FileLoadError('Internel Server Error.', xhr));
                    }
                    else if (xhr.statusText === 'parsererror') {
                        error(new FileLoadError('Error.\nParsing JSON Request failed.', xhr));
                    }
                    else if (xhr.statusText === 'timeout') {
                        error(new FileLoadError('Request Time out.', xhr));
                    }
                    else {
                        error(new FileLoadError('Unknow Error: ' + xhr.responseText, xhr));
                    }
                }
            };
            // IE fallback
            if (xhr.responseType !== 'arraybuffer') {
                // use VB Loader to load binary array
                let vbArr = VbAjaxLoader('GET', path);
                let fileContents = vbArr.toArray();
                // decode byte array to string
                let data = '';
                let i = 0;
                while (i < fileContents.length - 1) {
                    data += fileContents[i].toString();
                    i++;
                }
                let reader = ScoreLoader.getBytesFromString(data);
                let score = ScoreLoader.loadScoreFromBytes(reader, settings);
                success(score);
            }
            xhr.send();
        }
        static getBytesFromString(s) {
            let b = new Uint8Array(s.length);
            for (let i = 0; i < s.length; i++) {
                b[i] = s.charCodeAt(i);
            }
            return b;
        }
        /**
         * Loads the score from the given binary data.
         * @param data The binary data containing a score in any known file format.
         * @param settings The settings to use during importing.
         * @returns The loaded score.
         */
        static loadScoreFromBytes(data, settings) {
            if (!settings) {
                settings = new Settings();
            }
            let importers = Environment.buildImporters();
            Logger.info('ScoreLoader', 'Loading score from ' + data.length + ' bytes using ' + importers.length + ' importers', null);
            let score = null;
            let bb = ByteBuffer.fromBuffer(data);
            for (let importer of importers) {
                bb.reset();
                try {
                    Logger.info('ScoreLoader', 'Importing using importer ' + importer.name);
                    importer.init(bb, settings);
                    score = importer.readScore();
                    Logger.info('ScoreLoader', 'Score imported using ' + importer.name);
                    break;
                }
                catch (e) {
                    if (e instanceof UnsupportedFormatError) {
                        Logger.info('ScoreLoader', importer.name + ' does not support the file');
                    }
                    else {
                        Logger.info('ScoreLoader', 'Score import failed due to unexpected error: ' + e, null);
                        throw e;
                    }
                }
            }
            if (score) {
                return score;
            }
            Logger.error('ScoreLoader', 'No compatible importer found for file');
            throw new NoImporterFoundError();
        }
    }

    /**
     * @target web
     */
    class BrowserMouseEventArgs {
        constructor(e) {
            this.mouseEvent = e;
        }
        get isLeftMouseButton() {
            return this.mouseEvent.button === 0;
        }
        getX(relativeTo) {
            let relativeToElement = relativeTo.element;
            let bounds = relativeToElement.getBoundingClientRect();
            let left = bounds.left + relativeToElement.ownerDocument.defaultView.pageXOffset;
            return this.mouseEvent.pageX - left;
        }
        getY(relativeTo) {
            let relativeToElement = relativeTo.element;
            let bounds = relativeToElement.getBoundingClientRect();
            let top = bounds.top + relativeToElement.ownerDocument.defaultView.pageYOffset;
            return this.mouseEvent.pageY - top;
        }
        preventDefault() {
            this.mouseEvent.preventDefault();
        }
    }

    /**
     * @target web
     */
    class HtmlElementContainer {
        constructor(element) {
            this.element = element;
            this.mouseDown = {
                on: (value) => {
                    this.element.addEventListener('mousedown', e => {
                        value(new BrowserMouseEventArgs(e));
                    }, true);
                },
                off: (value) => {
                    // not supported due to wrapping
                }
            };
            this.mouseUp = {
                on: (value) => {
                    this.element.addEventListener('mouseup', e => {
                        value(new BrowserMouseEventArgs(e));
                    }, true);
                },
                off: (value) => {
                    // not supported due to wrapping
                }
            };
            this.mouseMove = {
                on: (value) => {
                    this.element.addEventListener('mousemove', e => {
                        value(new BrowserMouseEventArgs(e));
                    }, true);
                },
                off: (_) => {
                    // not supported due to wrapping
                }
            };
            this.scroll = {
                on: (value) => {
                    window.addEventListener('scroll', value, true);
                },
                off: (value) => {
                    window.removeEventListener('scroll', value, true);
                }
            };
            this.resize = {
                on: (value) => {
                    window.addEventListener('resize', value, true);
                },
                off: (value) => {
                    window.removeEventListener('resize', value, true);
                }
            };
        }
        get top() {
            return parseFloat(this.element.style.top);
        }
        set top(value) {
            this.element.style.top = value + 'px';
        }
        get left() {
            return parseFloat(this.element.style.top);
        }
        set left(value) {
            this.element.style.left = value + 'px';
        }
        get width() {
            return this.element.offsetWidth;
        }
        set width(value) {
            this.element.style.width = value + 'px';
        }
        get scrollLeft() {
            return this.element.scrollLeft;
        }
        set scrollLeft(value) {
            this.element.scrollTop = value;
        }
        get scrollTop() {
            return this.element.scrollLeft;
        }
        set scrollTop(value) {
            this.element.scrollTop = value;
        }
        get height() {
            return this.element.offsetHeight;
        }
        set height(value) {
            if (value >= 0) {
                this.element.style.height = value + 'px';
            }
            else {
                this.element.style.height = '100%';
            }
        }
        get isVisible() {
            return !!this.element.offsetWidth || !!this.element.offsetHeight || !!this.element.getClientRects().length;
        }
        stopAnimation() {
            this.element.style.transition = 'none';
        }
        transitionToX(duration, x) {
            this.element.style.transition = 'all 0s linear';
            this.element.style.transitionDuration = duration + 'ms';
            this.element.style.left = x + 'px';
        }
        appendChild(child) {
            this.element.appendChild(child.element);
        }
        clear() {
            this.element.innerHTML = '';
        }
    }

    /**
     * This small utility helps to detect whether a particular font is already loaded.
     * @target web
     */
    class FontLoadingChecker {
        constructor(family, fallbackText = 'BESbwy') {
            this._isStarted = false;
            this.isFontLoaded = false;
            this.fontLoaded = new EventEmitterOfT();
            this._family = family;
            this._fallbackText = fallbackText;
        }
        checkForFontAvailability() {
            if (Platform.isRunningInWorker) {
                // no web fonts in web worker
                this.isFontLoaded = false;
                return;
            }
            if (this._isStarted) {
                return;
            }
            this._isStarted = true;
            let failCounter = 0;
            let failCounterId = window.setInterval(() => {
                failCounter++;
                Logger.warning('Rendering', `Could not load font '${this._family}' within ${failCounter * 5} seconds`, null);
            }, 5000);
            Logger.debug('Font', `Start checking for font availablility: ${this._family}`);
            if (Platform.supportsFontsApi) {
                Logger.debug('Font', `[${this._family}] Font API available`);
                let checkFont = () => {
                    document.fonts.load(`1em ${this._family}`).then(() => {
                        Logger.debug('Font', `[${this._family}] Font API signaled loaded`);
                        if (document.fonts.check('1em ' + this._family)) {
                            Logger.info('Rendering', `[${this._family}] Font API signaled available`);
                            this.isFontLoaded = true;
                            window.clearInterval(failCounterId);
                            this.fontLoaded.trigger(this._family);
                        }
                        else {
                            Logger.debug('Font', `[${this._family}] Font API loaded reported, but font not available, checking later again`, null);
                            window.setTimeout(() => {
                                checkFont();
                            }, 250);
                        }
                        return true;
                    });
                };
                checkFont();
            }
            else {
                Logger.debug('Font', `[${this._family}] Font API not available, using resize trick`, null);
                // based on the idea of https://www.bramstein.com/writing/detecting-system-fonts-without-flash.html
                // simply create 3 elements with the 3 default font families and measure them
                // then change to the desired font and expect a change on the width
                let sans;
                let serif;
                let monospace;
                let initialSansWidth = -1;
                let initialSerifWidth = -1;
                let initialMonospaceWidth = -1;
                let checkFont = () => {
                    if (!sans) {
                        sans = this.createCheckerElement('sans-serif');
                        serif = this.createCheckerElement('serif');
                        monospace = this.createCheckerElement('monospace');
                        document.body.appendChild(sans);
                        document.body.appendChild(serif);
                        document.body.appendChild(monospace);
                        initialSansWidth = sans.offsetWidth;
                        initialSerifWidth = serif.offsetWidth;
                        initialMonospaceWidth = monospace.offsetWidth;
                        sans.style.fontFamily = `'${this._family}',sans-serif`;
                        serif.style.fontFamily = `'${this._family}',serif`;
                        monospace.style.fontFamily = `'${this._family}',monospace`;
                    }
                    let sansWidth = sans.offsetWidth;
                    let serifWidth = serif.offsetWidth;
                    let monospaceWidth = monospace.offsetWidth;
                    if ((sansWidth !== initialSansWidth && serifWidth !== initialSerifWidth) ||
                        (sansWidth !== initialSansWidth && monospaceWidth !== initialMonospaceWidth) ||
                        (serifWidth !== initialSerifWidth && monospaceWidth !== initialMonospaceWidth)) {
                        if (sansWidth === serifWidth || sansWidth === monospaceWidth || serifWidth === monospaceWidth) {
                            document.body.removeChild(sans);
                            document.body.removeChild(serif);
                            document.body.removeChild(monospace);
                            this.isFontLoaded = true;
                            window.clearInterval(failCounterId);
                            this.fontLoaded.trigger(this._family);
                        }
                        else {
                            window.setTimeout(checkFont, 250);
                        }
                    }
                    else {
                        window.setTimeout(checkFont, 250);
                    }
                };
                window.addEventListener('DOMContentLoaded', () => {
                    checkFont();
                });
            }
        }
        createCheckerElement(family) {
            let checkerElement = document.createElement('span');
            checkerElement.style.display = 'inline-block';
            checkerElement.style.position = 'absolute';
            checkerElement.style.overflow = 'hidden';
            checkerElement.style.top = '-1000px';
            checkerElement.style.fontSize = '100px';
            checkerElement.style.fontFamily = family;
            checkerElement.innerHTML = this._fallbackText;
            document.body.appendChild(checkerElement);
            return checkerElement;
        }
    }

    /**
     * Represents a fixed size circular sample buffer that can be written to and read from.
     */
    class CircularSampleBuffer {
        /**
         * Initializes a new instance of the {@link CircularSampleBuffer} class.
         * @param size The size.
         */
        constructor(size) {
            this._writePosition = 0;
            this._readPosition = 0;
            /**
             * Gets the number of samples written to the buffer.
             */
            this.count = 0;
            this._buffer = new Float32Array(size);
        }
        /**
         * Clears all samples written to this buffer.
         */
        clear() {
            this._readPosition = 0;
            this._writePosition = 0;
            this.count = 0;
            this._buffer = new Float32Array(this._buffer.length);
        }
        /**
         * Writes the given samples to this buffer.
         * @param data The sample array to read from.
         * @param offset
         * @param count
         * @returns
         */
        write(data, offset, count) {
            let samplesWritten = 0;
            if (count > this._buffer.length - this.count) {
                count = this._buffer.length - this.count;
            }
            const writeToEnd = Math.min(this._buffer.length - this._writePosition, count);
            this._buffer.set(data.subarray(offset, offset + writeToEnd), this._writePosition);
            this._writePosition += writeToEnd;
            this._writePosition %= this._buffer.length;
            samplesWritten += writeToEnd;
            if (samplesWritten < count) {
                this._buffer.set(data.subarray(offset + samplesWritten, offset + samplesWritten + count - samplesWritten), this._writePosition);
                this._writePosition += count - samplesWritten;
                samplesWritten = count;
            }
            this.count += samplesWritten;
            return samplesWritten;
        }
        /**
         * Reads the requested amount of samples from the buffer.
         * @param data The sample array to store the read elements.
         * @param offset The offset within the destination buffer to put the items at.
         * @param count The number of items to read from this buffer.
         * @returns The number of items actually read from the buffer.
         */
        read(data, offset, count) {
            if (count > this.count) {
                count = this.count;
            }
            let samplesRead = 0;
            const readToEnd = Math.min(this._buffer.length - this._readPosition, count);
            data.set(this._buffer.subarray(this._readPosition, this._readPosition + readToEnd), offset);
            samplesRead += readToEnd;
            this._readPosition += readToEnd;
            this._readPosition %= this._buffer.length;
            if (samplesRead < count) {
                data.set(this._buffer.subarray(this._readPosition, this._readPosition + count - samplesRead), offset + samplesRead);
                this._readPosition += count - samplesRead;
                samplesRead = count;
            }
            this.count -= samplesRead;
            return samplesRead;
        }
    }

    /**
     * This class implements a HTML5 Web Audio API based audio output device
     * for alphaSynth. It can be controlled via a JS API.
     * @target web
     */
    class AlphaSynthWebAudioOutput {
        constructor() {
            this._context = null;
            this._buffer = null;
            this._source = null;
            this._audioNode = null;
            this._finished = false;
            this.ready = new EventEmitter();
            this.samplesPlayed = new EventEmitterOfT();
            this.sampleRequest = new EventEmitter();
            this.finished = new EventEmitter();
        }
        get sampleRate() {
            return this._context ? this._context.sampleRate : AlphaSynthWebAudioOutput.PreferredSampleRate;
        }
        open() {
            this._finished = false;
            this.patchIosSampleRate();
            this._circularBuffer = new CircularSampleBuffer(AlphaSynthWebAudioOutput.BufferSize * AlphaSynthWebAudioOutput.BufferCount);
            this._context = new AudioContext();
            // possible fix for Web Audio in iOS 9 (issue #4)
            let ctx = this._context;
            if (ctx.state === 'suspended') {
                let resume = () => {
                    ctx.resume();
                    window.setTimeout(() => {
                        if (ctx.state === 'running') {
                            document.body.removeEventListener('touchend', resume, false);
                            document.body.removeEventListener('click', resume, false);
                        }
                    }, 0);
                };
                document.body.addEventListener('touchend', resume, false);
                document.body.addEventListener('click', resume, false);
            }
            this.ready.trigger();
        }
        activate() {
            if (this._context) {
                let ctx = this._context;
                ctx.resume();
            }
        }
        patchIosSampleRate() {
            let ua = navigator.userAgent;
            if (ua.indexOf('iPhone') !== -1 || ua.indexOf('iPad') !== 0) {
                let context = new AudioContext();
                let buffer = context.createBuffer(1, 1, AlphaSynthWebAudioOutput.PreferredSampleRate);
                let dummy = context.createBufferSource();
                dummy.buffer = buffer;
                dummy.connect(context.destination);
                dummy.start(0);
                dummy.disconnect(0);
                // tslint:disable-next-line: no-floating-promises
                context.close();
            }
        }
        play() {
            let ctx = this._context;
            if (!ctx) {
                return;
            }
            if (ctx.state === 'suspended' || ctx.state === 'interrupted') {
                // tslint:disable-next-line: no-floating-promises
                ctx.resume();
            }
            // create an empty buffer source (silence)
            this._buffer = ctx.createBuffer(2, 4096, ctx.sampleRate);
            // create a script processor node which will replace the silence with the generated audio
            this._audioNode = ctx.createScriptProcessor(4096, 0, 2);
            this._audioNode.onaudioprocess = this.generateSound.bind(this);
            this._circularBuffer.clear();
            this.requestBuffers();
            this._finished = false;
            this._source = ctx.createBufferSource();
            this._source.buffer = this._buffer;
            this._source.loop = true;
            this._source.connect(this._audioNode, 0, 0);
            this._source.start(0);
            this._audioNode.connect(ctx.destination, 0, 0);
        }
        pause() {
            if (this._source) {
                this._source.stop(0);
                this._source.disconnect(0);
            }
            this._source = null;
            if (this._audioNode) {
                this._audioNode.disconnect(0);
            }
            this._audioNode = null;
        }
        sequencerFinished() {
            this._finished = true;
        }
        addSamples(f) {
            this._circularBuffer.write(f, 0, f.length);
        }
        resetSamples() {
            this._circularBuffer.clear();
        }
        requestBuffers() {
            // if we fall under the half of buffers
            // we request one half
            let count = ((10 / 2) | 0) * 4096;
            if (this._circularBuffer.count < count && this.sampleRequest) {
                for (let i = 0; i < ((10 / 2) | 0); i++) {
                    this.sampleRequest.trigger();
                }
            }
        }
        generateSound(e) {
            let left = e.outputBuffer.getChannelData(0);
            let right = e.outputBuffer.getChannelData(1);
            let samples = left.length + right.length;
            if (this._circularBuffer.count < samples) {
                if (this._finished) {
                    this.finished.trigger();
                }
            }
            else {
                let buffer = new Float32Array(samples);
                this._circularBuffer.read(buffer, 0, buffer.length);
                let s = 0;
                for (let i = 0; i < left.length; i++) {
                    left[i] = buffer[s++];
                    right[i] = buffer[s++];
                }
                this.samplesPlayed.trigger(left.length);
            }
            if (!this._finished) {
                this.requestBuffers();
            }
        }
    }
    AlphaSynthWebAudioOutput.BufferSize = 4096;
    AlphaSynthWebAudioOutput.BufferCount = 10;
    AlphaSynthWebAudioOutput.PreferredSampleRate = 44100;

    /**
     * Represents the progress of any data being loaded.
     */
    class ProgressEventArgs {
        /**
         * Initializes a new instance of the {@link ProgressEventArgs} class.
         * @param loaded
         * @param total
         */
        constructor(loaded, total) {
            this.loaded = loaded;
            this.total = total;
        }
    }

    /**
     * a WebWorker based alphaSynth which uses the given player as output.
     * @target web
     */
    class AlphaSynthWebWorkerApi {
        constructor(player, alphaSynthScriptFile, logLevel) {
            this._workerIsReadyForPlayback = false;
            this._workerIsReady = false;
            this._outputIsReady = false;
            this._state = PlayerState.Paused;
            this._masterVolume = 0;
            this._metronomeVolume = 0;
            this._playbackSpeed = 0;
            this._tickPosition = 0;
            this._timePosition = 0;
            this._isLooping = false;
            this._playbackRange = null;
            this.ready = new EventEmitter();
            this.readyForPlayback = new EventEmitter();
            this.finished = new EventEmitter();
            this.soundFontLoaded = new EventEmitter();
            this.soundFontLoadFailed = new EventEmitterOfT();
            this.midiLoaded = new EventEmitter();
            this.midiLoadFailed = new EventEmitterOfT();
            this.stateChanged = new EventEmitterOfT();
            this.positionChanged = new EventEmitterOfT();
            this._workerIsReadyForPlayback = false;
            this._workerIsReady = false;
            this._outputIsReady = false;
            this._state = PlayerState.Paused;
            this._masterVolume = 0.0;
            this._metronomeVolume = 0.0;
            this._playbackSpeed = 0.0;
            this._tickPosition = 0;
            this._timePosition = 0.0;
            this._isLooping = false;
            this._playbackRange = null;
            this._output = player;
            this._output.ready.on(this.onOutputReady.bind(this));
            this._output.samplesPlayed.on(this.onOutputSamplesPlayed.bind(this));
            this._output.sampleRequest.on(this.onOutputSampleRequest.bind(this));
            this._output.finished.on(this.onOutputFinished.bind(this));
            this._output.open();
            try {
                let script = "importScripts('" + alphaSynthScriptFile + "')";
                let blob = new Blob([script]);
                this._synth = new Worker(URL.createObjectURL(blob));
            }
            catch (e) {
                // fallback to direct worker
                try {
                    this._synth = new Worker(alphaSynthScriptFile);
                }
                catch (e2) {
                    Logger.error('AlphaSynth', 'Failed to create WebWorker: ' + e2);
                    return;
                }
            }
            this._synth.addEventListener('message', this.handleWorkerMessage.bind(this), false);
            this._synth.postMessage({
                cmd: 'alphaSynth.initialize',
                sampleRate: this._output.sampleRate,
                logLevel: logLevel
            });
            this.masterVolume = 1;
            this.playbackSpeed = 1;
            this.metronomeVolume = 0;
        }
        get isReady() {
            return this._workerIsReady && this._outputIsReady;
        }
        get isReadyForPlayback() {
            return this._workerIsReadyForPlayback;
        }
        get state() {
            return this._state;
        }
        get logLevel() {
            return Logger.logLevel;
        }
        set logLevel(value) {
            Logger.logLevel = value;
            this._synth.postMessage({
                cmd: 'alphaSynth.setLogLevel',
                value: value
            });
        }
        get masterVolume() {
            return this._masterVolume;
        }
        set masterVolume(value) {
            value = SynthHelper.clamp(value, SynthConstants.MinVolume, SynthConstants.MaxVolume);
            this._masterVolume = value;
            this._synth.postMessage({
                cmd: 'alphaSynth.setMasterVolume',
                value: value
            });
        }
        get metronomeVolume() {
            return this._metronomeVolume;
        }
        set metronomeVolume(value) {
            value = SynthHelper.clamp(value, SynthConstants.MinVolume, SynthConstants.MaxVolume);
            this._metronomeVolume = value;
            this._synth.postMessage({
                cmd: 'alphaSynth.setMetronomeVolume',
                value: value
            });
        }
        get playbackSpeed() {
            return this._playbackSpeed;
        }
        set playbackSpeed(value) {
            value = SynthHelper.clamp(value, SynthConstants.MinPlaybackSpeed, SynthConstants.MaxPlaybackSpeed);
            this._playbackSpeed = value;
            this._synth.postMessage({
                cmd: 'alphaSynth.setPlaybackSpeed',
                value: value
            });
        }
        get tickPosition() {
            return this._tickPosition;
        }
        set tickPosition(value) {
            if (value < 0) {
                value = 0;
            }
            this._tickPosition = value;
            this._synth.postMessage({
                cmd: 'alphaSynth.setTickPosition',
                value: value
            });
        }
        get timePosition() {
            return this._timePosition;
        }
        set timePosition(value) {
            if (value < 0) {
                value = 0;
            }
            this._timePosition = value;
            this._synth.postMessage({
                cmd: 'alphaSynth.setTimePosition',
                value: value
            });
        }
        get isLooping() {
            return this._isLooping;
        }
        set isLooping(value) {
            this._isLooping = value;
            this._synth.postMessage({
                cmd: 'alphaSynth.setIsLooping',
                value: value
            });
        }
        get playbackRange() {
            return this._playbackRange;
        }
        set playbackRange(value) {
            if (value) {
                if (value.startTick < 0) {
                    value.startTick = 0;
                }
                if (value.endTick < 0) {
                    value.endTick = 0;
                }
            }
            this._playbackRange = value;
            this._synth.postMessage({
                cmd: 'alphaSynth.setPlaybackRange',
                value: value
            });
        }
        destroy() {
            this._synth.terminate();
        }
        //
        // API communicating with the web worker
        play() {
            if (this.state === PlayerState.Playing || !this.isReadyForPlayback) {
                return false;
            }
            this._output.activate();
            this._synth.postMessage({
                cmd: 'alphaSynth.play'
            });
            return true;
        }
        pause() {
            this._synth.postMessage({
                cmd: 'alphaSynth.pause'
            });
        }
        playPause() {
            this._synth.postMessage({
                cmd: 'alphaSynth.playPause'
            });
        }
        stop() {
            this._synth.postMessage({
                cmd: 'alphaSynth.stop'
            });
        }
        loadSoundFont(data) {
            this._synth.postMessage({
                cmd: 'alphaSynth.loadSoundFontBytes',
                data: data
            });
        }
        loadSoundFontFromUrl(url, progress) {
            Logger.info('AlphaSynth', `Start loading Soundfont from url ${url}`);
            let request = new XMLHttpRequest();
            request.open('GET', url, true, null, null);
            request.responseType = 'arraybuffer';
            request.onload = _ => {
                let buffer = new Uint8Array(request.response);
                this._synth.postMessage({
                    cmd: 'alphaSynth.loadSoundFontBytes',
                    data: buffer
                });
            };
            request.onerror = e => {
                Logger.error('AlphaSynth', 'Loading failed: ' + e.message);
                this.soundFontLoadFailed.trigger(new FileLoadError(e.message, request));
            };
            request.onprogress = e => {
                Logger.debug('AlphaSynth', `Soundfont downloading: ${e.loaded}/${e.total} bytes`);
                progress(new ProgressEventArgs(e.loaded, e.total));
            };
            request.send();
        }
        loadMidiFile(midi) {
            this._synth.postMessage({
                cmd: 'alphaSynth.loadMidi',
                midi: JsonConverter.midiFileToJsObject(midi)
            });
        }
        setChannelMute(channel, mute) {
            this._synth.postMessage({
                cmd: 'alphaSynth.setChannelMute',
                channel: channel,
                mute: mute
            });
        }
        resetChannelStates() {
            this._synth.postMessage({
                cmd: 'alphaSynth.resetChannelStates'
            });
        }
        setChannelSolo(channel, solo) {
            this._synth.postMessage({
                cmd: 'alphaSynth.setChannelSolo',
                channel: channel,
                solo: solo
            });
        }
        setChannelVolume(channel, volume) {
            volume = SynthHelper.clamp(volume, SynthConstants.MinVolume, SynthConstants.MaxVolume);
            this._synth.postMessage({
                cmd: 'alphaSynth.setChannelVolume',
                channel: channel,
                volume: volume
            });
        }
        setChannelProgram(channel, program) {
            program = SynthHelper.clamp(program, SynthConstants.MinProgram, SynthConstants.MaxProgram);
            this._synth.postMessage({
                cmd: 'alphaSynth.setChannelProgram',
                channel: channel,
                program: program
            });
        }
        handleWorkerMessage(e) {
            let data = e.data;
            let cmd = data.cmd;
            switch (cmd) {
                case 'alphaSynth.ready':
                    this._workerIsReady = true;
                    this.checkReady();
                    break;
                case 'alphaSynth.readyForPlayback':
                    this._workerIsReadyForPlayback = true;
                    this.checkReadyForPlayback();
                    break;
                case 'alphaSynth.positionChanged':
                    this._timePosition = data.currentTime;
                    this._tickPosition = data.currentTick;
                    this.positionChanged.trigger(new PositionChangedEventArgs(data.currentTime, data.endTime, data.currentTick, data.endTick));
                    break;
                case 'alphaSynth.playerStateChanged':
                    this._state = data.state;
                    this.stateChanged.trigger(new PlayerStateChangedEventArgs(data.state, data.stopped));
                    break;
                case 'alphaSynth.finished':
                    this.finished.trigger();
                    break;
                case 'alphaSynth.soundFontLoaded':
                    this.soundFontLoaded.trigger();
                    break;
                case 'alphaSynth.soundFontLoadFailed':
                    this.soundFontLoadFailed.trigger(data.error);
                    break;
                case 'alphaSynth.midiLoaded':
                    this.checkReadyForPlayback();
                    this.midiLoaded.trigger();
                    break;
                case 'alphaSynth.midiLoadFailed':
                    this.checkReadyForPlayback();
                    this.midiLoadFailed.trigger(data.error);
                    break;
                case 'alphaSynth.output.sequencerFinished':
                    this._output.sequencerFinished();
                    break;
                case 'alphaSynth.output.addSamples':
                    this._output.addSamples(data.samples);
                    break;
                case 'alphaSynth.output.play':
                    this._output.play();
                    break;
                case 'alphaSynth.output.pause':
                    this._output.pause();
                    break;
                case 'alphaSynth.output.resetSamples':
                    this._output.resetSamples();
                    break;
            }
        }
        checkReady() {
            if (this.isReady) {
                this.ready.trigger();
            }
        }
        checkReadyForPlayback() {
            if (this.isReadyForPlayback) {
                this.readyForPlayback.trigger();
            }
        }
        //
        // output communication ( output -> worker )
        onOutputSampleRequest() {
            this._synth.postMessage({
                cmd: 'alphaSynth.output.sampleRequest'
            });
        }
        onOutputFinished() {
            this._synth.postMessage({
                cmd: 'alphaSynth.output.finished'
            });
        }
        onOutputSamplesPlayed(samples) {
            this._synth.postMessage({
                cmd: 'alphaSynth.output.samplesPlayed',
                samples: samples
            });
        }
        onOutputReady() {
            this._outputIsReady = true;
            this.checkReady();
        }
    }

    /**
     * @target web
     */
    class AlphaTabWorkerScoreRenderer {
        constructor(api, settings) {
            this._width = 0;
            this.boundsLookup = null;
            this.preRender = new EventEmitterOfT();
            this.partialRenderFinished = new EventEmitterOfT();
            this.renderFinished = new EventEmitterOfT();
            this.postRenderFinished = new EventEmitter();
            this.error = new EventEmitterOfT();
            this._api = api;
            if (!settings.core.scriptFile) {
                Logger.error('Rendering', `Could not detect alphaTab script file, cannot initialize renderer`);
                return;
            }
            // first try blob worker
            try {
                let script = `importScripts('${settings.core.scriptFile}')`;
                let blob = new Blob([script]);
                this._worker = new Worker(URL.createObjectURL(blob));
            }
            catch (e) {
                try {
                    this._worker = new Worker(settings.core.scriptFile);
                }
                catch (e2) {
                    Logger.error('Rendering', `Failed to create WebWorker: ${e}`);
                    return;
                }
            }
            this._worker.postMessage({
                cmd: 'alphaTab.initialize',
                settings: this.serializeSettingsForWorker(settings)
            });
            this._worker.addEventListener('message', this.handleWorkerMessage.bind(this));
        }
        destroy() {
            this._worker.terminate();
        }
        updateSettings(settings) {
            this._worker.postMessage({
                cmd: 'alphaTab.updateSettings',
                settings: this.serializeSettingsForWorker(settings)
            });
        }
        serializeSettingsForWorker(settings) {
            let json = Settings.toJson(settings);
            // cut out player settings, they are only needed on UI thread side
            json.player = null;
            return json;
        }
        render() {
            this._worker.postMessage({
                cmd: 'alphaTab.render'
            });
        }
        resizeRender() {
            this._worker.postMessage({
                cmd: 'alphaTab.resizeRender'
            });
        }
        get width() {
            return this._width;
        }
        set width(value) {
            this._width = value;
            this._worker.postMessage({
                cmd: 'alphaTab.setWidth',
                width: value
            });
        }
        handleWorkerMessage(e) {
            let data = e.data;
            let cmd = data.cmd;
            switch (cmd) {
                case 'alphaTab.preRender':
                    this.preRender.trigger(data.resize);
                    break;
                case 'alphaTab.partialRenderFinished':
                    this.partialRenderFinished.trigger(data.result);
                    break;
                case 'alphaTab.renderFinished':
                    this.renderFinished.trigger(data.result);
                    break;
                case 'alphaTab.postRenderFinished':
                    this.boundsLookup = BoundsLookup.fromJson(data.boundsLookup, this._api.score);
                    this.postRenderFinished.trigger();
                    break;
                case 'alphaTab.error':
                    this.error.trigger(data.error);
                    break;
            }
        }
        renderScore(score, trackIndexes) {
            let jsObject = JsonConverter.scoreToJsObject(score);
            this._worker.postMessage({
                cmd: 'alphaTab.renderScore',
                score: jsObject,
                trackIndexes: trackIndexes,
                fontSizes: FontSizes.FontSizeLookupTables
            });
        }
    }

    /**
     * This wrapper holds all cursor related elements.
     */
    class Cursors {
        /**
         * Initializes a new instance of the {@link Cursors} class.
         * @param cursorWrapper
         * @param barCursor
         * @param beatCursor
         * @param selectionWrapper
         */
        constructor(cursorWrapper, barCursor, beatCursor, selectionWrapper) {
            this.cursorWrapper = cursorWrapper;
            this.barCursor = barCursor;
            this.beatCursor = beatCursor;
            this.selectionWrapper = selectionWrapper;
        }
    }

    /**
     * @target web
     */
    class BrowserUiFacade {
        constructor(rootElement) {
            this._fontCheckers = new Map();
            this._contents = null;
            this._file = null;
            this._visibilityCheckIntervalId = 0;
            this._visibilityCheckInterval = 0;
            this._totalResultCount = 0;
            this._initialTrackIndexes = null;
            this._rootContainerBecameVisible = new EventEmitter();
            this.canRenderChanged = new EventEmitter();
            rootElement.classList.add('alphaTab');
            this.rootContainer = new HtmlElementContainer(rootElement);
            this.areWorkersSupported = 'Worker' in window;
            Environment.bravuraFontChecker.fontLoaded.on(this.onFontLoaded.bind(this));
            this.rootContainerBecameVisible = {
                on: (value) => {
                    if (this.rootContainer.isVisible) {
                        value();
                    }
                    else {
                        this._rootContainerBecameVisible.on(value);
                        if (this._visibilityCheckIntervalId === 0) {
                            this._visibilityCheckIntervalId = window.setInterval(() => {
                                if (this._api.container.isVisible) {
                                    window.clearInterval(this._visibilityCheckIntervalId);
                                    this._visibilityCheckIntervalId = 0;
                                    this._rootContainerBecameVisible.trigger();
                                }
                            }, this._visibilityCheckInterval);
                        }
                    }
                },
                off: (value) => {
                    this._rootContainerBecameVisible.off(value);
                }
            };
        }
        get resizeThrottle() {
            return 10;
        }
        get canRender() {
            return this.areAllFontsLoaded();
        }
        areAllFontsLoaded() {
            Environment.bravuraFontChecker.checkForFontAvailability();
            if (!Environment.bravuraFontChecker.isFontLoaded) {
                return false;
            }
            for (let kvp of this._fontCheckers) {
                let checker = kvp[1];
                if (!checker.isFontLoaded) {
                    return false;
                }
            }
            Logger.debug('Font', 'All fonts loaded: ' + this._fontCheckers.size);
            return true;
        }
        onFontLoaded(family) {
            FontSizes.generateFontLookup(family);
            if (this.areAllFontsLoaded()) {
                this.canRenderChanged.trigger();
            }
        }
        createWorkerRenderer() {
            return new AlphaTabWorkerScoreRenderer(this._api, this._api.settings);
        }
        initialize(api, raw) {
            this._api = api;
            let settings = new Settings();
            settings.fillFromJson(raw);
            let dataAttributes = this.getDataAttributes();
            settings.fillFromDataAttributes(dataAttributes);
            if (settings.notation.notationMode === exports.NotationMode.SongBook) {
                settings.setSongBookModeSettings();
            }
            api.settings = settings;
            if (settings.core.engine === 'default' || settings.core.engine === 'svg') {
                api.container.scroll.on(this.showSvgsInViewPort.bind(this));
                api.container.resize.on(this.showSvgsInViewPort.bind(this));
            }
            this.setupFontCheckers(settings);
            // get track data to parse
            let tracksData;
            let options = raw;
            if (options && options.tracks) {
                tracksData = options.tracks;
            }
            else {
                if (dataAttributes.has('tracks')) {
                    tracksData = dataAttributes.get('tracks');
                }
                else {
                    tracksData = 0;
                }
            }
            this._initialTrackIndexes = this.parseTracks(tracksData);
            this._contents = '';
            let element = api.container;
            if (dataAttributes.has('tex') && element.element.innerText) {
                this._contents = element.element.innerHTML;
                element.element.innerHTML = '';
            }
            this.createStyleElement(settings);
            if (options && options.file) {
                this._file = options.file;
            }
            else if (dataAttributes.has('file')) {
                this._file = dataAttributes.get('file');
            }
            this._visibilityCheckInterval = 500;
            if (options && options.visibilityCheckInterval) {
                this._visibilityCheckInterval = options.visibilityCheckInterval;
            }
        }
        setupFontCheckers(settings) {
            this.registerFontChecker(settings.display.resources.copyrightFont);
            this.registerFontChecker(settings.display.resources.effectFont);
            this.registerFontChecker(settings.display.resources.fingeringFont);
            this.registerFontChecker(settings.display.resources.graceFont);
            this.registerFontChecker(settings.display.resources.markerFont);
            this.registerFontChecker(settings.display.resources.tablatureFont);
            this.registerFontChecker(settings.display.resources.titleFont);
            this.registerFontChecker(settings.display.resources.wordsFont);
            this.registerFontChecker(settings.display.resources.barNumberFont);
            this.registerFontChecker(settings.display.resources.fretboardNumberFont);
            this.registerFontChecker(settings.display.resources.subTitleFont);
        }
        registerFontChecker(font) {
            if (!this._fontCheckers.has(font.family)) {
                let checker = new FontLoadingChecker(font.family);
                this._fontCheckers.set(font.family, checker);
                checker.fontLoaded.on(this.onFontLoaded.bind(this));
                checker.checkForFontAvailability();
            }
        }
        destroy() {
            this.rootContainer.element.innerHTML = '';
        }
        createCanvasElement() {
            let canvasElement = document.createElement('div');
            canvasElement.className = 'at-surface';
            canvasElement.style.fontSize = '0';
            canvasElement.style.overflow = 'hidden';
            canvasElement.style.lineHeight = '0';
            return new HtmlElementContainer(canvasElement);
        }
        triggerEvent(container, name, details = null, originalEvent) {
            let element = container.element;
            name = 'alphaTab.' + name;
            let e = document.createEvent('CustomEvent');
            let originalMouseEvent = originalEvent
                ? originalEvent.mouseEvent
                : null;
            e.initCustomEvent(name, false, false, details);
            if (originalMouseEvent) {
                e.originalEvent = originalMouseEvent;
            }
            element.dispatchEvent(e);
            if (window && 'jQuery' in window) {
                let jquery = window['jQuery'];
                let args = [];
                args.push(details);
                if (originalMouseEvent) {
                    args.push(originalMouseEvent);
                }
                jquery(element).trigger(name, args);
            }
        }
        load(data, success, error) {
            if (data instanceof Score) {
                success(data);
                return true;
            }
            if (data instanceof ArrayBuffer) {
                let byteArray = new Uint8Array(data);
                success(ScoreLoader.loadScoreFromBytes(byteArray, this._api.settings));
                return true;
            }
            if (data instanceof Uint8Array) {
                success(ScoreLoader.loadScoreFromBytes(data, this._api.settings));
                return true;
            }
            if (typeof data === 'string') {
                ScoreLoader.loadScoreAsync(data, success, error, this._api.settings);
                return true;
            }
            return false;
        }
        loadSoundFont(data) {
            if (!this._api.player) {
                return false;
            }
            if (data instanceof ArrayBuffer) {
                this._api.player.loadSoundFont(new Uint8Array(data));
                return true;
            }
            if (data instanceof Uint8Array) {
                this._api.player.loadSoundFont(data);
                return true;
            }
            if (typeof data === 'string') {
                this._api.loadSoundFontFromUrl(data);
                return true;
            }
            return false;
        }
        initialRender() {
            this._api.renderer.preRender.on((_) => {
                this._totalResultCount = 0;
            });
            this.rootContainerBecameVisible.on(() => {
                // rendering was possibly delayed due to invisible element
                // in this case we need the correct width for autosize
                this._api.renderer.width = this.rootContainer.width | 0;
                this._api.renderer.updateSettings(this._api.settings);
                if (this._contents) {
                    this._api.tex(this._contents);
                }
                else if (this._file) {
                    ScoreLoader.loadScoreAsync(this._file, s => {
                        var _a;
                        this._api.renderScore(s, (_a = this._initialTrackIndexes) !== null && _a !== void 0 ? _a : undefined);
                        this._initialTrackIndexes = null;
                    }, e => {
                        this._api.onError(e);
                    }, this._api.settings);
                }
            });
        }
        showSvgsInViewPort() {
            let placeholders = this._api.canvasElement.element.querySelectorAll('[data-lazy=true]');
            for (let i = 0; i < placeholders.length; i++) {
                let placeholder = placeholders.item(i);
                if (this.isElementInViewPort(placeholder)) {
                    placeholder.outerHTML = placeholder['svg'];
                }
            }
        }
        isElementInViewPort(element) {
            let rect = element.getBoundingClientRect();
            return (rect.top + rect.height >= 0 &&
                rect.top <= window.innerHeight &&
                rect.left + rect.width >= 0 &&
                rect.left <= window.innerWidth);
        }
        createStyleElement(settings) {
            let elementDocument = this._api.container.element.ownerDocument;
            Environment.createStyleElement(elementDocument, settings.core.fontDirectory);
        }
        parseTracks(tracksData) {
            if (!tracksData) {
                return [];
            }
            let tracks = [];
            // decode string
            if (typeof tracksData === 'string') {
                try {
                    if (tracksData === 'all') {
                        return [-1];
                    }
                    tracksData = JSON.parse(tracksData);
                }
                catch (e) {
                    tracksData = [0];
                }
            }
            // decode array
            if (typeof tracksData === 'number') {
                tracks.push(tracksData);
            }
            else if ('length' in tracksData) {
                let length = tracksData.length;
                let array = tracksData;
                for (let i = 0; i < length; i++) {
                    let item = array[i];
                    let value = 0;
                    if (typeof item === 'number') {
                        value = item;
                    }
                    else if ('index' in item) {
                        value = item.index;
                    }
                    else {
                        value = parseInt(item.toString());
                    }
                    if (value >= 0) {
                        tracks.push(value);
                    }
                }
            }
            else if ('index' in tracksData) {
                tracks.push(tracksData.index);
            }
            return tracks;
        }
        getDataAttributes() {
            let dataAttributes = new Map();
            let element = this._api.container.element;
            if (element.dataset) {
                for (let key of Object.keys(element.dataset)) {
                    let value = element.dataset[key];
                    try {
                        let stringValue = value;
                        value = JSON.parse(stringValue);
                    }
                    catch (e) {
                        if (value === '') {
                            value = null;
                        }
                    }
                    dataAttributes.set(key, value);
                }
            }
            else {
                for (let i = 0; i < element.attributes.length; i++) {
                    let attr = element.attributes.item(i);
                    let nodeName = attr.nodeName;
                    if (nodeName.startsWith('data-')) {
                        let keyParts = nodeName.substr(5).split('-');
                        let key = keyParts[0];
                        for (let j = 1; j < keyParts.length; j++) {
                            key += keyParts[j].substr(0, 1).toUpperCase() + keyParts[j].substr(1);
                        }
                        let value = attr.nodeValue;
                        try {
                            value = JSON.parse(value);
                        }
                        catch (e) {
                            if (value === '') {
                                value = null;
                            }
                        }
                        dataAttributes.set(key, value);
                    }
                }
            }
            return dataAttributes;
        }
        beginAppendRenderResults(renderResult) {
            window.setTimeout(() => {
                let canvasElement = this._api.canvasElement.element;
                // null result indicates that the rendering finished
                if (!renderResult) {
                    // so we remove elements that might be from a previous render session
                    while (canvasElement.childElementCount > this._totalResultCount) {
                        canvasElement.removeChild(canvasElement.lastChild);
                    }
                    // directly show the elements in the viewport once we're done.
                    if (this._api.settings.core.enableLazyLoading) {
                        this.showSvgsInViewPort();
                    }
                }
                else {
                    let body = renderResult.renderResult;
                    if (typeof body === 'string') {
                        let placeholder;
                        if (this._totalResultCount < canvasElement.childElementCount) {
                            placeholder = canvasElement.childNodes.item(this._totalResultCount);
                        }
                        else {
                            placeholder = document.createElement('div');
                            canvasElement.appendChild(placeholder);
                        }
                        placeholder.style.width = renderResult.width + 'px';
                        placeholder.style.height = renderResult.height + 'px';
                        placeholder.style.display = 'inline-block';
                        if (this.isElementInViewPort(placeholder) || !this._api.settings.core.enableLazyLoading) {
                            placeholder.outerHTML = body;
                        }
                        else {
                            placeholder['svg'] = body;
                            placeholder.setAttribute('data-lazy', 'true');
                        }
                    }
                    else {
                        if (this._totalResultCount < canvasElement.childElementCount) {
                            canvasElement.replaceChild(renderResult.renderResult, canvasElement.childNodes.item(this._totalResultCount));
                        }
                        else {
                            canvasElement.appendChild(renderResult.renderResult);
                        }
                    }
                    this._totalResultCount++;
                }
            }, 1);
        }
        /**
         * This method creates the player. It detects browser compatibility and
         * initializes a alphaSynth version for the client.
         */
        createWorkerPlayer() {
            let supportsWebAudio = 'ScriptProcessorNode' in window;
            let alphaSynthScriptFile = Environment.scriptFile;
            if (!alphaSynthScriptFile) {
                Logger.error('Player', 'alphaTab script file could not be detected, player cannot initialize');
                return null;
            }
            let player = null;
            if (supportsWebAudio) {
                Logger.info('Player', 'Will use webworkers for synthesizing and web audio api for playback');
                player = new AlphaSynthWebWorkerApi(new AlphaSynthWebAudioOutput(), alphaSynthScriptFile, this._api.settings.core.logLevel);
            }
            if (!player) {
                Logger.error('Player', 'Player requires webworkers and web audio api, browser unsupported', null);
            }
            else {
                player.ready.on(() => {
                    if (this._api.settings.player.soundFont) {
                        this._api.loadSoundFontFromUrl(this._api.settings.player.soundFont);
                    }
                });
            }
            return player;
        }
        beginInvoke(action) {
            window.requestAnimationFrame(() => {
                action();
            });
        }
        highlightElements(groupId) {
            let element = this._api.container.element;
            let elementsToHighlight = element.getElementsByClassName(groupId);
            for (let i = 0; i < elementsToHighlight.length; i++) {
                elementsToHighlight.item(i).classList.add('at-highlight');
            }
        }
        removeHighlights() {
            let element = this._api.container.element;
            let elements = element.getElementsByClassName('at-highlight');
            while (elements.length > 0) {
                elements.item(0).classList.remove('at-highlight');
            }
        }
        destroyCursors() {
            let element = this._api.container.element;
            let cursorWrapper = element.querySelector('.at-cursors');
            element.removeChild(cursorWrapper);
        }
        createCursors() {
            let element = this._api.container.element;
            let cursorWrapper = document.createElement('div');
            cursorWrapper.classList.add('at-cursors');
            let selectionWrapper = document.createElement('div');
            selectionWrapper.classList.add('at-selection');
            let barCursor = document.createElement('div');
            barCursor.classList.add('at-cursor-bar');
            let beatCursor = document.createElement('div');
            beatCursor.classList.add('at-cursor-beat');
            // required css styles
            element.style.position = 'relative';
            element.style.textAlign = 'left';
            cursorWrapper.style.position = 'absolute';
            cursorWrapper.style.zIndex = '1000';
            cursorWrapper.style.display = 'inline';
            cursorWrapper.style.pointerEvents = 'none';
            selectionWrapper.style.position = 'absolute';
            barCursor.style.position = 'absolute';
            beatCursor.style.position = 'absolute';
            beatCursor.style.transition = 'all 0s linear';
            // add cursors to UI
            element.insertBefore(cursorWrapper, element.firstChild);
            cursorWrapper.appendChild(selectionWrapper);
            cursorWrapper.appendChild(barCursor);
            cursorWrapper.appendChild(beatCursor);
            return new Cursors(new HtmlElementContainer(cursorWrapper), new HtmlElementContainer(barCursor), new HtmlElementContainer(beatCursor), new HtmlElementContainer(selectionWrapper));
        }
        getOffset(scrollContainer, container) {
            let element = container.element;
            let bounds = element.getBoundingClientRect();
            let top = bounds.top + element.ownerDocument.defaultView.pageYOffset;
            let left = bounds.left + element.ownerDocument.defaultView.pageXOffset;
            if (scrollContainer) {
                let scrollElement = scrollContainer.element;
                let nodeName = scrollElement.nodeName.toLowerCase();
                if (nodeName !== 'html' && nodeName !== 'body') {
                    let scrollElementOffset = this.getOffset(null, scrollContainer);
                    top = top + scrollElement.scrollTop - scrollElementOffset.y;
                    left = left + scrollElement.scrollLeft - scrollElementOffset.x;
                }
            }
            let b = new Bounds();
            b.x = left;
            b.y = top;
            b.w = bounds.width;
            b.h = bounds.height;
            return b;
        }
        getScrollContainer() {
            let scrollElement = 
            // tslint:disable-next-line: strict-type-predicates
            typeof this._api.settings.player.scrollElement === 'string'
                ? document.querySelector(this._api.settings.player.scrollElement)
                : this._api.settings.player.scrollElement;
            let nodeName = scrollElement.nodeName.toLowerCase();
            if (nodeName === 'html' || nodeName === 'body') {
                // Some mobile browsers cannot scroll on html, we must scroll on body instead
                // http://blog.jonathanargentiero.com/jquery-scrolltop-not-working-on-mobile-devices-iphone-ipad-android-phones/
                // https://github.com/CoderLine/alphaTab/issues/205
                let userAgent = navigator.userAgent;
                scrollElement = userAgent.match('((iPod|iPhone|iPad|Android))') ? document.body : document.documentElement;
            }
            return new HtmlElementContainer(scrollElement);
        }
        createSelectionElement() {
            let element = document.createElement('div');
            element.style.position = 'absolute';
            return new HtmlElementContainer(element);
        }
        scrollToY(element, scrollTargetY, speed) {
            this.internalScrollToY(element.element, scrollTargetY, speed);
        }
        scrollToX(element, scrollTargetY, speed) {
            this.internalScrollToX(element.element, scrollTargetY, speed);
        }
        internalScrollToY(element, scrollTargetY, speed) {
            let startY = element.scrollTop;
            let diff = scrollTargetY - startY;
            let start = 0;
            let step = (x) => {
                if (start === 0) {
                    start = x;
                }
                let time = x - start;
                let percent = Math.min(time / speed, 1);
                element.scrollTop = (startY + diff * percent) | 0;
                if (time < speed) {
                    window.requestAnimationFrame(step);
                }
            };
            window.requestAnimationFrame(step);
        }
        internalScrollToX(element, scrollTargetX, speed) {
            let startX = element.scrollLeft;
            let diff = scrollTargetX - startX;
            let start = 0;
            let step = (t) => {
                if (start === 0) {
                    start = t;
                }
                let time = t - start;
                let percent = Math.min(time / speed, 1);
                element.scrollLeft = (startX + diff * percent) | 0;
                if (time < speed) {
                    window.requestAnimationFrame(step);
                }
            };
            window.requestAnimationFrame(step);
        }
    }

    /**
     * @target web
     */
    class AlphaTabApi extends AlphaTabApiBase {
        constructor(element, options) {
            super(new BrowserUiFacade(element), options);
            this.soundFontLoad = new EventEmitterOfT();
        }
        tex(tex, tracks) {
            let browser = this.uiFacade;
            super.tex(tex, browser.parseTracks(tracks));
        }
        print(width) {
            // prepare a popup window for printing (a4 width, window height, centered)
            let preview = window.open('', '', 'width=0,height=0');
            let a4 = preview.document.createElement('div');
            if (width) {
                a4.style.width = width;
            }
            else {
                if (this.settings.display.layoutMode === exports.LayoutMode.Horizontal) {
                    a4.style.width = '297mm';
                }
                else {
                    a4.style.width = '210mm';
                }
            }
            preview.document.write('<!DOCTYPE html><html></head><body></body></html>');
            preview.document.body.appendChild(a4);
            let dualScreenLeft = typeof window['screenLeft'] !== 'undefined'
                ? window['screenLeft']
                : window['left'];
            let dualScreenTop = typeof window['screenTop'] !== 'undefined' ? window['screenTop'] : window['top'];
            let screenWidth = "innerWidth" in window
                ? window.innerWidth
                : "clientWidth" in document.documentElement
                    ? document.documentElement.clientWidth
                    : window.screen.width;
            let screenHeight = "innerHeight" in window
                ? window.innerHeight
                : "clientHeight" in document.documentElement
                    ? document.documentElement.clientHeight
                    : window.screen.height;
            let w = a4.offsetWidth + 50;
            let h = window.innerHeight;
            let left = ((screenWidth / 2) | 0) - ((w / 2) | 0) + dualScreenLeft;
            let top = ((screenHeight / 2) | 0) - ((h / 2) | 0) + dualScreenTop;
            preview.resizeTo(w, h);
            preview.moveTo(left, top);
            preview.focus();
            // render alphaTab
            let settings = new Settings();
            settings.core.scriptFile = this.settings.core.scriptFile;
            settings.core.fontDirectory = this.settings.core.fontDirectory;
            settings.core.enableLazyLoading = false;
            settings.core.useWorkers = false;
            settings.display.scale = 0.8;
            settings.display.stretchForce = 0.8;
            let alphaTab = new AlphaTabApi(a4, settings);
            alphaTab.renderer.postRenderFinished.on(() => {
                alphaTab.canvasElement.height = -1;
                preview.print();
            });
            alphaTab.renderTracks(this.tracks);
        }
        downloadMidi() {
            if (!this.score) {
                return;
            }
            let midiFile = new MidiFile();
            let handler = new AlphaSynthMidiFileHandler(midiFile);
            let generator = new MidiFileGenerator(this.score, this.settings, handler);
            generator.generate();
            let binary = midiFile.toBinary();
            let fileName = !this.score.title ? 'File.mid' : `${this.score.title}.mid`;
            let dlLink = document.createElement('a');
            dlLink.download = fileName;
            let blob = new Blob([binary], {
                type: 'audio/midi'
            });
            let url = URL.createObjectURL(blob);
            dlLink.href = url;
            dlLink.style.display = 'none';
            document.body.appendChild(dlLink);
            dlLink.click();
            document.body.removeChild(dlLink);
        }
        changeTrackMute(tracks, mute) {
            let trackList = this.trackIndexesToTracks(this.uiFacade.parseTracks(tracks));
            super.changeTrackMute(trackList, mute);
        }
        changeTrackSolo(tracks, solo) {
            let trackList = this.trackIndexesToTracks(this.uiFacade.parseTracks(tracks));
            super.changeTrackSolo(trackList, solo);
        }
        changeTrackVolume(tracks, volume) {
            let trackList = this.trackIndexesToTracks(this.uiFacade.parseTracks(tracks));
            super.changeTrackVolume(trackList, volume);
        }
        trackIndexesToTracks(trackIndexes) {
            if (!this.score) {
                return [];
            }
            let tracks = [];
            if (trackIndexes.length === 1 && trackIndexes[0] === -1) {
                for (let track of this.score.tracks) {
                    tracks.push(track);
                }
            }
            else {
                for (let index of trackIndexes) {
                    if (index >= 0 && index < this.score.tracks.length) {
                        tracks.push(this.score.tracks[index]);
                    }
                }
            }
            return tracks;
        }
        addSoundFontLoad(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)');
            this.soundFontLoad.on(value);
        }
        removeSoundFontLoad(value) {
            Logger.warning('API', 'Registering events via add<Name>/remove<Name> is deprecated, use <name>.on(..)/<name>.off(..)');
            this.soundFontLoad.off(value);
        }
        loadSoundFontFromUrl(url) {
            if (!this.player) {
                return;
            }
            this.player.loadSoundFontFromUrl(url, this.soundFontLoad.trigger.bind(this.soundFontLoad));
        }
    }

    /**
     * @target web
     */
    class JQueryAlphaTab {
        constructor() {
            this._initListeners = [];
        }
        exec(element, method, args) {
            if (typeof method !== 'string') {
                args = [method];
                method = 'init';
            }
            if (method.charCodeAt(0) === 95 || method === 'exec') {
                return null;
            }
            let jElement = new jQuery(element);
            let context = jElement.data('alphaTab');
            if (method === 'destroy' && !context) {
                return null;
            }
            if (method !== 'init' && !context) {
                throw new Error('alphaTab not initialized');
            }
            let apiMethod = this[method];
            if (apiMethod) {
                let realArgs = [jElement, context].concat(args);
                return apiMethod.apply(this, realArgs);
            }
            else {
                Logger.error('Api', "Method '" + method + "' does not exist on jQuery.alphaTab");
                return null;
            }
        }
        init(element, context, options) {
            if (!context) {
                context = new AlphaTabApi(element[0], options);
                element.data('alphaTab', context);
                for (let listener of this._initListeners) {
                    listener(element, context, options);
                }
            }
        }
        destroy(element, context) {
            element.removeData('alphaTab');
            context.destroy();
        }
        print(element, context, width) {
            context.print(width);
        }
        load(element, context, data, tracks) {
            return context.load(data, tracks);
        }
        render(element, context) {
            context.render();
        }
        renderScore(element, context, score, tracks) {
            context.renderScore(score, tracks);
        }
        renderTracks(element, context, tracks) {
            context.renderTracks(tracks);
        }
        invalidate(element, context) {
            context.render();
        }
        tex(element, context, tex, tracks) {
            context.tex(tex, tracks);
        }
        muteTrack(element, context, tracks, mute) {
            context.changeTrackMute(tracks, mute);
        }
        soloTrack(element, context, tracks, solo) {
            context.changeTrackSolo(tracks, solo);
        }
        trackVolume(element, context, tracks, volume) {
            context.changeTrackVolume(tracks, volume);
        }
        loadSoundFont(element, context, value) {
            context.loadSoundFont(value);
        }
        pause(element, context) {
            context.pause();
        }
        play(element, context) {
            return context.play();
        }
        playPause(element, context) {
            context.playPause();
        }
        stop(element, context) {
            context.stop();
        }
        api(element, context) {
            return context;
        }
        player(element, context) {
            return context.player;
        }
        isReadyForPlayback(element, context) {
            return context.isReadyForPlayback;
        }
        playerState(element, context) {
            return context.playerState;
        }
        masterVolume(element, context, masterVolume) {
            if (typeof masterVolume === 'number') {
                context.masterVolume = masterVolume;
            }
            return context.masterVolume;
        }
        metronomeVolume(element, context, metronomeVolume) {
            if (typeof metronomeVolume === 'number') {
                context.metronomeVolume = metronomeVolume;
            }
            return context.metronomeVolume;
        }
        playbackSpeed(element, context, playbackSpeed) {
            if (typeof playbackSpeed === 'number') {
                context.playbackSpeed = playbackSpeed;
            }
            return context.playbackSpeed;
        }
        tickPosition(element, context, tickPosition) {
            if (typeof tickPosition === 'number') {
                context.tickPosition = tickPosition;
            }
            return context.tickPosition;
        }
        timePosition(element, context, timePosition) {
            if (typeof timePosition === 'number') {
                context.timePosition = timePosition;
            }
            return context.timePosition;
        }
        loop(element, context, loop) {
            if (typeof loop === 'boolean') {
                context.isLooping = loop;
            }
            return context.isLooping;
        }
        renderer(element, context) {
            return context.renderer;
        }
        score(element, context) {
            return context.score;
        }
        settings(element, context) {
            return context.settings;
        }
        tracks(element, context) {
            return context.tracks;
        }
        _oninit(listener) {
            this._initListeners.push(listener);
        }
        static restore(selector) {
            new jQuery(selector).empty().removeData('alphaTab');
        }
    }

    /**
     * A canvas implementation storing SVG data
     */
    class SvgCanvas {
        constructor() {
            this.buffer = '';
            this._currentPath = '';
            this._currentPathIsEmpty = true;
            this.color = new Color(255, 255, 255, 0xff);
            this.lineWidth = 1;
            this.font = new Font('Arial', 10, FontStyle.Plain);
            this.textAlign = TextAlign.Left;
            this.textBaseline = TextBaseline.Top;
        }
        beginRender(width, height) {
            this.buffer = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="${width | 0}px" height="${height | 0}px" class="at-surface-svg">\n`;
            this._currentPath = '';
            this._currentPathIsEmpty = true;
        }
        beginGroup(identifier) {
            this.buffer += `<g class="${identifier}">`;
        }
        endGroup() {
            this.buffer += '</g>';
        }
        endRender() {
            this.buffer += '</svg>';
            return this.buffer;
        }
        fillRect(x, y, w, h) {
            if (w > 0) {
                this.buffer += `<rect x="${x | 0}" y="${y | 0}" width="${w}" height="${h}" fill="${this.color.rgba}" />\n`;
            }
        }
        strokeRect(x, y, w, h) {
            this.buffer += `<rect x="${x | 0}" y="${y | 0}" width="${w}" height="${h}" stroke="${this.color.rgba}"`;
            if (this.lineWidth !== 1) {
                this.buffer += ` stroke-width="${this.lineWidth}"`;
            }
            this.buffer += ' fill="transparent" />\n';
        }
        beginPath() {
            // nothing to do
        }
        closePath() {
            this._currentPath += ' z';
        }
        moveTo(x, y) {
            this._currentPath += ` M${x},${y}`;
        }
        lineTo(x, y) {
            this._currentPathIsEmpty = false;
            this._currentPath += ` L${x},${y}`;
        }
        quadraticCurveTo(cpx, cpy, x, y) {
            this._currentPathIsEmpty = false;
            this._currentPath += ` Q${cpx},${cpy},${x},${y}`;
        }
        bezierCurveTo(cp1X, cp1Y, cp2X, cp2Y, x, y) {
            this._currentPathIsEmpty = false;
            this._currentPath += ` C${cp1X},${cp1Y},${cp2X},${cp2Y},${x},${y}`;
        }
        fillCircle(x, y, radius) {
            this._currentPathIsEmpty = false;
            //
            // M0,250 A1,1 0 0,0 500,250 A1,1 0 0,0 0,250 z
            this._currentPath += ` M${x - radius},${y} A1,1 0 0,0 ${x + radius},${y} A1,1 0 0,0 ${x - radius},${y} z`;
            this.fill();
        }
        fill() {
            if (!this._currentPathIsEmpty) {
                this.buffer += `<path d="${this._currentPath}"`;
                if (this.color.rgba !== '#000000') {
                    this.buffer += ` fill="${this.color.rgba}"`;
                }
                this.buffer += ' style="stroke: none"/>';
            }
            this._currentPath = '';
            this._currentPathIsEmpty = true;
        }
        stroke() {
            if (!this._currentPathIsEmpty) {
                let s = `<path d="${this._currentPath}" stroke="${this.color.rgba}"`;
                if (this.lineWidth !== 1) {
                    s += ` stroke-width="${this.lineWidth}"`;
                }
                s += ' style="fill: none" />';
                this.buffer += s;
            }
            this._currentPath = '';
            this._currentPathIsEmpty = true;
        }
        fillText(text, x, y) {
            if (text === '') {
                return;
            }
            let s = `<text x="${x | 0}" y="${y | 0}" style="stroke: none; font:${this.font.toCssString(this.settings.display.scale)}"  dominant-baseline="${this.getSvgBaseLine()}"`;
            if (this.color.rgba !== '#000000') {
                s += ` fill="${this.color.rgba}"`;
            }
            if (this.textAlign !== TextAlign.Left) {
                s += ` text-anchor="${this.getSvgTextAlignment(this.textAlign)}"`;
            }
            s += `>${text}</text>`;
            this.buffer += s;
        }
        getSvgTextAlignment(textAlign) {
            switch (textAlign) {
                case TextAlign.Left:
                    return 'start';
                case TextAlign.Center:
                    return 'middle';
                case TextAlign.Right:
                    return 'end';
            }
            return '';
        }
        getSvgBaseLine() {
            switch (this.textBaseline) {
                case TextBaseline.Top:
                    return 'hanging';
                case TextBaseline.Middle:
                    return 'middle';
                case TextBaseline.Bottom:
                    return 'bottom';
                default:
                    return '';
            }
        }
        measureText(text) {
            if (!text) {
                return 0;
            }
            return FontSizes.measureString(text, this.font.family, this.font.size, this.font.style);
        }
        onRenderFinished() {
            // nothing to do
            return null;
        }
        beginRotate(centerX, centerY, angle) {
            this.buffer += '<g transform="translate(' + centerX + ' ,' + centerY + ') rotate( ' + angle + ')">';
        }
        endRotate() {
            this.buffer += '</g>';
        }
    }

    /**
     * This SVG canvas renders the music symbols by adding a CSS class 'at' to all elements.
     */
    class CssFontSvgCanvas extends SvgCanvas {
        constructor() {
            super();
        }
        fillMusicFontSymbol(x, y, scale, symbol, centerAtPosition = false) {
            if (symbol === MusicFontSymbol.None) {
                return;
            }
            this.fillMusicFontSymbolText(x, y, scale, `&#${symbol};`, centerAtPosition);
        }
        fillMusicFontSymbols(x, y, scale, symbols, centerAtPosition = false) {
            let s = '';
            for (let symbol of symbols) {
                if (symbol !== MusicFontSymbol.None) {
                    s += `&#${symbol};`;
                }
            }
            this.fillMusicFontSymbolText(x, y, scale, s, centerAtPosition);
        }
        fillMusicFontSymbolText(x, y, scale, symbols, centerAtPosition = false) {
            this.buffer += `<g transform="translate(${(x | 0) - 0} ${(y | 0) - 0})" class="at" ><text`;
            if (scale !== 1) {
                this.buffer += ` style="font-size: ${scale * 100}%; stroke:none"`;
            }
            else {
                this.buffer += ' style="stroke:none"';
            }
            if (this.color.rgba !== '#000000') {
                this.buffer += ` fill="${this.color.rgba}"`;
            }
            if (centerAtPosition) {
                this.buffer += ' text-anchor="' + this.getSvgTextAlignment(TextAlign.Center) + '"';
            }
            this.buffer += `>${symbols}</text></g>`;
        }
    }

    /**
     * This is the base public class for creating factories providing BarRenderers
     */
    class BarRendererFactory {
        constructor() {
            this.isInAccolade = true;
            this.isRelevantForBoundsLookup = true;
            this.hideOnMultiTrack = false;
            this.hideOnPercussionTrack = false;
        }
        canCreate(track, staff) {
            return !this.hideOnPercussionTrack || !staff.isPercussion;
        }
    }

    /**
     * Lists the different position modes for {@link BarRendererBase.getBeatX}
     */
    var BeatXPosition;
    (function (BeatXPosition) {
        /**
         * Gets the pre-notes position which is located before the accidentals
         */
        BeatXPosition[BeatXPosition["PreNotes"] = 0] = "PreNotes";
        /**
         * Gets the on-notes position which is located after the accidentals but before the note heads.
         */
        BeatXPosition[BeatXPosition["OnNotes"] = 1] = "OnNotes";
        /**
         * Gets the middel-notes position which is located after in the middle the note heads.
         */
        BeatXPosition[BeatXPosition["MiddleNotes"] = 2] = "MiddleNotes";
        /**
         * Get the post-notes position which is located at after the note heads.
         */
        BeatXPosition[BeatXPosition["PostNotes"] = 3] = "PostNotes";
        /**
         * Get the end-beat position which is located at the end of the beat. This position is almost
         * equal to the pre-notes position of the next beat.
         */
        BeatXPosition[BeatXPosition["EndBeat"] = 4] = "EndBeat";
    })(BeatXPosition || (BeatXPosition = {}));

    /**
     * This glyph allows to group several other glyphs to be
     * drawn at the same x position
     */
    class GlyphGroup extends Glyph {
        constructor(x, y) {
            super(x, y);
            this.glyphs = null;
        }
        get isEmpty() {
            return !this.glyphs || this.glyphs.length === 0;
        }
        doLayout() {
            if (!this.glyphs || this.glyphs.length === 0) {
                this.width = 0;
                return;
            }
            let w = 0;
            for (let i = 0, j = this.glyphs.length; i < j; i++) {
                let g = this.glyphs[i];
                g.renderer = this.renderer;
                g.doLayout();
                w = Math.max(w, g.width);
            }
            this.width = w;
        }
        addGlyph(g) {
            if (!this.glyphs) {
                this.glyphs = [];
            }
            this.glyphs.push(g);
        }
        paint(cx, cy, canvas) {
            let glyphs = this.glyphs;
            if (!glyphs || glyphs.length === 0) {
                return;
            }
            for (let g of glyphs) {
                g.paint(cx + this.x, cy + this.y, canvas);
            }
        }
    }

    class LeftToRightLayoutingGlyphGroup extends GlyphGroup {
        constructor() {
            super(0, 0);
            this.glyphs = [];
        }
        addGlyph(g) {
            g.x =
                this.glyphs.length === 0
                    ? 0
                    : this.glyphs[this.glyphs.length - 1].x + this.glyphs[this.glyphs.length - 1].width;
            g.renderer = this.renderer;
            g.doLayout();
            this.width = g.x + g.width;
            super.addGlyph(g);
        }
    }

    /**
     * This glyph acts as container for handling
     * multiple voice rendering
     */
    class VoiceContainerGlyph extends GlyphGroup {
        constructor(x, y, voice) {
            super(x, y);
            this.minWidth = 0;
            this.voice = voice;
            this.beatGlyphs = [];
            this.tupletGroups = [];
        }
        scaleToWidth(width) {
            let force = this.renderer.layoutingInfo.spaceToForce(width);
            this.scaleToForce(force);
        }
        scaleToForce(force) {
            this.width = this.renderer.layoutingInfo.calculateVoiceWidth(force);
            let positions = this.renderer.layoutingInfo.buildOnTimePositions(force);
            let beatGlyphs = this.beatGlyphs;
            for (let i = 0, j = beatGlyphs.length; i < j; i++) {
                let currentBeatGlyph = beatGlyphs[i];
                let time = currentBeatGlyph.beat.absoluteDisplayStart;
                currentBeatGlyph.x = positions.get(time) - currentBeatGlyph.onTimeX;
                // size always previousl glyph after we know the position
                // of the next glyph
                if (i > 0) {
                    let beatWidth = currentBeatGlyph.x - beatGlyphs[i - 1].x;
                    beatGlyphs[i - 1].scaleToWidth(beatWidth);
                }
                // for the last glyph size based on the full width
                if (i === j - 1) {
                    let beatWidth = this.width - beatGlyphs[beatGlyphs.length - 1].x;
                    currentBeatGlyph.scaleToWidth(beatWidth);
                }
            }
        }
        registerLayoutingInfo(info) {
            info.updateVoiceSize(this.width);
            let beatGlyphs = this.beatGlyphs;
            for (let b of beatGlyphs) {
                b.registerLayoutingInfo(info);
            }
        }
        applyLayoutingInfo(info) {
            let beatGlyphs = this.beatGlyphs;
            for (let b of beatGlyphs) {
                b.applyLayoutingInfo(info);
            }
            this.scaleToForce(Math.max(this.renderer.settings.display.stretchForce, info.minStretchForce));
        }
        addGlyph(g) {
            let bg = g;
            g.x =
                this.beatGlyphs.length === 0
                    ? 0
                    : this.beatGlyphs[this.beatGlyphs.length - 1].x + this.beatGlyphs[this.beatGlyphs.length - 1].width;
            g.renderer = this.renderer;
            g.doLayout();
            this.beatGlyphs.push(bg);
            this.width = g.x + g.width;
            if (bg.beat.hasTuplet && bg.beat.tupletGroup.beats[0].id === bg.beat.id) {
                this.tupletGroups.push(bg.beat.tupletGroup);
            }
        }
        doLayout() {
            this.minWidth = this.width;
        }
        // private static Random Random = new Random();
        paint(cx, cy, canvas) {
            // canvas.Color = Color.Random();
            // canvas.StrokeRect(cx + X, cy + Y, Width, 100);
            // if (Voice.Index===0)
            // {
            //    PaintSprings(cx + X, cy + Y, canvas);
            // }
            canvas.color =
                this.voice.index === 0
                    ? this.renderer.resources.mainGlyphColor
                    : this.renderer.resources.secondaryGlyphColor;
            for (let i = 0, j = this.beatGlyphs.length; i < j; i++) {
                this.beatGlyphs[i].paint(cx + this.x, cy + this.y, canvas);
            }
        }
    }
    VoiceContainerGlyph.KeySizeBeat = 'Beat';

    var BeamDirection;
    (function (BeamDirection) {
        BeamDirection[BeamDirection["Up"] = 0] = "Up";
        BeamDirection[BeamDirection["Down"] = 1] = "Down";
    })(BeamDirection || (BeamDirection = {}));

    class BeatLinePositions {
        constructor() {
            this.staffId = '';
            this.up = 0;
            this.down = 0;
            this.minNoteValue = 0;
            this.maxNoteValue = 0;
        }
    }

    /**
     * This public class helps drawing beams and bars for notes.
     */
    class BeamingHelper {
        constructor(staff) {
            this._beatLineXPositions = new Map();
            this.voice = null;
            this.beats = [];
            this.shortestDuration = Duration.QuadrupleWhole;
            /**
             * the number of fingering indicators that will be drawn
             */
            this.fingeringCount = 0;
            /**
             * an indicator whether any beat has a tuplet on it.
             */
            this.hasTuplet = false;
            /**
             * the first min note within this group
             */
            this.firstMinNoteValue = -1;
            /**
             * the first max note within this group
             */
            this.firstMaxNoteValue = -1;
            /**
             * the last min note within this group
             */
            this.lastMinNoteValue = -1;
            /**
             * the last max note within this group
             */
            this.lastMaxNoteValue = -1;
            /**
             * the overall min note value within this group.
             * This includes values caused by bends.
             */
            this.minNoteValue = -1;
            this.minNoteBeat = null;
            /**
             * the overall max note value within this group
             * This includes values caused by bends.
             */
            this.maxNoteValue = 0;
            this.maxNoteBeat = null;
            this.invertBeamDirection = false;
            this.isGrace = false;
            this.direction = BeamDirection.Up;
            this._staff = staff;
            this.beats = [];
        }
        getValue(n) {
            if (this._staff.isPercussion) {
                return PercussionMapper.mapNoteForDisplay(n.displayValue);
            }
            return n.displayValue;
        }
        getMaxValue(n) {
            let value = this.getValue(n);
            if (n.harmonicType !== HarmonicType.None && n.harmonicType !== HarmonicType.Natural) {
                value = n.realValue - this._staff.displayTranspositionPitch;
            }
            return value;
        }
        getMinValue(n) {
            return this.getValue(n);
        }
        getBeatLineX(beat) {
            if (this.hasBeatLineX(beat)) {
                if (this.direction === BeamDirection.Up) {
                    return this._beatLineXPositions.get(beat.index).up;
                }
                return this._beatLineXPositions.get(beat.index).down;
            }
            return 0;
        }
        hasBeatLineX(beat) {
            return this._beatLineXPositions.has(beat.index);
        }
        registerBeatLineX(staffId, beat, up, down) {
            let positions = this.getOrCreateBeatPositions(beat);
            positions.staffId = staffId;
            positions.up = up;
            positions.down = down;
        }
        getOrCreateBeatPositions(beat) {
            if (!this._beatLineXPositions.has(beat.index)) {
                this._beatLineXPositions.set(beat.index, new BeatLinePositions());
            }
            return this._beatLineXPositions.get(beat.index);
        }
        finish() {
            this.direction = this.calculateDirection();
        }
        calculateDirection() {
            if (!this.voice) {
                return BeamDirection.Up;
            }
            // multivoice handling
            if (this.voice.index > 0) {
                return this.invert(BeamDirection.Down);
            }
            if (this.voice.bar.voices.length > 1) {
                for (let v = 1; v < this.voice.bar.voices.length; v++) {
                    if (!this.voice.bar.voices[v].isEmpty) {
                        return this.invert(BeamDirection.Up);
                    }
                }
            }
            if (this.beats[0].graceType !== GraceType.None) {
                return this.invert(BeamDirection.Up);
            }
            // the average key is used for determination
            //      key lowerequal than middle line -> up
            //      key higher than middle line -> down
            let avg = ((this.maxNoteValue + this.minNoteValue) / 2) | 0;
            return this.invert(avg < BeamingHelper.ScoreMiddleKeys[this.beats[this.beats.length - 1].voice.bar.clef]
                ? BeamDirection.Up
                : BeamDirection.Down);
        }
        invert(direction) {
            if (!this.invertBeamDirection) {
                return direction;
            }
            switch (direction) {
                case BeamDirection.Down:
                    return BeamDirection.Up;
                case BeamDirection.Up:
                default:
                    return BeamDirection.Down;
            }
        }
        checkBeat(beat) {
            if (beat.invertBeamDirection) {
                this.invertBeamDirection = true;
            }
            if (!this.voice) {
                this.voice = beat.voice;
            }
            // allow adding if there are no beats yet
            let add = false;
            if (this.beats.length === 0) {
                add = true;
            }
            else if (BeamingHelper.canJoin(this.beats[this.beats.length - 1], beat)) {
                add = true;
            }
            if (add) {
                this.beats.push(beat);
                if (beat.graceType !== GraceType.None) {
                    this.isGrace = true;
                }
                let positions = this.getOrCreateBeatPositions(beat);
                if (beat.hasTuplet) {
                    this.hasTuplet = true;
                }
                let fingeringCount = 0;
                for (let n = 0; n < beat.notes.length; n++) {
                    let note = beat.notes[n];
                    if (note.leftHandFinger !== Fingers.Unknown || note.rightHandFinger !== Fingers.Unknown) {
                        fingeringCount++;
                    }
                }
                if (fingeringCount > this.fingeringCount) {
                    this.fingeringCount = fingeringCount;
                }
                this.lastMinNoteValue = -1;
                this.lastMaxNoteValue = -1;
                this.checkNote(beat.minNote);
                this.checkNote(beat.maxNote);
                positions.minNoteValue = this.lastMinNoteValue;
                positions.maxNoteValue = this.lastMaxNoteValue;
                if (this.shortestDuration < beat.duration) {
                    this.shortestDuration = beat.duration;
                }
                if (beat.hasTuplet) {
                    this.hasTuplet = true;
                }
            }
            return add;
        }
        checkNote(note) {
            if (!note) {
                return;
            }
            let value = this.getValue(note);
            if (this.beats.length === 1 && this.beats[0] === note.beat) {
                if (this.firstMinNoteValue === -1 || value < this.firstMinNoteValue) {
                    this.firstMinNoteValue = value;
                }
                if (this.firstMaxNoteValue === -1 || value > this.firstMaxNoteValue) {
                    this.firstMaxNoteValue = value;
                }
            }
            if (this.lastMinNoteValue === -1 || value < this.lastMinNoteValue) {
                this.lastMinNoteValue = value;
            }
            if (this.lastMaxNoteValue === -1 || value > this.lastMaxNoteValue) {
                this.lastMaxNoteValue = value;
            }
            let minValue = this.getMinValue(note);
            if (this.minNoteValue === -1 || this.minNoteValue > minValue) {
                this.minNoteValue = minValue;
                this.minNoteBeat = note.beat;
            }
            let maxValue = this.getMaxValue(note);
            if (this.maxNoteValue === -1 || this.maxNoteValue < maxValue) {
                this.maxNoteValue = maxValue;
                this.maxNoteBeat = note.beat;
            }
        }
        calculateBeamY(stemSize, xCorrection, xPosition, scale, yPosition) {
            return this.calculateBeamYWithDirection(stemSize, xCorrection, xPosition, scale, yPosition, this.direction);
        }
        calculateBeamYWithDirection(stemSize, xCorrection, xPosition, scale, yPosition, direction) {
            // create a line between the min and max note of the group
            if (this.beats.length === 1) {
                if (direction === BeamDirection.Up) {
                    return yPosition.getYPositionForNoteValue(this.maxNoteValue) - stemSize;
                }
                return yPosition.getYPositionForNoteValue(this.minNoteValue) + stemSize;
            }
            // we use the min/max notes to place the beam along their real position
            // we only want a maximum of 10 offset for their gradient
            let maxDistance = 10 * scale;
            // if the min note is not first or last, we can align notes directly to the position
            // of the min note
            if (direction === BeamDirection.Down &&
                this.minNoteBeat !== this.beats[0] &&
                this.minNoteBeat !== this.beats[this.beats.length - 1]) {
                return yPosition.getYPositionForNoteValue(this.minNoteValue) + stemSize;
            }
            if (direction === BeamDirection.Up &&
                this.maxNoteBeat !== this.beats[0] &&
                this.minNoteBeat !== this.beats[this.beats.length - 1]) {
                return yPosition.getYPositionForNoteValue(this.maxNoteValue) - stemSize;
            }
            let startX = this.getBeatLineX(this.beats[0]) + xCorrection;
            let startY = direction === BeamDirection.Up
                ? yPosition.getYPositionForNoteValue(this.firstMaxNoteValue) - stemSize
                : yPosition.getYPositionForNoteValue(this.firstMinNoteValue) + stemSize;
            let endX = this.getBeatLineX(this.beats[this.beats.length - 1]) + xCorrection;
            let endY = direction === BeamDirection.Up
                ? yPosition.getYPositionForNoteValue(this.lastMaxNoteValue) - stemSize
                : yPosition.getYPositionForNoteValue(this.lastMinNoteValue) + stemSize;
            // ensure the maxDistance
            if (direction === BeamDirection.Down && startY > endY && startY - endY > maxDistance) {
                endY = startY - maxDistance;
            }
            if (direction === BeamDirection.Down && endY > startY && endY - startY > maxDistance) {
                startY = endY - maxDistance;
            }
            if (direction === BeamDirection.Up && startY < endY && endY - startY > maxDistance) {
                endY = startY + maxDistance;
            }
            if (direction === BeamDirection.Up && endY < startY && startY - endY > maxDistance) {
                startY = endY + maxDistance;
            }
            // get the y position of the given beat on this curve
            if (startX === endX) {
                return startY;
            }
            // y(x)  = ( (y2 - y1) / (x2 - x1) )  * (x - x1) + y1;
            return ((endY - startY) / (endX - startX)) * (xPosition - startX) + startY;
        }
        // TODO: Check if this beaming is really correct, I'm not sure if we are connecting beats correctly
        static canJoin(b1, b2) {
            // is this a voice we can join with?
            if (!b1 ||
                !b2 ||
                b1.isRest ||
                b2.isRest ||
                b1.graceType !== b2.graceType ||
                b1.graceType === GraceType.BendGrace ||
                b2.graceType === GraceType.BendGrace) {
                return false;
            }
            if (b1.graceType !== GraceType.None && b2.graceType !== GraceType.None) {
                return true;
            }
            let m1 = b1.voice.bar;
            let m2 = b1.voice.bar;
            // only join on same measure
            if (m1 !== m2) {
                return false;
            }
            // get times of those voices and check if the times
            // are in the same division
            let start1 = b1.playbackStart;
            let start2 = b2.playbackStart;
            // we can only join 8th, 16th, 32th and 64th voices
            if (!BeamingHelper.canJoinDuration(b1.duration) || !BeamingHelper.canJoinDuration(b2.duration)) {
                return start1 === start2;
            }
            // break between different tuplet groups
            if (b1.tupletGroup !== b2.tupletGroup) {
                return false;
            }
            if (b1.hasTuplet && b2.hasTuplet) {
                // force joining for full tuplet groups
                if (b1.tupletGroup === b2.tupletGroup && b1.tupletGroup.isFull) {
                    return true;
                }
            }
            // TODO: create more rules for automatic beaming
            let divisionLength = MidiUtils.QuarterTime;
            switch (m1.masterBar.timeSignatureDenominator) {
                case 8:
                    if (m1.masterBar.timeSignatureNumerator % 3 === 0) {
                        divisionLength += (MidiUtils.QuarterTime / 2) | 0;
                    }
                    break;
            }
            // check if they are on the same division
            let division1 = ((divisionLength + start1) / divisionLength) | 0 | 0;
            let division2 = ((divisionLength + start2) / divisionLength) | 0 | 0;
            return division1 === division2;
        }
        static canJoinDuration(d) {
            switch (d) {
                case Duration.Whole:
                case Duration.Half:
                case Duration.Quarter:
                    return false;
                default:
                    return true;
            }
        }
        static isFullBarJoin(a, b, barIndex) {
            // TODO: this getindex call seems expensive since we call this method very often.
            return ModelUtils.getIndex(a.duration) - 2 - barIndex > 0 && ModelUtils.getIndex(b.duration) - 2 - barIndex > 0;
        }
        /**
         * Returns whether the the position of the given beat, was registered by the staff of the given ID
         * @param staffId
         * @param beat
         * @returns
         */
        isPositionFrom(staffId, beat) {
            if (!this._beatLineXPositions.has(beat.index)) {
                return true;
            }
            return (this._beatLineXPositions.get(beat.index).staffId === staffId ||
                !this._beatLineXPositions.get(beat.index).staffId);
        }
        getBeatMinValue(beat) {
            if (!this._beatLineXPositions.has(beat.index)) {
                return beat.minNote.displayValue;
            }
            return this._beatLineXPositions.get(beat.index).minNoteValue;
        }
        getBeatMaxValue(beat) {
            if (!this._beatLineXPositions.has(beat.index)) {
                return beat.maxNote.displayValue;
            }
            return this._beatLineXPositions.get(beat.index).maxNoteValue;
        }
    }
    BeamingHelper.ScoreMiddleKeys = [71, 60, 57, 50, 71];

    class BarHelpers {
        constructor(bar) {
            this.beamHelpers = [];
            this.beamHelperLookup = [];
            let currentBeamHelper = null;
            let currentGraceBeamHelper = null;
            if (bar) {
                for (let i = 0, j = bar.voices.length; i < j; i++) {
                    let v = bar.voices[i];
                    this.beamHelpers.push([]);
                    this.beamHelperLookup.push(new Map());
                    for (let k = 0, l = v.beats.length; k < l; k++) {
                        let b = v.beats[k];
                        let helperForBeat;
                        if (b.graceType !== GraceType.None) {
                            helperForBeat = currentGraceBeamHelper;
                        }
                        else {
                            helperForBeat = currentBeamHelper;
                            currentGraceBeamHelper = null;
                        }
                        // if a new beaming helper was started, we close our tuplet grouping as well
                        if (!b.isRest) {
                            // try to fit beam to current beamhelper
                            if (!helperForBeat || !helperForBeat.checkBeat(b)) {
                                if (helperForBeat) {
                                    helperForBeat.finish();
                                }
                                // if not possible, create the next beaming helper
                                helperForBeat = new BeamingHelper(bar.staff);
                                helperForBeat.checkBeat(b);
                                if (b.graceType !== GraceType.None) {
                                    currentGraceBeamHelper = helperForBeat;
                                }
                                else {
                                    currentBeamHelper = helperForBeat;
                                }
                                this.beamHelpers[v.index].push(helperForBeat);
                            }
                        }
                        this.beamHelperLookup[v.index].set(b.index, helperForBeat);
                    }
                    if (currentBeamHelper) {
                        currentBeamHelper.finish();
                    }
                    if (currentGraceBeamHelper) {
                        currentGraceBeamHelper.finish();
                    }
                    currentBeamHelper = null;
                    currentGraceBeamHelper = null;
                }
            }
        }
        getBeamingHelperForBeat(beat) {
            return this.beamHelperLookup[beat.voice.index].get(beat.index);
        }
    }

    /**
     * This is the base public class for creating blocks which can render bars.
     */
    class BarRendererBase {
        constructor(renderer, bar) {
            this._preBeatGlyphs = new LeftToRightLayoutingGlyphGroup();
            this._voiceContainers = new Map();
            this._postBeatGlyphs = new LeftToRightLayoutingGlyphGroup();
            this.x = 0;
            this.y = 0;
            this.width = 0;
            this.height = 0;
            this.index = 0;
            this.topOverflow = 0;
            this.bottomOverflow = 0;
            /**
             * Gets or sets whether this renderer is linked to the next one
             * by some glyphs like a vibrato effect
             */
            this.isLinkedToPrevious = false;
            /**
             * Gets or sets whether this renderer can wrap to the next line
             * or it needs to stay connected to the previous one.
             * (e.g. when having double bar repeats we must not separate the 2 bars)
             */
            this.canWrap = true;
            this._wasFirstOfLine = false;
            this._appliedLayoutingInfo = 0;
            this.isFinalized = false;
            /**
             * Gets the top padding for the main content of the renderer.
             * Can be used to specify where i.E. the score lines of the notation start.
             * @returns
             */
            this.topPadding = 0;
            /**
             * Gets the bottom padding for the main content of the renderer.
             * Can be used to specify where i.E. the score lines of the notation end.
             */
            this.bottomPadding = 0;
            this.scoreRenderer = renderer;
            this.bar = bar;
            if (bar) {
                this.helpers = new BarHelpers(bar);
            }
        }
        get nextRenderer() {
            if (!this.bar || !this.bar.nextBar) {
                return null;
            }
            return this.scoreRenderer.layout.getRendererForBar(this.staff.staveId, this.bar.nextBar);
        }
        get previousRenderer() {
            if (!this.bar || !this.bar.previousBar) {
                return null;
            }
            return this.scoreRenderer.layout.getRendererForBar(this.staff.staveId, this.bar.previousBar);
        }
        registerOverflowTop(topOverflow) {
            if (topOverflow > this.topOverflow) {
                this.topOverflow = topOverflow;
            }
        }
        registerOverflowBottom(bottomOverflow) {
            if (bottomOverflow > this.bottomOverflow) {
                this.bottomOverflow = bottomOverflow;
            }
        }
        scaleToWidth(width) {
            // preBeat and postBeat glyphs do not get resized
            let containerWidth = width - this._preBeatGlyphs.width - this._postBeatGlyphs.width;
            for (let kvp of this._voiceContainers) {
                kvp[1].scaleToWidth(containerWidth);
            }
            this._postBeatGlyphs.x = this._preBeatGlyphs.x + this._preBeatGlyphs.width + containerWidth;
            this.width = width;
        }
        get resources() {
            return this.settings.display.resources;
        }
        get settings() {
            return this.scoreRenderer.settings;
        }
        get scale() {
            return this.settings.display.scale;
        }
        get isFirstOfLine() {
            return this.index === 0;
        }
        get isLast() {
            return !this.bar || this.bar.index === this.scoreRenderer.layout.lastBarIndex;
        }
        registerLayoutingInfo() {
            let info = this.layoutingInfo;
            let preSize = this._preBeatGlyphs.width;
            if (info.preBeatSize < preSize) {
                info.preBeatSize = preSize;
            }
            for (let kvp of this._voiceContainers) {
                kvp[1].registerLayoutingInfo(info);
            }
            let postSize = this._postBeatGlyphs.width;
            if (info.postBeatSize < postSize) {
                info.postBeatSize = postSize;
            }
        }
        applyLayoutingInfo() {
            if (this._appliedLayoutingInfo >= this.layoutingInfo.version) {
                return false;
            }
            this._appliedLayoutingInfo = this.layoutingInfo.version;
            // if we need additional space in the preBeat group we simply
            // add a new spacer
            this._preBeatGlyphs.width = this.layoutingInfo.preBeatSize;
            // on beat glyphs we apply the glyph spacing
            let voiceEnd = this._preBeatGlyphs.x + this._preBeatGlyphs.width;
            for (let kvp of this._voiceContainers) {
                let c = kvp[1];
                c.x = this._preBeatGlyphs.x + this._preBeatGlyphs.width;
                c.applyLayoutingInfo(this.layoutingInfo);
                let newEnd = c.x + c.width;
                if (voiceEnd < newEnd) {
                    voiceEnd = newEnd;
                }
            }
            // on the post glyphs we add the spacing before all other glyphs
            this._postBeatGlyphs.x = Math.floor(voiceEnd);
            this._postBeatGlyphs.width = this.layoutingInfo.postBeatSize;
            this.width = Math.ceil(this._postBeatGlyphs.x + this._postBeatGlyphs.width);
            return true;
        }
        finalizeRenderer() {
            this.isFinalized = true;
        }
        doLayout() {
            if (!this.bar) {
                return;
            }
            this._preBeatGlyphs = new LeftToRightLayoutingGlyphGroup();
            this._preBeatGlyphs.renderer = this;
            this._voiceContainers.clear();
            this._postBeatGlyphs = new LeftToRightLayoutingGlyphGroup();
            this._postBeatGlyphs.renderer = this;
            for (let i = 0; i < this.bar.voices.length; i++) {
                let voice = this.bar.voices[i];
                if (this.hasVoiceContainer(voice)) {
                    let c = new VoiceContainerGlyph(0, 0, voice);
                    c.renderer = this;
                    this._voiceContainers.set(this.bar.voices[i].index, c);
                }
            }
            if (this.bar.simileMark === SimileMark.SecondOfDouble) {
                this.canWrap = false;
            }
            this.createPreBeatGlyphs();
            this.createBeatGlyphs();
            this.createPostBeatGlyphs();
            this.updateSizes();
        }
        hasVoiceContainer(voice) {
            return !voice.isEmpty || voice.index === 0;
        }
        updateSizes() {
            this.staff.registerStaffTop(this.topPadding);
            this.staff.registerStaffBottom(this.height - this.bottomPadding);
            let voiceContainers = this._voiceContainers;
            let beatGlyphsStart = this.beatGlyphsStart;
            let postBeatStart = beatGlyphsStart;
            for (let kvp of voiceContainers) {
                let c = kvp[1];
                c.x = beatGlyphsStart;
                c.doLayout();
                let x = c.x + c.width;
                if (postBeatStart < x) {
                    postBeatStart = x;
                }
            }
            this._postBeatGlyphs.x = Math.floor(postBeatStart);
            this.width = Math.ceil(this._postBeatGlyphs.x + this._postBeatGlyphs.width);
        }
        addPreBeatGlyph(g) {
            this._preBeatGlyphs.addGlyph(g);
        }
        addBeatGlyph(g) {
            g.renderer = this;
            g.preNotes.renderer = this;
            g.onNotes.renderer = this;
            g.onNotes.beamingHelper = this.helpers.beamHelperLookup[g.beat.voice.index].get(g.beat.index);
            this.getOrCreateVoiceContainer(g.beat.voice).addGlyph(g);
        }
        getOrCreateVoiceContainer(voice) {
            return this._voiceContainers.get(voice.index);
        }
        getBeatContainer(beat) {
            return this.getOrCreateVoiceContainer(beat.voice).beatGlyphs[beat.index];
        }
        getPreNotesGlyphForBeat(beat) {
            return this.getBeatContainer(beat).preNotes;
        }
        getOnNotesGlyphForBeat(beat) {
            return this.getBeatContainer(beat).onNotes;
        }
        paint(cx, cy, canvas) {
            this.paintBackground(cx, cy, canvas);
            canvas.color = this.resources.mainGlyphColor;
            this._preBeatGlyphs.paint(cx + this.x, cy + this.y, canvas);
            for (let kvp of this._voiceContainers) {
                let c = kvp[1];
                canvas.color = c.voice.index === 0 ? this.resources.mainGlyphColor : this.resources.secondaryGlyphColor;
                c.paint(cx + this.x, cy + this.y, canvas);
            }
            canvas.color = this.resources.mainGlyphColor;
            this._postBeatGlyphs.paint(cx + this.x, cy + this.y, canvas);
        }
        paintBackground(cx, cy, canvas) {
            // no default brackgroundpainting
        }
        buildBoundingsLookup(masterBarBounds, cx, cy) {
            let barBounds = new BarBounds();
            barBounds.bar = this.bar;
            barBounds.visualBounds = new Bounds();
            barBounds.visualBounds.x = cx + this.x;
            barBounds.visualBounds.y = cy + this.y + this.topPadding;
            barBounds.visualBounds.w = this.width;
            barBounds.visualBounds.h = this.height - this.topPadding - this.bottomPadding;
            barBounds.realBounds = new Bounds();
            barBounds.realBounds.x = cx + this.x;
            barBounds.realBounds.y = cy + this.y;
            barBounds.realBounds.w = this.width;
            barBounds.realBounds.h = this.height;
            masterBarBounds.addBar(barBounds);
            for (let kvp of this._voiceContainers) {
                let c = kvp[1];
                let isEmptyBar = this.bar.isEmpty && kvp[0] === 0;
                if (!c.voice.isEmpty || isEmptyBar) {
                    for (let i = 0, j = c.beatGlyphs.length; i < j; i++) {
                        let bc = c.beatGlyphs[i];
                        let beatBoundings = new BeatBounds();
                        beatBoundings.beat = bc.beat;
                        beatBoundings.visualBounds = new Bounds();
                        beatBoundings.visualBounds.x = cx + this.x + c.x + bc.x + bc.onNotes.x;
                        beatBoundings.visualBounds.y = barBounds.visualBounds.y;
                        beatBoundings.visualBounds.w = bc.onNotes.width;
                        beatBoundings.visualBounds.h = barBounds.visualBounds.h;
                        beatBoundings.realBounds = new Bounds();
                        beatBoundings.realBounds.x = cx + this.x + c.x + bc.x;
                        beatBoundings.realBounds.y = barBounds.realBounds.y;
                        beatBoundings.realBounds.w = bc.width;
                        beatBoundings.realBounds.h = barBounds.realBounds.h;
                        if (isEmptyBar) {
                            beatBoundings.visualBounds.x = cx + this.x;
                            beatBoundings.realBounds.x = beatBoundings.visualBounds.x;
                        }
                        barBounds.addBeat(beatBoundings);
                    }
                }
            }
        }
        addPostBeatGlyph(g) {
            this._postBeatGlyphs.addGlyph(g);
        }
        createPreBeatGlyphs() {
            this._wasFirstOfLine = this.isFirstOfLine;
        }
        createBeatGlyphs() {
            // filled in subclasses
        }
        createPostBeatGlyphs() {
            // filled in subclasses
        }
        get beatGlyphsStart() {
            return this._preBeatGlyphs.x + this._preBeatGlyphs.width;
        }
        get postBeatGlyphsStart() {
            return this._postBeatGlyphs.x;
        }
        getNoteX(note, onEnd = true) {
            return 0;
        }
        getBeatX(beat, requestedPosition = BeatXPosition.PreNotes) {
            let container = this.getBeatContainer(beat);
            if (container) {
                switch (requestedPosition) {
                    case BeatXPosition.PreNotes:
                        return container.voiceContainer.x + container.x;
                    case BeatXPosition.OnNotes:
                        return container.voiceContainer.x + container.x + container.onNotes.x;
                    case BeatXPosition.MiddleNotes:
                        return container.voiceContainer.x + container.x + container.onTimeX;
                    case BeatXPosition.PostNotes:
                        return container.voiceContainer.x + container.x + container.onNotes.x + container.onNotes.width;
                    case BeatXPosition.EndBeat:
                        return container.voiceContainer.x + container.x + container.width;
                }
            }
            return 0;
        }
        getNoteY(note, aboveNote = false) {
            return 0;
        }
        reLayout() {
            // there are some glyphs which are shown only for renderers at the line start, so we simply recreate them
            // but we only need to recreate them for the renderers that were the first of the line or are now the first of the line
            if ((this._wasFirstOfLine && !this.isFirstOfLine) || (!this._wasFirstOfLine && this.isFirstOfLine)) {
                this._preBeatGlyphs = new LeftToRightLayoutingGlyphGroup();
                this._preBeatGlyphs.renderer = this;
                this.createPreBeatGlyphs();
            }
            this.updateSizes();
            this.registerLayoutingInfo();
        }
        paintSimileMark(cx, cy, canvas) {
            switch (this.bar.simileMark) {
                case SimileMark.Simple:
                    canvas.fillMusicFontSymbol(cx + this.x + (this.width - 20 * this.scale) / 2, cy + this.y + this.height / 2, 1, MusicFontSymbol.SimileMarkSimple, false);
                    break;
                case SimileMark.SecondOfDouble:
                    canvas.fillMusicFontSymbol(cx + this.x - (28 * this.scale) / 2, cy + this.y + this.height / 2, 1, MusicFontSymbol.SimileMarkDouble, false);
                    break;
            }
        }
    }

    /**
     * Lists all sizing types of the effect bar glyphs
     */
    var EffectBarGlyphSizing;
    (function (EffectBarGlyphSizing) {
        /**
         * The effect glyph is placed above the pre-beat glyph which is before
         * the actual note in the area where also accidentals are renderered.
         */
        EffectBarGlyphSizing[EffectBarGlyphSizing["SinglePreBeat"] = 0] = "SinglePreBeat";
        /**
         * The effect glyph is placed above the on-beat glyph which is where
         * the actual note head glyphs are placed.
         */
        EffectBarGlyphSizing[EffectBarGlyphSizing["SingleOnBeat"] = 1] = "SingleOnBeat";
        /**
         * The effect glyph is placed above the on-beat glyph which is where
         * the actual note head glyphs are placed. The glyph will size to the end of
         * the applied beat.
         */
        EffectBarGlyphSizing[EffectBarGlyphSizing["SingleOnBeatToEnd"] = 2] = "SingleOnBeatToEnd";
        /**
         * The effect glyph is placed above the on-beat glyph and expaded to the
         * on-beat position of the next beat.
         */
        EffectBarGlyphSizing[EffectBarGlyphSizing["GroupedOnBeat"] = 3] = "GroupedOnBeat";
        /**
         * The effect glyph is placed above the on-beat glyph and expaded to the
         * on-beat position of the next beat. The glyph will size to the end of
         * the applied beat.
         */
        EffectBarGlyphSizing[EffectBarGlyphSizing["GroupedOnBeatToEnd"] = 4] = "GroupedOnBeatToEnd";
        /**
         * The effect glyph is placed on the whole bar covering the whole width
         */
        EffectBarGlyphSizing[EffectBarGlyphSizing["FullBar"] = 5] = "FullBar";
    })(EffectBarGlyphSizing || (EffectBarGlyphSizing = {}));

    class EffectBand extends Glyph {
        constructor(voice, info) {
            super(0, 0);
            this._uniqueEffectGlyphs = [];
            this._effectGlyphs = [];
            this.isEmpty = true;
            this.previousBand = null;
            this.isLinkedToPrevious = false;
            this.firstBeat = null;
            this.lastBeat = null;
            this.height = 0;
            this.slot = null;
            this.voice = voice;
            this.info = info;
        }
        doLayout() {
            super.doLayout();
            for (let i = 0; i < this.renderer.bar.voices.length; i++) {
                this._effectGlyphs.push(new Map());
                this._uniqueEffectGlyphs.push([]);
            }
        }
        createGlyph(beat) {
            if (beat.voice !== this.voice) {
                return;
            }
            // NOTE: the track order will never change. even if the staff behind the renderer changes, the trackIndex will not.
            // so it's okay to access the staff here while creating the glyphs.
            if (this.info.shouldCreateGlyph(this.renderer.settings, beat) &&
                (!this.info.hideOnMultiTrack || this.renderer.staff.trackIndex === 0)) {
                this.isEmpty = false;
                if (!this.firstBeat || beat.isBefore(this.firstBeat)) {
                    this.firstBeat = beat;
                }
                if (!this.lastBeat || beat.isAfter(this.lastBeat)) {
                    this.lastBeat = beat;
                    // for "toEnd" sizing occupy until next follow-up-beat
                    switch (this.info.sizingMode) {
                        case EffectBarGlyphSizing.SingleOnBeatToEnd:
                        case EffectBarGlyphSizing.GroupedOnBeatToEnd:
                            if (this.lastBeat.nextBeat) {
                                this.lastBeat = this.lastBeat.nextBeat;
                            }
                            break;
                    }
                }
                let glyph = this.createOrResizeGlyph(this.info.sizingMode, beat);
                if (glyph.height > this.height) {
                    this.height = glyph.height;
                }
            }
        }
        createOrResizeGlyph(sizing, b) {
            let g;
            switch (sizing) {
                case EffectBarGlyphSizing.FullBar:
                    g = this.info.createNewGlyph(this.renderer, b);
                    g.renderer = this.renderer;
                    g.beat = b;
                    g.doLayout();
                    this._effectGlyphs[b.voice.index].set(b.index, g);
                    this._uniqueEffectGlyphs[b.voice.index].push(g);
                    return g;
                case EffectBarGlyphSizing.SinglePreBeat:
                case EffectBarGlyphSizing.SingleOnBeat:
                case EffectBarGlyphSizing.SingleOnBeatToEnd:
                    g = this.info.createNewGlyph(this.renderer, b);
                    g.renderer = this.renderer;
                    g.beat = b;
                    g.doLayout();
                    this._effectGlyphs[b.voice.index].set(b.index, g);
                    this._uniqueEffectGlyphs[b.voice.index].push(g);
                    return g;
                case EffectBarGlyphSizing.GroupedOnBeat:
                case EffectBarGlyphSizing.GroupedOnBeatToEnd:
                    let singleSizing = sizing === EffectBarGlyphSizing.GroupedOnBeat
                        ? EffectBarGlyphSizing.SingleOnBeat
                        : EffectBarGlyphSizing.SingleOnBeatToEnd;
                    if (b.index > 0 || this.renderer.index > 0) {
                        // check if the previous beat also had this effect
                        let prevBeat = b.previousBeat;
                        if (this.info.shouldCreateGlyph(this.renderer.settings, prevBeat)) {
                            // first load the effect bar renderer and glyph
                            let prevEffect = null;
                            if (b.index > 0 && this._effectGlyphs[b.voice.index].has(prevBeat.index)) {
                                // load effect from previous beat in the same renderer
                                prevEffect = this._effectGlyphs[b.voice.index].get(prevBeat.index);
                            }
                            else if (this.renderer.index > 0) {
                                // load the effect from the previous renderer if possible.
                                let previousRenderer = this.renderer
                                    .previousRenderer;
                                let previousBand = previousRenderer.getBand(this.voice, this.info.effectId);
                                let voiceGlyphs = previousBand._effectGlyphs[b.voice.index];
                                if (voiceGlyphs.has(prevBeat.index)) {
                                    prevEffect = voiceGlyphs.get(prevBeat.index);
                                }
                            }
                            // if the effect cannot be expanded, create a new glyph
                            // in case of expansion also create a new glyph, but also link the glyphs together
                            // so for rendering it might be expanded.
                            let newGlyph = this.createOrResizeGlyph(singleSizing, b);
                            if (prevEffect && this.info.canExpand(prevBeat, b)) {
                                // link glyphs
                                prevEffect.nextGlyph = newGlyph;
                                newGlyph.previousGlyph = prevEffect;
                                // mark renderers as linked for consideration when layouting the renderers (line breaking, partial breaking)
                                this.isLinkedToPrevious = true;
                            }
                            return newGlyph;
                        }
                        // in case the previous beat did not have the same effect, we simply create a new glyph
                        return this.createOrResizeGlyph(singleSizing, b);
                    }
                    // in case of the very first beat, we simply create the glyph.
                    return this.createOrResizeGlyph(singleSizing, b);
                default:
                    return this.createOrResizeGlyph(EffectBarGlyphSizing.SingleOnBeat, b);
            }
        }
        paint(cx, cy, canvas) {
            super.paint(cx, cy, canvas);
            // canvas.LineWidth = 1;
            // canvas.StrokeRect(cx + X, cy + Y, Renderer.Width, Slot.Shared.Height);
            // canvas.LineWidth = 1.5f;
            for (let i = 0, j = this._uniqueEffectGlyphs.length; i < j; i++) {
                let v = this._uniqueEffectGlyphs[i];
                for (let k = 0, l = v.length; k < l; k++) {
                    let g = v[k];
                    g.paint(cx + this.x, cy + this.y, canvas);
                }
            }
        }
        alignGlyphs() {
            for (let v = 0; v < this._effectGlyphs.length; v++) {
                for (let kvp of this._effectGlyphs[v]) {
                    this.alignGlyph(this.info.sizingMode, this.renderer.bar.voices[v].beats[kvp[0]]);
                }
            }
        }
        alignGlyph(sizing, beat) {
            let g = this._effectGlyphs[beat.voice.index].get(beat.index);
            let pos;
            let container = this.renderer.getBeatContainer(beat);
            switch (sizing) {
                case EffectBarGlyphSizing.SinglePreBeat:
                    pos = container.preNotes;
                    g.x = this.renderer.beatGlyphsStart + pos.x + container.x;
                    g.width = pos.width;
                    break;
                case EffectBarGlyphSizing.SingleOnBeat:
                case EffectBarGlyphSizing.GroupedOnBeat:
                    pos = container.onNotes;
                    g.x = this.renderer.beatGlyphsStart + pos.x + container.x;
                    g.width = pos.width;
                    break;
                case EffectBarGlyphSizing.SingleOnBeatToEnd:
                case EffectBarGlyphSizing.GroupedOnBeatToEnd:
                    pos = container.onNotes;
                    g.x = this.renderer.beatGlyphsStart + pos.x + container.x;
                    if (container.beat.isLastOfVoice) {
                        g.width = this.renderer.width - g.x;
                    }
                    else {
                        g.width = container.width - container.preNotes.width - container.preNotes.x;
                    }
                    break;
                case EffectBarGlyphSizing.FullBar:
                    g.width = this.renderer.width;
                    break;
            }
        }
    }

    class EffectBandSlotShared {
        constructor() {
            this.uniqueEffectId = null;
            this.y = 0;
            this.height = 0;
            this.firstBeat = null;
            this.lastBeat = null;
        }
    }
    class EffectBandSlot {
        constructor() {
            this.bands = [];
            this.shared = new EffectBandSlotShared();
        }
        update(effectBand) {
            // lock band to particular effect if needed
            if (!effectBand.info.canShareBand) {
                this.shared.uniqueEffectId = effectBand.info.effectId;
            }
            effectBand.slot = this;
            this.bands.push(effectBand);
            if (effectBand.height > this.shared.height) {
                this.shared.height = effectBand.height;
            }
            if (!this.shared.firstBeat || effectBand.firstBeat.isBefore(this.shared.firstBeat)) {
                this.shared.firstBeat = effectBand.firstBeat;
            }
            if (!this.shared.lastBeat || effectBand.lastBeat.isAfter(this.shared.lastBeat)) {
                this.shared.lastBeat = effectBand.lastBeat;
            }
        }
        canBeUsed(band) {
            return (((!this.shared.uniqueEffectId && band.info.canShareBand) ||
                band.info.effectId === this.shared.uniqueEffectId) &&
                (!this.shared.firstBeat ||
                    this.shared.lastBeat.isBefore(band.firstBeat) ||
                    this.shared.lastBeat.isBefore(this.shared.firstBeat)));
        }
    }

    class EffectBandSizingInfo {
        constructor() {
            this.slots = [];
            this._effectSlot = new Map();
        }
        getOrCreateSlot(band) {
            // first check preferrable slot depending on type
            if (this._effectSlot.has(band.info.effectId)) {
                let slot = this._effectSlot.get(band.info.effectId);
                if (slot.canBeUsed(band)) {
                    return slot;
                }
            }
            // find any slot that can be used
            for (let slot of this.slots) {
                if (slot.canBeUsed(band)) {
                    return slot;
                }
            }
            // create a new slot if required
            let newSlot = new EffectBandSlot();
            this.slots.push(newSlot);
            return newSlot;
        }
        register(effectBand) {
            let freeSlot = this.getOrCreateSlot(effectBand);
            freeSlot.update(effectBand);
            this._effectSlot.set(effectBand.info.effectId, freeSlot);
        }
    }

    class BeatGlyphBase extends GlyphGroup {
        constructor() {
            super(0, 0);
        }
        doLayout() {
            // left to right layout
            let w = 0;
            if (this.glyphs) {
                for (let i = 0, j = this.glyphs.length; i < j; i++) {
                    let g = this.glyphs[i];
                    g.x = w;
                    g.renderer = this.renderer;
                    g.doLayout();
                    w += g.width;
                }
            }
            this.width = w;
        }
        noteLoop(action) {
            for (let i = this.container.beat.notes.length - 1; i >= 0; i--) {
                action(this.container.beat.notes[i]);
            }
        }
    }

    class BeatOnNoteGlyphBase extends BeatGlyphBase {
        constructor() {
            super(...arguments);
            this.centerX = 0;
        }
        updateBeamingHelper() {
            //
        }
    }

    /**
     * This renderer is responsible for displaying effects above or below the other staves
     * like the vibrato.
     */
    class EffectBarRenderer extends BarRendererBase {
        constructor(renderer, bar, infos) {
            super(renderer, bar);
            this._bands = [];
            this._bandLookup = new Map();
            this.sizingInfo = null;
            this._infos = infos;
        }
        updateSizes() {
            this.topOverflow = 0;
            this.bottomOverflow = 0;
            this.topPadding = 0;
            this.bottomPadding = 0;
            this.updateHeight();
            super.updateSizes();
        }
        finalizeRenderer() {
            super.finalizeRenderer();
            this.updateHeight();
        }
        updateHeight() {
            if (!this.sizingInfo) {
                return;
            }
            let y = 0;
            for (let slot of this.sizingInfo.slots) {
                slot.shared.y = y;
                for (let band of slot.bands) {
                    band.y = y;
                    band.height = slot.shared.height;
                }
                y += slot.shared.height;
            }
            this.height = y;
        }
        applyLayoutingInfo() {
            if (!super.applyLayoutingInfo()) {
                return false;
            }
            // we create empty slots for the same group
            if (this.index > 0) {
                let previousRenderer = this.previousRenderer;
                this.sizingInfo = previousRenderer.sizingInfo;
            }
            else {
                this.sizingInfo = new EffectBandSizingInfo();
            }
            for (let effectBand of this._bands) {
                effectBand.alignGlyphs();
                if (!effectBand.isEmpty) {
                    // find a slot that ended before the start of the band
                    this.sizingInfo.register(effectBand);
                }
            }
            this.updateHeight();
            return true;
        }
        scaleToWidth(width) {
            super.scaleToWidth(width);
            for (let effectBand of this._bands) {
                effectBand.alignGlyphs();
            }
        }
        createBeatGlyphs() {
            this._bands = [];
            this._bandLookup = new Map();
            for (let voice of this.bar.voices) {
                if (this.hasVoiceContainer(voice)) {
                    for (let info of this._infos) {
                        let band = new EffectBand(voice, info);
                        band.renderer = this;
                        band.doLayout();
                        this._bands.push(band);
                        this._bandLookup.set(voice.index + '.' + info.effectId, band);
                    }
                }
            }
            for (let voice of this.bar.voices) {
                if (this.hasVoiceContainer(voice)) {
                    this.createVoiceGlyphs(voice);
                }
            }
            for (let effectBand of this._bands) {
                if (effectBand.isLinkedToPrevious) {
                    this.isLinkedToPrevious = true;
                }
            }
        }
        createVoiceGlyphs(v) {
            for (let b of v.beats) {
                // we create empty glyphs as alignment references and to get the
                // effect bar sized
                let container = new BeatContainerGlyph(b, this.getOrCreateVoiceContainer(v));
                container.preNotes = new BeatGlyphBase();
                container.onNotes = new BeatOnNoteGlyphBase();
                this.addBeatGlyph(container);
                for (let effectBand of this._bands) {
                    effectBand.createGlyph(b);
                }
            }
        }
        paint(cx, cy, canvas) {
            this.paintBackground(cx, cy, canvas);
            for (let effectBand of this._bands) {
                canvas.color =
                    effectBand.voice.index === 0 ? this.resources.mainGlyphColor : this.resources.secondaryGlyphColor;
                if (!effectBand.isEmpty) {
                    effectBand.paint(cx + this.x, cy + this.y, canvas);
                }
            }
        }
        getBand(voice, effectId) {
            let id = voice.index + '.' + effectId;
            if (this._bandLookup.has(id)) {
                return this._bandLookup.get(id);
            }
            return null;
        }
    }

    class EffectBarRendererFactory extends BarRendererFactory {
        constructor(staffId, infos) {
            super();
            this._infos = infos;
            this._staffId = staffId;
            this.isInAccolade = false;
            this.isRelevantForBoundsLookup = false;
        }
        get staffId() {
            return this._staffId;
        }
        create(renderer, bar) {
            return new EffectBarRenderer(renderer, bar, this._infos);
        }
    }

    /**
     * Effect-Glyphs implementing this public interface get notified
     * as they are expanded over multiple beats.
     */
    class EffectGlyph extends Glyph {
        constructor(x = 0, y = 0) {
            super(x, y);
            /**
             * Gets or sets the next glyph of the same type in case
             * the effect glyph is expanded when using {@link EffectBarGlyphSizing.groupedOnBeat}.
             */
            this.nextGlyph = null;
            /**
             * Gets or sets the previous glyph of the same type in case
             * the effect glyph is expanded when using {@link EffectBarGlyphSizing.groupedOnBeat}.
             */
            this.previousGlyph = null;
            this.height = 0;
        }
    }

    class AlternateEndingsGlyph extends EffectGlyph {
        constructor(x, y, alternateEndings) {
            super(x, y);
            this._endingsString = "";
            this._endings = [];
            for (let i = 0; i < MasterBar.MaxAlternateEndings; i++) {
                if ((alternateEndings & (0x01 << i)) !== 0) {
                    this._endings.push(i);
                }
            }
        }
        doLayout() {
            super.doLayout();
            this.height = this.renderer.resources.wordsFont.size + (AlternateEndingsGlyph.Padding * this.scale + 2);
            let endingsStrings = '';
            for (let i = 0, j = this._endings.length; i < j; i++) {
                endingsStrings += this._endings[i] + 1;
                endingsStrings += '. ';
            }
            this._endingsString = endingsStrings;
        }
        paint(cx, cy, canvas) {
            super.paint(cx, cy, canvas);
            let baseline = canvas.textBaseline;
            canvas.textBaseline = TextBaseline.Top;
            if (this._endings.length > 0) {
                let res = this.renderer.resources;
                canvas.font = res.wordsFont;
                canvas.moveTo(cx + this.x, cy + this.y + this.height);
                canvas.lineTo(cx + this.x, cy + this.y);
                canvas.lineTo(cx + this.x + this.width, cy + this.y);
                canvas.stroke();
                canvas.fillText(this._endingsString, cx + this.x + AlternateEndingsGlyph.Padding * this.scale, cy + this.y * this.scale);
            }
            canvas.textBaseline = baseline;
        }
    }
    AlternateEndingsGlyph.Padding = 3;

    class AlternateEndingsEffectInfo {
        get effectId() {
            return 'alternate-feel';
        }
        get hideOnMultiTrack() {
            return true;
        }
        get canShareBand() {
            return false;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.FullBar;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.index === 0 && beat.voice.bar.masterBar.alternateEndings !== 0;
        }
        createNewGlyph(renderer, beat) {
            return new AlternateEndingsGlyph(0, 0, beat.voice.bar.masterBar.alternateEndings);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class TextGlyph extends EffectGlyph {
        constructor(x, y, text, font, textAlign = TextAlign.Left) {
            super(x, y);
            this._lines = text.split('\n');
            this.font = font;
            this.textAlign = textAlign;
        }
        doLayout() {
            super.doLayout();
            this.height = this.font.size * this._lines.length;
        }
        paint(cx, cy, canvas) {
            canvas.font = this.font;
            let old = canvas.textAlign;
            let y = cy + this.y;
            for (let line of this._lines) {
                canvas.textAlign = this.textAlign;
                canvas.fillText(line, cx + this.x, y);
                canvas.textAlign = old;
                y += this.font.size;
            }
        }
    }

    class CapoEffectInfo {
        get effectId() {
            return 'capo';
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return false;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.index === 0 && beat.voice.bar.index === 0 && beat.voice.bar.staff.capo !== 0;
        }
        createNewGlyph(renderer, beat) {
            return new TextGlyph(0, 0, 'Capo. fret ' + beat.voice.bar.staff.capo, renderer.resources.effectFont, TextAlign.Left);
        }
        canExpand(from, to) {
            return false;
        }
    }

    class ChordsEffectInfo {
        get effectId() {
            return 'chords';
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.hasChord;
        }
        createNewGlyph(renderer, beat) {
            return new TextGlyph(0, 0, beat.chord.name, renderer.resources.effectFont, TextAlign.Center);
        }
        canExpand(from, to) {
            return false;
        }
    }

    class GroupedEffectGlyph extends EffectGlyph {
        constructor(endPosition) {
            super();
            this.forceGroupedRendering = false;
            this.endOnBarLine = false;
            this.endPosition = endPosition;
        }
        get isLinkedWithPrevious() {
            return !!this.previousGlyph && this.previousGlyph.renderer.staff.staveGroup === this.renderer.staff.staveGroup;
        }
        get isLinkedWithNext() {
            return (!!this.nextGlyph &&
                this.nextGlyph.renderer.isFinalized &&
                this.nextGlyph.renderer.staff.staveGroup === this.renderer.staff.staveGroup);
        }
        paint(cx, cy, canvas) {
            // if we are linked with the previous, the first glyph of the group will also render this one.
            if (this.isLinkedWithPrevious) {
                return;
            }
            // we are not linked with any glyph therefore no expansion is required, we render a simple glyph.
            if (!this.isLinkedWithNext && !this.forceGroupedRendering) {
                this.paintNonGrouped(cx, cy, canvas);
                return;
            }
            // find last linked glyph that can be
            let lastLinkedGlyph;
            if (!this.isLinkedWithNext && this.forceGroupedRendering) {
                lastLinkedGlyph = this;
            }
            else {
                lastLinkedGlyph = this.nextGlyph;
                while (lastLinkedGlyph.isLinkedWithNext) {
                    lastLinkedGlyph = lastLinkedGlyph.nextGlyph;
                }
            }
            // use start position of next beat when possible
            let endBeatRenderer = lastLinkedGlyph.renderer;
            let endBeat = lastLinkedGlyph.beat;
            let position = this.endPosition;
            // calculate end X-position
            let cxRenderer = cx - this.renderer.x;
            let endX = this.calculateEndX(endBeatRenderer, endBeat, cxRenderer, position);
            this.paintGrouped(cx, cy, endX, canvas);
        }
        calculateEndX(endBeatRenderer, endBeat, cx, endPosition) {
            if (!endBeat) {
                return cx + endBeatRenderer.x + this.x + this.width;
            }
            return cx + endBeatRenderer.x + endBeatRenderer.getBeatX(endBeat, endPosition);
        }
        paintNonGrouped(cx, cy, canvas) {
            let cxRenderer = cx - this.renderer.x;
            let endX = this.calculateEndX(this.renderer, this.beat, cxRenderer, this.endPosition);
            this.paintGrouped(cx, cy, endX, canvas);
        }
    }

    class MusicFontGlyph extends EffectGlyph {
        constructor(x, y, glyphScale, symbol) {
            super(x, y);
            this.glyphScale = 0;
            this.glyphScale = glyphScale;
            this.symbol = symbol;
        }
        paint(cx, cy, canvas) {
            canvas.fillMusicFontSymbol(cx + this.x, cy + this.y, this.glyphScale * this.scale, this.symbol, false);
        }
    }

    class NoteHeadGlyph extends MusicFontGlyph {
        constructor(x, y, duration, isGrace) {
            super(x, y, isGrace ? NoteHeadGlyph.GraceScale : 1, NoteHeadGlyph.getSymbol(duration));
            this._isGrace = isGrace;
            this._duration = duration;
        }
        paint(cx, cy, canvas) {
            let offset = this._isGrace ? this.scale : 0;
            canvas.fillMusicFontSymbol(cx + this.x, cy + this.y + offset, this.glyphScale * this.scale, this.symbol, false);
        }
        doLayout() {
            let scale = (this._isGrace ? NoteHeadGlyph.GraceScale : 1) * this.scale;
            switch (this._duration) {
                case Duration.QuadrupleWhole:
                    this.width = 14 * scale;
                    this.height = NoteHeadGlyph.NoteHeadHeight * scale;
                    break;
                case Duration.DoubleWhole:
                    this.width = 14 * (this._isGrace ? NoteHeadGlyph.GraceScale : 1) * this.scale;
                    this.height = NoteHeadGlyph.NoteHeadHeight * scale;
                    break;
                case Duration.Whole:
                    this.width = 14 * (this._isGrace ? NoteHeadGlyph.GraceScale : 1) * this.scale;
                    this.height = NoteHeadGlyph.NoteHeadHeight * scale;
                    break;
                default:
                    this.width = 10 * (this._isGrace ? NoteHeadGlyph.GraceScale : 1) * this.scale;
                    this.height = NoteHeadGlyph.NoteHeadHeight * scale;
                    break;
            }
        }
        static getSymbol(duration) {
            switch (duration) {
                case Duration.QuadrupleWhole:
                    return MusicFontSymbol.NoteQuadrupleWhole;
                case Duration.DoubleWhole:
                    return MusicFontSymbol.NoteDoubleWhole;
                case Duration.Whole:
                    return MusicFontSymbol.NoteWhole;
                case Duration.Half:
                    return MusicFontSymbol.NoteHalf;
                default:
                    return MusicFontSymbol.NoteQuarter;
            }
        }
    }
    NoteHeadGlyph.GraceScale = 0.75;
    NoteHeadGlyph.NoteHeadHeight = 9;
    NoteHeadGlyph.QuarterNoteHeadWidth = 10;

    class CrescendoGlyph extends GroupedEffectGlyph {
        constructor(x, y, crescendo) {
            super(BeatXPosition.EndBeat);
            this._crescendo = CrescendoType.None;
            this._crescendo = crescendo;
            this.x = x;
            this.y = y;
        }
        doLayout() {
            super.doLayout();
            this.height = 17 * this.scale;
        }
        paintGrouped(cx, cy, endX, canvas) {
            let startX = cx + this.x;
            let height = this.height * this.scale;
            canvas.beginPath();
            if (this._crescendo === CrescendoType.Crescendo) {
                endX -= CrescendoGlyph.Padding * this.scale;
                canvas.moveTo(endX, cy + this.y);
                canvas.lineTo(startX, cy + this.y + height / 2);
                canvas.lineTo(endX, cy + this.y + height);
            }
            else {
                endX -= CrescendoGlyph.Padding * this.scale;
                canvas.moveTo(startX, cy + this.y);
                canvas.lineTo(endX, cy + this.y + height / 2);
                canvas.lineTo(startX, cy + this.y + height);
            }
            canvas.stroke();
        }
    }
    CrescendoGlyph.Padding = (NoteHeadGlyph.QuarterNoteHeadWidth / 2) | 0;

    class CrescendoEffectInfo {
        get effectId() {
            return 'crescendo';
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeatToEnd;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.crescendo !== CrescendoType.None;
        }
        createNewGlyph(renderer, beat) {
            return new CrescendoGlyph(0, 0, beat.crescendo);
        }
        canExpand(from, to) {
            return from.crescendo === to.crescendo;
        }
    }

    class DynamicsGlyph extends MusicFontGlyph {
        constructor(x, y, dynamics) {
            super(x, y, 0.6, DynamicsGlyph.getSymbol(dynamics));
        }
        doLayout() {
            super.doLayout();
            this.height = 17 * this.scale;
            this.y += this.height / 2;
        }
        static getSymbol(dynamics) {
            switch (dynamics) {
                case DynamicValue.PPP:
                    return MusicFontSymbol.DynamicPPP;
                case DynamicValue.PP:
                    return MusicFontSymbol.DynamicPP;
                case DynamicValue.P:
                    return MusicFontSymbol.DynamicP;
                case DynamicValue.MP:
                    return MusicFontSymbol.DynamicMP;
                case DynamicValue.MF:
                    return MusicFontSymbol.DynamicMF;
                case DynamicValue.F:
                    return MusicFontSymbol.DynamicF;
                case DynamicValue.FF:
                    return MusicFontSymbol.DynamicFF;
                case DynamicValue.FFF:
                    return MusicFontSymbol.DynamicFFF;
                default:
                    return MusicFontSymbol.None;
            }
        }
    }

    class DynamicsEffectInfo {
        get effectId() {
            return 'dynamics';
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return false;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return this.internalShouldCreateGlyph(beat);
        }
        internalShouldCreateGlyph(beat) {
            if (beat.voice.bar.staff.track.score.stylesheet.hideDynamics || beat.isEmpty || beat.voice.isEmpty) {
                return false;
            }
            let show = (beat.voice.index === 0 && beat.index === 0 && beat.voice.bar.index === 0) ||
                (!!beat.previousBeat && beat.dynamics !== beat.previousBeat.dynamics);
            // ensure we do not show duplicate dynamics
            if (show && beat.voice.index > 0) {
                for (let voice of beat.voice.bar.voices) {
                    if (voice.index < beat.voice.index) {
                        let beatAtSamePos = voice.getBeatAtDisplayStart(beat.displayStart);
                        if (beatAtSamePos &&
                            beat.dynamics === beatAtSamePos.dynamics &&
                            this.internalShouldCreateGlyph(beatAtSamePos)) {
                            show = false;
                        }
                    }
                }
            }
            return show;
        }
        createNewGlyph(renderer, beat) {
            return new DynamicsGlyph(0, 0, beat.dynamics);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class FadeInGlyph extends EffectGlyph {
        doLayout() {
            super.doLayout();
            this.height = 17 * this.scale;
        }
        paint(cx, cy, canvas) {
            let size = 6 * this.scale;
            let width = Math.max(this.width, 14 * this.scale);
            let offset = this.height / 2;
            canvas.beginPath();
            canvas.moveTo(cx + this.x, cy + this.y + offset);
            canvas.quadraticCurveTo(cx + this.x + width / 2, cy + this.y + offset, cx + this.x + width, cy + this.y + offset - size);
            canvas.moveTo(cx + this.x, cy + this.y + offset);
            canvas.quadraticCurveTo(cx + this.x + width / 2, cy + this.y + offset, cx + this.x + width, cy + this.y + offset + size);
            canvas.stroke();
        }
    }

    class FadeInEffectInfo {
        get effectId() {
            return 'fade-in';
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.fadeIn;
        }
        createNewGlyph(renderer, beat) {
            return new FadeInGlyph();
        }
        canExpand(from, to) {
            return true;
        }
    }

    class FermataGlyph extends MusicFontGlyph {
        constructor(x, y, fermata) {
            super(x, y, 1, FermataGlyph.getSymbol(fermata));
        }
        static getSymbol(accentuation) {
            switch (accentuation) {
                case FermataType.Short:
                    return MusicFontSymbol.FermataShort;
                case FermataType.Medium:
                    return MusicFontSymbol.FermataMedium;
                case FermataType.Long:
                    return MusicFontSymbol.FermataLong;
                default:
                    return MusicFontSymbol.None;
            }
        }
        doLayout() {
            this.width = 23 * this.scale;
            this.height = 12 * this.scale;
        }
        paint(cx, cy, canvas) {
            super.paint(cx - this.width / 2, cy + this.height, canvas);
        }
    }

    class FermataEffectInfo {
        get effectId() {
            return 'fermata';
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return false;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return !!beat.fermata;
        }
        createNewGlyph(renderer, beat) {
            return new FermataGlyph(0, 0, beat.fermata.type);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class FingeringEffectInfo {
        get effectId() {
            return 'fingering';
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            if (beat.voice.index !== 0 ||
                beat.isRest ||
                (settings.notation.fingeringMode !== exports.FingeringMode.SingleNoteEffectBand &&
                    settings.notation.fingeringMode !== exports.FingeringMode.SingleNoteEffectBandForcePiano)) {
                return false;
            }
            if (beat.notes.length !== 1) {
                return false;
            }
            return beat.notes[0].isFingering;
        }
        createNewGlyph(renderer, beat) {
            var _a;
            let finger = Fingers.Unknown;
            let isLeft = false;
            let note = beat.notes[0];
            if (note.leftHandFinger !== Fingers.Unknown) {
                finger = note.leftHandFinger;
                isLeft = true;
            }
            else if (note.rightHandFinger !== Fingers.Unknown) {
                finger = note.rightHandFinger;
            }
            let s = (_a = ModelUtils.fingerToString(renderer.settings, beat, finger, isLeft)) !== null && _a !== void 0 ? _a : "";
            return new TextGlyph(0, 0, s, renderer.resources.fingeringFont, TextAlign.Left);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class NoteEffectInfoBase {
        constructor() {
            this.lastCreateInfo = null;
        }
        shouldCreateGlyph(settings, beat) {
            this.lastCreateInfo = [];
            for (let i = 0, j = beat.notes.length; i < j; i++) {
                let n = beat.notes[i];
                if (this.shouldCreateGlyphForNote(n)) {
                    this.lastCreateInfo.push(n);
                }
            }
            return this.lastCreateInfo.length > 0;
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        canExpand(from, to) {
            return true;
        }
    }

    class LineRangedGlyph extends GroupedEffectGlyph {
        constructor(label) {
            super(BeatXPosition.OnNotes);
            this._label = label;
        }
        doLayout() {
            if (this.renderer.settings.notation.extendLineEffectsToBeatEnd) {
                this.endPosition = BeatXPosition.EndBeat;
                this.forceGroupedRendering = true;
            }
            super.doLayout();
            this.height = this.renderer.resources.effectFont.size;
        }
        paintNonGrouped(cx, cy, canvas) {
            let res = this.renderer.resources;
            canvas.font = res.effectFont;
            let x = canvas.textAlign;
            canvas.textAlign = TextAlign.Center;
            canvas.fillText(this._label, cx + this.x, cy + this.y);
            canvas.textAlign = x;
        }
        paintGrouped(cx, cy, endX, canvas) {
            this.paintNonGrouped(cx, cy, canvas);
            let lineSpacing = 3 * this.scale;
            let textWidth = canvas.measureText(this._label);
            let startX = cx + this.x + textWidth / 2 + lineSpacing;
            let lineY = cy + this.y + 4 * this.scale;
            let lineSize = 8 * this.scale;
            if (endX > startX) {
                let lineX = startX;
                while (lineX < endX) {
                    canvas.beginPath();
                    canvas.moveTo(lineX, lineY | 0);
                    canvas.lineTo(Math.min(lineX + lineSize, endX), lineY | 0);
                    lineX += lineSize + lineSpacing;
                    canvas.stroke();
                }
                canvas.beginPath();
                canvas.moveTo(endX, (lineY - 5 * this.scale) | 0);
                canvas.lineTo(endX, (lineY + 5 * this.scale) | 0);
                canvas.stroke();
            }
        }
    }
    LineRangedGlyph.LineSpacing = 3;
    LineRangedGlyph.LineTopPadding = 4;
    LineRangedGlyph.LineTopOffset = 5;
    LineRangedGlyph.LineSize = 8;

    class HarmonicsEffectInfo extends NoteEffectInfoBase {
        constructor(harmonicType) {
            super();
            this._beat = null;
            this._harmonicType = HarmonicType.None;
            this._harmonicType = harmonicType;
            switch (harmonicType) {
                case HarmonicType.None:
                    this._effectId = 'harmonics-none';
                    break;
                case HarmonicType.Natural:
                    this._effectId = 'harmonics-natural';
                    break;
                case HarmonicType.Artificial:
                    this._effectId = 'harmonics-artificial';
                    break;
                case HarmonicType.Pinch:
                    this._effectId = 'harmonics-pinch';
                    break;
                case HarmonicType.Tap:
                    this._effectId = 'harmonics-tap';
                    break;
                case HarmonicType.Semi:
                    this._effectId = 'harmonics-semi';
                    break;
                case HarmonicType.Feedback:
                    this._effectId = 'harmonics-feedback';
                    break;
            }
        }
        get effectId() {
            return this._effectId;
        }
        shouldCreateGlyphForNote(note) {
            if (!note.isHarmonic || note.harmonicType !== this._harmonicType) {
                return false;
            }
            if (note.beat !== this._beat) {
                this._beat = note.beat;
            }
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeat;
        }
        createNewGlyph(renderer, beat) {
            return new LineRangedGlyph(HarmonicsEffectInfo.harmonicToString(this._harmonicType));
        }
        static harmonicToString(type) {
            switch (type) {
                case HarmonicType.Natural:
                    return 'N.H.';
                case HarmonicType.Artificial:
                    return 'A.H.';
                case HarmonicType.Pinch:
                    return 'P.H.';
                case HarmonicType.Tap:
                    return 'T.H.';
                case HarmonicType.Semi:
                    return 'S.H.';
                case HarmonicType.Feedback:
                    return 'Fdbk.';
            }
            return '';
        }
    }

    class LetRingEffectInfo {
        get effectId() {
            return 'let-ring';
        }
        get canShareBand() {
            return false;
        }
        get hideOnMultiTrack() {
            return false;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.isLetRing;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeat;
        }
        createNewGlyph(renderer, beat) {
            return new LineRangedGlyph('LetRing');
        }
        canExpand(from, to) {
            return true;
        }
    }

    class LyricsGlyph extends EffectGlyph {
        constructor(x, y, lines, font, textAlign = TextAlign.Center) {
            super(x, y);
            this._lines = lines;
            this.font = font;
            this.textAlign = textAlign;
        }
        doLayout() {
            super.doLayout();
            this.height = this.font.size * this._lines.length;
        }
        paint(cx, cy, canvas) {
            canvas.font = this.font;
            let old = canvas.textAlign;
            canvas.textAlign = this.textAlign;
            for (let i = 0; i < this._lines.length; i++) {
                if (this._lines[i]) {
                    canvas.fillText(this._lines[i], cx + this.x, cy + this.y + i * this.font.size);
                }
            }
            canvas.textAlign = old;
        }
    }

    class LyricsEffectInfo {
        get effectId() {
            return 'lyrics';
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return false;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return !!beat.lyrics;
        }
        createNewGlyph(renderer, beat) {
            return new LyricsGlyph(0, 0, beat.lyrics, renderer.resources.effectFont, TextAlign.Center);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class MarkerEffectInfo {
        get effectId() {
            return 'marker';
        }
        get hideOnMultiTrack() {
            return true;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SinglePreBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return (beat.voice.bar.staff.index === 0 &&
                beat.voice.index === 0 &&
                beat.index === 0 &&
                beat.voice.bar.masterBar.isSectionStart);
        }
        createNewGlyph(renderer, beat) {
            return new TextGlyph(0, 0, !beat.voice.bar.masterBar.section.marker
                ? beat.voice.bar.masterBar.section.text
                : '[' + beat.voice.bar.masterBar.section.marker + '] ' + beat.voice.bar.masterBar.section.text, renderer.resources.markerFont, TextAlign.Left);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class OttavaGlyph extends GroupedEffectGlyph {
        constructor(ottava, aboveStaff) {
            super(BeatXPosition.PostNotes);
            this._ottava = ottava;
            this._aboveStaff = aboveStaff;
        }
        doLayout() {
            super.doLayout();
            this.height = 13 * this.scale;
        }
        paintNonGrouped(cx, cy, canvas) {
            this.paintOttava(cx, cy, canvas);
        }
        paintOttava(cx, cy, canvas) {
            let size = 0;
            switch (this._ottava) {
                case Ottavia._15ma:
                    size = 37 * this.scale;
                    canvas.fillMusicFontSymbol(cx + this.x - size / 2, cy + this.y + this.height, 0.8, MusicFontSymbol.Ottava15ma, false);
                    break;
                case Ottavia._8va:
                    size = 26 * this.scale;
                    canvas.fillMusicFontSymbol(cx + this.x - size / 2, cy + this.y + this.height, 0.8, MusicFontSymbol.Ottava8va, false);
                    break;
                case Ottavia._8vb:
                    size = 23 * this.scale;
                    canvas.fillMusicFontSymbol(cx + this.x - size / 2, cy + this.y + this.height, 0.8, MusicFontSymbol.Ottava8vb, false);
                    break;
                case Ottavia._15mb:
                    size = 36 * this.scale;
                    // NOTE: SMUFL does not have a glyph for 15mb so we build it
                    canvas.fillMusicFontSymbols(cx + this.x - size / 2, cy + this.y + this.height, 0.8, [MusicFontSymbol.Ottava15, MusicFontSymbol.OttavaMBaseline, MusicFontSymbol.OttavaBBaseline], false);
                    break;
            }
            return size / 2;
        }
        paintGrouped(cx, cy, endX, canvas) {
            let size = this.paintOttava(cx, cy, canvas);
            let lineSpacing = 3 * this.scale;
            let startX = cx + this.x + size + lineSpacing;
            let lineY = cy + this.y;
            lineY += this._aboveStaff ? 2 * this.scale : this.height - 2 * this.scale;
            let lineSize = 8 * this.scale;
            if (endX > startX) {
                let lineX = startX;
                while (lineX < endX) {
                    canvas.beginPath();
                    canvas.moveTo(lineX, lineY | 0);
                    canvas.lineTo(Math.min(lineX + lineSize, endX), lineY | 0);
                    lineX += lineSize + lineSpacing;
                    canvas.stroke();
                }
                canvas.beginPath();
                if (this._aboveStaff) {
                    canvas.moveTo(endX, lineY);
                    canvas.lineTo(endX, cy + this.y + this.height);
                }
                else {
                    canvas.moveTo(endX, lineY);
                    canvas.lineTo(endX, cy + this.y);
                }
                canvas.stroke();
            }
        }
    }

    class OttaviaEffectInfo {
        constructor(aboveStaff) {
            this._aboveStaff = aboveStaff;
        }
        get effectId() {
            return 'ottavia-' + (this._aboveStaff ? 'above' : 'below');
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            switch (beat.ottava) {
                case Ottavia._15ma:
                    return this._aboveStaff;
                case Ottavia._8va:
                    return this._aboveStaff;
                case Ottavia._8vb:
                    return !this._aboveStaff;
                case Ottavia._15mb:
                    return !this._aboveStaff;
            }
            return false;
        }
        createNewGlyph(renderer, beat) {
            return new OttavaGlyph(beat.ottava, this._aboveStaff);
        }
        canExpand(from, to) {
            return from.ottava === to.ottava;
        }
    }

    class PalmMuteEffectInfo extends NoteEffectInfoBase {
        get effectId() {
            return 'palm-mute';
        }
        shouldCreateGlyphForNote(note) {
            return note.isPalmMute;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeat;
        }
        createNewGlyph(renderer, beat) {
            return new LineRangedGlyph('P.M.');
        }
        constructor() {
            super();
        }
    }

    class PickSlideEffectInfo extends NoteEffectInfoBase {
        get effectId() {
            return 'pick-slide';
        }
        shouldCreateGlyphForNote(note) {
            return note.slideOutType === SlideOutType.PickSlideDown || note.slideOutType === SlideOutType.PickSlideUp;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeat;
        }
        createNewGlyph(renderer, beat) {
            return new LineRangedGlyph('P.S.');
        }
        constructor() {
            super();
        }
    }

    class PickStrokeGlyph extends MusicFontGlyph {
        constructor(x, y, pickStroke) {
            super(x, y, NoteHeadGlyph.GraceScale, PickStrokeGlyph.getSymbol(pickStroke));
        }
        doLayout() {
            this.width = 9 * this.scale;
            this.height = 10 * this.scale;
        }
        paint(cx, cy, canvas) {
            super.paint(cx, cy + this.height, canvas);
        }
        static getSymbol(pickStroke) {
            switch (pickStroke) {
                case PickStroke.Up:
                    return MusicFontSymbol.PickStrokeUp;
                case PickStroke.Down:
                    return MusicFontSymbol.PickStrokeDown;
                default:
                    return MusicFontSymbol.None;
            }
        }
    }

    class PickStrokeEffectInfo {
        get effectId() {
            return 'pick-stroke';
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.pickStroke !== PickStroke.None;
        }
        createNewGlyph(renderer, beat) {
            return new PickStrokeGlyph(0, 0, beat.pickStroke);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class BeatVibratoGlyph extends GroupedEffectGlyph {
        constructor(type) {
            super(BeatXPosition.EndBeat);
            this._stepSize = 0;
            this._type = type;
        }
        doLayout() {
            super.doLayout();
            switch (this._type) {
                case VibratoType.Slight:
                    this._stepSize = 12 * this.scale;
                    break;
                case VibratoType.Wide:
                    this._stepSize = 23 * this.scale;
                    break;
            }
            this.height = 18 * this.scale;
        }
        paintGrouped(cx, cy, endX, canvas) {
            let startX = cx + this.x;
            let width = endX - startX;
            let loops = Math.max(1, width / this._stepSize);
            canvas.beginPath();
            canvas.moveTo(startX, cy + this.y);
            for (let i = 0; i < loops; i++) {
                canvas.lineTo(startX + this._stepSize / 2, cy + this.y + this.height);
                canvas.lineTo(startX + this._stepSize, cy + this.y);
                startX += this._stepSize;
            }
            canvas.stroke();
        }
    }

    class SlightBeatVibratoEffectInfo {
        get effectId() {
            return 'slight-beat-vibrato';
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeatToEnd;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.vibrato === VibratoType.Slight;
        }
        createNewGlyph(renderer, beat) {
            return new BeatVibratoGlyph(VibratoType.Slight);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class NoteVibratoGlyph extends GroupedEffectGlyph {
        constructor(x, y, type, scale = 1.2) {
            super(BeatXPosition.EndBeat);
            this._scale = 0;
            this._symbol = MusicFontSymbol.None;
            this._symbolSize = 0;
            this._symbolOffset = 0;
            this._type = type;
            this._scale = scale;
            this.x = x;
            this.y = y;
        }
        doLayout() {
            super.doLayout();
            let symbolHeight = 0;
            switch (this._type) {
                case VibratoType.Slight:
                    this._symbol = MusicFontSymbol.WaveHorizontalSlight;
                    this._symbolSize = 10 * this._scale;
                    this._symbolOffset = 8.5 * this._scale;
                    symbolHeight = 6 * this._scale;
                    break;
                case VibratoType.Wide:
                    this._symbol = MusicFontSymbol.WaveHorizontalWide;
                    this._symbolSize = 10 * this._scale;
                    this._symbolOffset = 7 * this._scale;
                    symbolHeight = 10 * this._scale;
                    break;
            }
            this.height = symbolHeight * this.scale;
        }
        paintGrouped(cx, cy, endX, canvas) {
            let startX = cx + this.x;
            let width = endX - startX;
            let step = this._symbolSize * this.scale;
            let loops = Math.max(1, width / step);
            let loopX = 0;
            for (let i = 0; i < loops; i++) {
                canvas.fillMusicFontSymbol(cx + this.x + loopX, cy + this.y + this._symbolOffset, this._scale, this._symbol, false);
                loopX += step;
            }
        }
    }

    class SlightNoteVibratoEffectInfo extends NoteEffectInfoBase {
        get effectId() {
            return 'slight-note-vibrato';
        }
        shouldCreateGlyphForNote(note) {
            return (note.vibrato === VibratoType.Slight ||
                (note.isTieDestination && note.tieOrigin.vibrato === VibratoType.Slight));
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeatToEnd;
        }
        createNewGlyph(renderer, beat) {
            return new NoteVibratoGlyph(0, 0, VibratoType.Slight, 1.2);
        }
        constructor() {
            super();
        }
    }

    class TapEffectInfo {
        get effectId() {
            return 'tap';
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.slap || beat.pop || beat.tap;
        }
        createNewGlyph(renderer, beat) {
            let res = renderer.resources;
            if (beat.slap) {
                return new TextGlyph(0, 0, 'S', res.effectFont, TextAlign.Left);
            }
            if (beat.pop) {
                return new TextGlyph(0, 0, 'P', res.effectFont, TextAlign.Left);
            }
            return new TextGlyph(0, 0, 'T', res.effectFont, TextAlign.Left);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class TempoGlyph extends EffectGlyph {
        constructor(x, y, tempo) {
            super(x, y);
            this._tempo = 0;
            this._tempo = tempo;
        }
        doLayout() {
            super.doLayout();
            this.height = 25 * this.scale;
        }
        paint(cx, cy, canvas) {
            let res = this.renderer.resources;
            canvas.font = res.markerFont;
            canvas.fillMusicFontSymbol(cx + this.x, cy + this.y + this.height * 0.8, this.scale * NoteHeadGlyph.GraceScale, MusicFontSymbol.Tempo, false);
            canvas.fillText('= ' + this._tempo, cx + this.x + this.height / 2, cy + this.y + canvas.font.size / 2);
        }
    }

    class TempoEffectInfo {
        get effectId() {
            return 'tempo';
        }
        get hideOnMultiTrack() {
            return true;
        }
        get canShareBand() {
            return false;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SinglePreBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return (beat.voice.bar.staff.index === 0 &&
                beat.voice.index === 0 &&
                beat.index === 0 &&
                (!!beat.voice.bar.masterBar.tempoAutomation || beat.voice.bar.index === 0));
        }
        createNewGlyph(renderer, beat) {
            let tempo = 0;
            if (beat.voice.bar.masterBar.tempoAutomation) {
                tempo = beat.voice.bar.masterBar.tempoAutomation.value;
            }
            else {
                tempo = beat.voice.bar.staff.track.score.tempo;
            }
            return new TempoGlyph(0, 0, tempo);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class TextEffectInfo {
        get effectId() {
            return 'text';
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return false;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return !!beat.text;
        }
        createNewGlyph(renderer, beat) {
            return new TextGlyph(0, 0, beat.text, renderer.resources.effectFont, TextAlign.Left);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class TrillGlyph extends EffectGlyph {
        constructor(x, y) {
            super(x, y);
        }
        doLayout() {
            super.doLayout();
            this.height = 20 * this.scale;
        }
        paint(cx, cy, canvas) {
            let res = this.renderer.resources;
            canvas.font = res.markerFont;
            let textw = canvas.measureText('tr');
            canvas.fillText('tr', cx + this.x, cy + this.y + canvas.font.size / 2);
            let startX = textw + 3 * this.scale;
            let endX = this.width - startX;
            let waveScale = 1.2;
            let step = 11 * this.scale * waveScale;
            let loops = Math.max(1, (endX - startX) / step);
            let loopX = startX;
            let loopY = cy + this.y + this.height;
            for (let i = 0; i < loops; i++) {
                canvas.fillMusicFontSymbol(cx + this.x + loopX, loopY, waveScale, MusicFontSymbol.WaveHorizontalSlight, false);
                loopX += step;
            }
        }
    }

    class TrillEffectInfo extends NoteEffectInfoBase {
        get effectId() {
            return 'trill';
        }
        shouldCreateGlyphForNote(note) {
            return note.isTrill;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SingleOnBeat;
        }
        createNewGlyph(renderer, beat) {
            return new TrillGlyph(0, 0);
        }
    }

    var TripletFeelGlyphBarType;
    (function (TripletFeelGlyphBarType) {
        TripletFeelGlyphBarType[TripletFeelGlyphBarType["Full"] = 0] = "Full";
        TripletFeelGlyphBarType[TripletFeelGlyphBarType["PartialLeft"] = 1] = "PartialLeft";
        TripletFeelGlyphBarType[TripletFeelGlyphBarType["PartialRight"] = 2] = "PartialRight";
    })(TripletFeelGlyphBarType || (TripletFeelGlyphBarType = {}));
    class TripletFeelGlyph extends EffectGlyph {
        constructor(tripletFeel) {
            super(0, 0);
            this._tripletFeel = tripletFeel;
        }
        doLayout() {
            super.doLayout();
            this.height = 25 * this.scale;
        }
        paint(cx, cy, canvas) {
            cx += this.x;
            cy += this.y;
            let noteY = cy + this.height * NoteHeadGlyph.GraceScale;
            canvas.font = this.renderer.resources.effectFont;
            canvas.fillText('(', cx, cy + this.height * 0.3);
            let leftNoteX = cx + 10 * this.scale;
            let rightNoteX = cx + 40 * this.scale;
            switch (this._tripletFeel) {
                case TripletFeel.NoTripletFeel:
                    this.renderBarNote(leftNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [TripletFeelGlyphBarType.Full]);
                    this.renderBarNote(rightNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [TripletFeelGlyphBarType.Full]);
                    break;
                case TripletFeel.Triplet8th:
                    this.renderBarNote(leftNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [TripletFeelGlyphBarType.Full]);
                    canvas.fillMusicFontSymbol(rightNoteX, noteY, TripletFeelGlyph.NoteScale, MusicFontSymbol.Tempo, false);
                    canvas.fillMusicFontSymbol(rightNoteX + TripletFeelGlyph.NoteSeparation * this.scale, noteY, TripletFeelGlyph.NoteScale, MusicFontSymbol.NoteEighth, false);
                    this.renderTriplet(rightNoteX, cy, canvas);
                    break;
                case TripletFeel.Triplet16th:
                    this.renderBarNote(leftNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [
                        TripletFeelGlyphBarType.Full,
                        TripletFeelGlyphBarType.Full
                    ]);
                    this.renderBarNote(rightNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [
                        TripletFeelGlyphBarType.Full,
                        TripletFeelGlyphBarType.PartialRight
                    ]);
                    this.renderTriplet(rightNoteX, cy, canvas);
                    break;
                case TripletFeel.Dotted8th:
                    this.renderBarNote(leftNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [TripletFeelGlyphBarType.Full]);
                    this.renderBarNote(rightNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [
                        TripletFeelGlyphBarType.Full,
                        TripletFeelGlyphBarType.PartialRight
                    ]);
                    canvas.fillCircle(rightNoteX + 9 * this.scale, noteY, this.scale);
                    break;
                case TripletFeel.Dotted16th:
                    this.renderBarNote(leftNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [
                        TripletFeelGlyphBarType.Full,
                        TripletFeelGlyphBarType.Full
                    ]);
                    this.renderBarNote(rightNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [
                        TripletFeelGlyphBarType.Full,
                        TripletFeelGlyphBarType.Full,
                        TripletFeelGlyphBarType.PartialRight
                    ]);
                    canvas.fillCircle(rightNoteX + 9 * this.scale, noteY, this.scale);
                    break;
                case TripletFeel.Scottish8th:
                    this.renderBarNote(leftNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [TripletFeelGlyphBarType.Full]);
                    this.renderBarNote(rightNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [
                        TripletFeelGlyphBarType.Full,
                        TripletFeelGlyphBarType.PartialLeft
                    ]);
                    canvas.fillCircle(rightNoteX + TripletFeelGlyph.NoteSeparation * this.scale + 8 * this.scale, noteY, this.scale);
                    break;
                case TripletFeel.Scottish16th:
                    this.renderBarNote(leftNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [
                        TripletFeelGlyphBarType.Full,
                        TripletFeelGlyphBarType.Full
                    ]);
                    this.renderBarNote(rightNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [
                        TripletFeelGlyphBarType.Full,
                        TripletFeelGlyphBarType.Full,
                        TripletFeelGlyphBarType.PartialLeft
                    ]);
                    canvas.fillCircle(rightNoteX + TripletFeelGlyph.NoteSeparation * this.scale + 8 * this.scale, noteY, this.scale);
                    break;
            }
            canvas.fillText('=', cx + 30 * this.scale, cy + 5 * this.scale);
            canvas.fillText(')', cx + 65 * this.scale, cy + this.height * 0.3);
        }
        renderBarNote(cx, noteY, noteScale, canvas, bars) {
            canvas.fillMusicFontSymbol(cx, noteY, noteScale, MusicFontSymbol.Tempo, false);
            let partialBarWidth = (TripletFeelGlyph.NoteSeparation / 2) * this.scale;
            for (let i = 0; i < bars.length; i++) {
                switch (bars[i]) {
                    case TripletFeelGlyphBarType.Full:
                        canvas.fillRect(cx + 4 * this.scale, noteY - TripletFeelGlyph.NoteHeight * this.scale + TripletFeelGlyph.BarSeparation * this.scale * i, TripletFeelGlyph.NoteSeparation * this.scale, TripletFeelGlyph.BarHeight * this.scale);
                        break;
                    case TripletFeelGlyphBarType.PartialLeft:
                        canvas.fillRect(cx + 4 * this.scale, noteY - TripletFeelGlyph.NoteHeight * this.scale + TripletFeelGlyph.BarSeparation * this.scale * i, partialBarWidth, TripletFeelGlyph.BarHeight * this.scale);
                        break;
                    case TripletFeelGlyphBarType.PartialRight:
                        canvas.fillRect(cx + 4 * this.scale + partialBarWidth, noteY - TripletFeelGlyph.NoteHeight * this.scale + TripletFeelGlyph.BarSeparation * this.scale * i, partialBarWidth, TripletFeelGlyph.BarHeight * this.scale);
                        break;
                }
            }
            canvas.fillMusicFontSymbol(cx + TripletFeelGlyph.NoteSeparation * this.scale, noteY, noteScale, MusicFontSymbol.Tempo, false);
        }
        renderTriplet(cx, cy, canvas) {
            cy += 2 * this.scale;
            let font = this.renderer.resources.effectFont;
            canvas.font = new Font(font.family, font.size * 0.8, font.style);
            let rightX = cx + TripletFeelGlyph.NoteSeparation * this.scale + 3 * this.scale;
            canvas.beginPath();
            canvas.moveTo(cx, cy + 3 * this.scale);
            canvas.lineTo(cx, cy);
            canvas.lineTo(cx + 5 * this.scale, cy);
            canvas.moveTo(rightX + 5 * this.scale, cy + 3 * this.scale);
            canvas.lineTo(rightX + 5 * this.scale, cy);
            canvas.lineTo(rightX, cy);
            canvas.stroke();
            canvas.fillText('3', cx + 7 * this.scale, cy - 10 * this.scale);
            canvas.font = font;
        }
    }
    TripletFeelGlyph.NoteScale = 0.4;
    TripletFeelGlyph.NoteHeight = 12;
    TripletFeelGlyph.NoteSeparation = 12;
    TripletFeelGlyph.BarHeight = 2;
    TripletFeelGlyph.BarSeparation = 3;

    class TripletFeelEffectInfo {
        get effectId() {
            return 'triplet-feel';
        }
        get hideOnMultiTrack() {
            return true;
        }
        get canShareBand() {
            return false;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.SinglePreBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return (beat.index === 0 &&
                ((beat.voice.bar.masterBar.index === 0 &&
                    beat.voice.bar.masterBar.tripletFeel !== TripletFeel.NoTripletFeel) ||
                    (beat.voice.bar.masterBar.index > 0 &&
                        beat.voice.bar.masterBar.tripletFeel !== beat.voice.bar.masterBar.previousMasterBar.tripletFeel)));
        }
        createNewGlyph(renderer, beat) {
            return new TripletFeelGlyph(beat.voice.bar.masterBar.tripletFeel);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class WhammyBarEffectInfo {
        get effectId() {
            return 'whammy';
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return false;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeat;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.hasWhammyBar;
        }
        createNewGlyph(renderer, beat) {
            return new LineRangedGlyph('w/bar');
        }
        canExpand(from, to) {
            return true;
        }
    }

    class WideBeatVibratoEffectInfo {
        get effectId() {
            return 'wide-beat-vibrato';
        }
        get hideOnMultiTrack() {
            return false;
        }
        get canShareBand() {
            return true;
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeatToEnd;
        }
        shouldCreateGlyph(settings, beat) {
            return beat.vibrato === VibratoType.Wide;
        }
        createNewGlyph(renderer, beat) {
            return new BeatVibratoGlyph(VibratoType.Wide);
        }
        canExpand(from, to) {
            return true;
        }
    }

    class WideNoteVibratoEffectInfo extends NoteEffectInfoBase {
        get effectId() {
            return 'wide-note-vibrato';
        }
        shouldCreateGlyphForNote(note) {
            return (note.vibrato === VibratoType.Wide || (note.isTieDestination && note.tieOrigin.vibrato === VibratoType.Wide));
        }
        get sizingMode() {
            return EffectBarGlyphSizing.GroupedOnBeatToEnd;
        }
        createNewGlyph(renderer, beat) {
            return new NoteVibratoGlyph(0, 0, VibratoType.Wide, 1.2);
        }
    }

    class ChordDiagramGlyph extends EffectGlyph {
        constructor(x, y, chord) {
            super(x, y);
            this._textRow = 0;
            this._fretRow = 0;
            this._firstFretSpacing = 0;
            this._chord = chord;
        }
        doLayout() {
            super.doLayout();
            let res = this.renderer.resources;
            this._textRow = res.effectFont.size * 1.5;
            this._fretRow = res.effectFont.size * 1.5;
            if (this._chord.firstFret > 1) {
                this._firstFretSpacing = ChordDiagramGlyph.FretSpacing * this.scale;
            }
            else {
                this._firstFretSpacing = 0;
            }
            this.height =
                this._textRow +
                    this._fretRow +
                    (ChordDiagramGlyph.Frets - 1) * ChordDiagramGlyph.FretSpacing * this.scale +
                    2 * ChordDiagramGlyph.Padding;
            this.width =
                this._firstFretSpacing +
                    (this._chord.staff.tuning.length - 1) * ChordDiagramGlyph.StringSpacing * this.scale +
                    2 * ChordDiagramGlyph.Padding;
        }
        paint(cx, cy, canvas) {
            cx += this.x + ChordDiagramGlyph.Padding * this.scale + this._firstFretSpacing;
            cy += this.y;
            let w = this.width - 2 * ChordDiagramGlyph.Padding * this.scale + this.scale - this._firstFretSpacing;
            let stringSpacing = ChordDiagramGlyph.StringSpacing * this.scale;
            let fretSpacing = ChordDiagramGlyph.FretSpacing * this.scale;
            let res = this.renderer.resources;
            let circleRadius = ChordDiagramGlyph.CircleRadius * this.scale;
            let align = canvas.textAlign;
            let baseline = canvas.textBaseline;
            canvas.font = res.effectFont;
            canvas.textAlign = TextAlign.Center;
            canvas.textBaseline = TextBaseline.Top;
            if (this._chord.showName) {
                canvas.fillText(this._chord.name, cx + this.width / 2, cy + res.effectFont.size / 2);
            }
            cy += this._textRow;
            cx += stringSpacing / 2;
            canvas.font = res.fretboardNumberFont;
            canvas.textBaseline = TextBaseline.Middle;
            for (let i = 0; i < this._chord.staff.tuning.length; i++) {
                let x = cx + i * stringSpacing;
                let y = cy + this._fretRow / 2;
                let fret = this._chord.strings[this._chord.staff.tuning.length - i - 1];
                if (fret < 0) {
                    canvas.fillMusicFontSymbol(x, y, this.scale, MusicFontSymbol.FretboardX, true);
                }
                else if (fret === 0) {
                    canvas.fillMusicFontSymbol(x, y, this.scale, MusicFontSymbol.FretboardO, true);
                }
                else {
                    fret -= this._chord.firstFret - 1;
                    canvas.fillText(fret.toString(), x, y);
                }
            }
            cy += this._fretRow;
            for (let i = 0; i < this._chord.staff.tuning.length; i++) {
                let x = cx + i * stringSpacing;
                canvas.fillRect(x, cy, 1, fretSpacing * ChordDiagramGlyph.Frets + this.scale);
            }
            if (this._chord.firstFret > 1) {
                canvas.textAlign = TextAlign.Left;
                canvas.fillText(this._chord.firstFret.toString(), cx - this._firstFretSpacing, cy + fretSpacing / 2);
            }
            canvas.fillRect(cx, cy - this.scale, w, 2 * this.scale);
            for (let i = 0; i <= ChordDiagramGlyph.Frets; i++) {
                let y = cy + i * fretSpacing;
                canvas.fillRect(cx, y, w, this.scale);
            }
            let barreLookup = new Map();
            for (let barreFret of this._chord.barreFrets) {
                let strings = [-1, -1];
                barreLookup.set(barreFret - this._chord.firstFret, strings);
            }
            for (let guitarString = 0; guitarString < this._chord.strings.length; guitarString++) {
                let fret = this._chord.strings[guitarString];
                if (fret > 0) {
                    fret -= this._chord.firstFret;
                    if (barreLookup.has(fret)) {
                        let info = barreLookup.get(fret);
                        if (info[0] === -1 || guitarString < info[0]) {
                            info[0] = guitarString;
                        }
                        if (info[1] === -1 || guitarString > info[1]) {
                            info[1] = guitarString;
                        }
                    }
                    let y = cy + fret * fretSpacing + fretSpacing / 2 + 0.5;
                    let x = cx + (this._chord.strings.length - guitarString - 1) * stringSpacing;
                    canvas.fillCircle(x, y, circleRadius);
                }
            }
            for (let kvp of barreLookup) {
                let strings = kvp[1];
                let y = cy + kvp[0] * fretSpacing + fretSpacing / 2 + this.scale;
                let xLeft = cx + (this._chord.strings.length - strings[1] - 1) * stringSpacing;
                let xRight = cx + (this._chord.strings.length - strings[0] - 1) * stringSpacing;
                canvas.fillRect(xLeft, y - circleRadius, xRight - xLeft, circleRadius * 2);
            }
            canvas.textAlign = align;
            canvas.textBaseline = baseline;
        }
    }
    ChordDiagramGlyph.Padding = 5;
    ChordDiagramGlyph.Frets = 5;
    ChordDiagramGlyph.CircleRadius = 2.5;
    ChordDiagramGlyph.StringSpacing = 10;
    ChordDiagramGlyph.FretSpacing = 12;

    class ChordDiagramRowGlyph extends GlyphGroup {
        constructor(x, y) {
            super(x, y);
            this._glyphWidth = 0;
            this.height = 0;
            this.glyphs = [];
        }
        doLayout() {
            let x = (this.width - this._glyphWidth) / 2;
            for (let glyph of this.glyphs) {
                glyph.x = x;
                x += glyph.width;
            }
        }
        addChord(chord) {
            this.glyphs.push(chord);
            this._glyphWidth += chord.width;
            if (chord.height > this.height) {
                this.height = chord.height;
            }
        }
    }

    class ChordDiagramContainerGlyph extends GlyphGroup {
        constructor(x, y) {
            super(x, y);
            this._rows = [];
            this.height = 0;
            this.height = 0.0;
            this.glyphs = [];
        }
        addChord(chord) {
            if (chord.strings.length > 0) {
                let chordDiagram = new ChordDiagramGlyph(0, 0, chord);
                chordDiagram.renderer = this.renderer;
                chordDiagram.doLayout();
                this.glyphs.push(chordDiagram);
            }
        }
        doLayout() {
            let x = 0;
            let y = 0;
            let padding = 2 * ChordDiagramContainerGlyph.Padding * this.scale;
            this._rows = [];
            let row = new ChordDiagramRowGlyph(x, y);
            row.width = this.width;
            for (let g of this.glyphs) {
                if (x + g.width < this.width) {
                    row.addChord(g);
                    x += g.width;
                }
                else {
                    if (!row.isEmpty) {
                        row.doLayout();
                        this._rows.push(row);
                        y += row.height + padding;
                    }
                    x = 0;
                    row = new ChordDiagramRowGlyph(x, y);
                    row.width = this.width;
                    row.addChord(g);
                    x += g.width;
                }
            }
            if (!row.isEmpty) {
                row.doLayout();
                this._rows.push(row);
                y += row.height + padding;
            }
            this.height = y + padding;
        }
        paint(cx, cy, canvas) {
            for (let row of this._rows) {
                row.paint(cx + this.x, cy + this.y + ChordDiagramContainerGlyph.Padding * this.scale, canvas);
            }
        }
    }
    ChordDiagramContainerGlyph.Padding = 3;

    class TuningGlyph extends GlyphGroup {
        constructor(x, y, scale, resources, tuning) {
            super(x, y);
            this._scale = 0;
            this.height = 0;
            this._scale = scale;
            this._resources = resources;
            this.createGlyphs(tuning);
        }
        createGlyphs(tuning) {
            // Name
            this.addGlyph(new TextGlyph(0, 0, tuning.name, this._resources.effectFont, TextAlign.Left));
            this.height += 15 * this._scale;
            if (!tuning.isStandard) {
                // Strings
                let stringsPerColumn = Math.ceil(tuning.tunings.length / 2.0) | 0;
                let currentX = 0;
                let currentY = this.height;
                for (let i = 0, j = tuning.tunings.length; i < j; i++) {
                    let str = '(' + (i + 1) + ') = ' + Tuning.getTextForTuning(tuning.tunings[i], false);
                    this.addGlyph(new TextGlyph(currentX, currentY, str, this._resources.effectFont, TextAlign.Left));
                    currentY += this.height;
                    if (i === stringsPerColumn - 1) {
                        currentY = this.height;
                        currentX += 43 * this._scale;
                    }
                }
                this.height += stringsPerColumn * (15 * this._scale);
            }
        }
    }

    /**
     * A list of the elements which can be shown in the header and footer
     * of a rendered song sheet. All values can be combined using bit-operators as they are flags.
     */
    var HeaderFooterElements;
    (function (HeaderFooterElements) {
        /**
         * No elements get rendered.
         */
        HeaderFooterElements[HeaderFooterElements["None"] = 0] = "None";
        /**
         * Enables rendering of the title.
         */
        HeaderFooterElements[HeaderFooterElements["Title"] = 1] = "Title";
        /**
         * Enables rendering of the subtitle.
         */
        HeaderFooterElements[HeaderFooterElements["SubTitle"] = 2] = "SubTitle";
        /**
         * Enables rendering of the artist.
         */
        HeaderFooterElements[HeaderFooterElements["Artist"] = 4] = "Artist";
        /**
         * Enables rendering of the album.
         */
        HeaderFooterElements[HeaderFooterElements["Album"] = 8] = "Album";
        /**
         * Enables rendering of the words.
         */
        HeaderFooterElements[HeaderFooterElements["Words"] = 16] = "Words";
        /**
         * Enables rendering of the music.
         */
        HeaderFooterElements[HeaderFooterElements["Music"] = 32] = "Music";
        /**
         * Enables rendering of the words and music.
         */
        HeaderFooterElements[HeaderFooterElements["WordsAndMusic"] = 64] = "WordsAndMusic";
        /**
         * Enables rendering of the copyright.
         */
        HeaderFooterElements[HeaderFooterElements["Copyright"] = 128] = "Copyright";
        /**
         * Enables rendering of the page number.
         */
        HeaderFooterElements[HeaderFooterElements["PageNumber"] = 256] = "PageNumber";
        /**
         * Enables rendering of all elements.
         */
        HeaderFooterElements[HeaderFooterElements["All"] = 511] = "All";
    })(HeaderFooterElements || (HeaderFooterElements = {}));

    /**
     * A Staff represents a single line within a StaveGroup.
     * It stores BarRenderer instances created from a given factory.
     */
    class RenderStaff {
        constructor(trackIndex, staff, factory) {
            this._sharedLayoutData = new Map();
            this.barRenderers = [];
            this.x = 0;
            this.y = 0;
            this.height = 0;
            this.index = 0;
            this.staffIndex = 0;
            /**
             * This is the index of the track being rendered. This is not the index of the track within the model,
             * but the n-th track being rendered. It is the index of the {@link ScoreRenderer.tracks} array defining
             * which tracks should be rendered.
             * For single-track rendering this will always be zero.
             */
            this.trackIndex = 0;
            /**
             * This is the visual offset from top where the
             * Staff contents actually start. Used for grouping
             * using a accolade
             */
            this.staveTop = 0;
            this.topSpacing = 20;
            this.bottomSpacing = 5;
            /**
             * This is the visual offset from top where the
             * Staff contents actually ends. Used for grouping
             * using a accolade
             */
            this.staveBottom = 0;
            this.isFirstInAccolade = false;
            this.isLastInAccolade = false;
            this._factory = factory;
            this.trackIndex = trackIndex;
            this.modelStaff = staff;
        }
        get staveId() {
            return this._factory.staffId;
        }
        getSharedLayoutData(key, def) {
            if (this._sharedLayoutData.has(key)) {
                return this._sharedLayoutData.get(key);
            }
            return def;
        }
        setSharedLayoutData(key, def) {
            this._sharedLayoutData.set(key, def);
        }
        get isInAccolade() {
            return this._factory.isInAccolade;
        }
        get isRelevantForBoundsLookup() {
            return this._factory.isRelevantForBoundsLookup;
        }
        registerStaffTop(offset) {
            this.staveTop = offset;
        }
        registerStaffBottom(offset) {
            this.staveBottom = offset;
        }
        addBarRenderer(renderer) {
            renderer.staff = this;
            renderer.index = this.barRenderers.length;
            renderer.reLayout();
            this.barRenderers.push(renderer);
            this.staveGroup.layout.registerBarRenderer(this.staveId, renderer);
        }
        addBar(bar, layoutingInfo) {
            let renderer;
            if (!bar) {
                renderer = new BarRendererBase(this.staveGroup.layout.renderer, bar);
            }
            else {
                renderer = this._factory.create(this.staveGroup.layout.renderer, bar);
            }
            renderer.staff = this;
            renderer.index = this.barRenderers.length;
            renderer.layoutingInfo = layoutingInfo;
            renderer.doLayout();
            renderer.registerLayoutingInfo();
            this.barRenderers.push(renderer);
            if (bar) {
                this.staveGroup.layout.registerBarRenderer(this.staveId, renderer);
            }
        }
        revertLastBar() {
            let lastBar = this.barRenderers[this.barRenderers.length - 1];
            this.barRenderers.splice(this.barRenderers.length - 1, 1);
            this.staveGroup.layout.unregisterBarRenderer(this.staveId, lastBar);
            return lastBar;
        }
        scaleToWidth(width) {
            this._sharedLayoutData = new Map();
            // Note: here we could do some "intelligent" distribution of
            // the space over the bar renderers, for now we evenly apply the space to all bars
            let difference = width - this.staveGroup.width;
            let spacePerBar = difference / this.barRenderers.length;
            for (let i = 0, j = this.barRenderers.length; i < j; i++) {
                this.barRenderers[i].scaleToWidth(this.barRenderers[i].width + spacePerBar);
            }
        }
        get topOverflow() {
            let m = 0;
            for (let i = 0, j = this.barRenderers.length; i < j; i++) {
                let r = this.barRenderers[i];
                if (r.topOverflow > m) {
                    m = r.topOverflow;
                }
            }
            return m;
        }
        get bottomOverflow() {
            let m = 0;
            for (let i = 0, j = this.barRenderers.length; i < j; i++) {
                let r = this.barRenderers[i];
                if (r.bottomOverflow > m) {
                    m = r.bottomOverflow;
                }
            }
            return m;
        }
        finalizeStaff() {
            let x = 0;
            this.height = 0;
            let topOverflow = this.topOverflow;
            let bottomOverflow = this.bottomOverflow;
            for (let i = 0; i < this.barRenderers.length; i++) {
                this.barRenderers[i].x = x;
                this.barRenderers[i].y = this.topSpacing + topOverflow;
                this.height = Math.max(this.height, this.barRenderers[i].height);
                this.barRenderers[i].finalizeRenderer();
                x += this.barRenderers[i].width;
            }
            if (this.height > 0) {
                this.height += this.topSpacing + topOverflow + bottomOverflow + this.bottomSpacing;
            }
        }
        paint(cx, cy, canvas, startIndex, count) {
            if (this.height === 0 || count === 0) {
                return;
            }
            for (let i = startIndex, j = Math.min(startIndex + count, this.barRenderers.length); i < j; i++) {
                this.barRenderers[i].paint(cx + this.x, cy + this.y, canvas);
            }
        }
    }

    class Spring {
        constructor() {
            this.timePosition = 0;
            this.longestDuration = 0;
            this.smallestDuration = 0;
            this.force = 0;
            this.springConstant = 0;
            this.preSpringWidth = 0;
            this.postSpringWidth = 0;
            this.allDurations = [];
        }
        get springWidth() {
            return this.preSpringWidth + this.postSpringWidth;
        }
    }

    /**
     * This public class stores size information about a stave.
     * It is used by the layout engine to collect the sizes of score parts
     * to align the parts across multiple staves.
     */
    class BarLayoutingInfo {
        constructor() {
            this._timeSortedSprings = [];
            this._xMin = 0;
            this._minTime = -1;
            this._onTimePositionsForce = 0;
            this._onTimePositions = new Map();
            /**
             * an internal version number that increments whenever a change was made.
             */
            this.version = 0;
            this.preBeatSizes = new Map();
            this.onBeatSizes = new Map();
            this.onBeatCenterX = new Map();
            this.preBeatSize = 0;
            this.postBeatSize = 0;
            this.voiceSize = 0;
            this.minStretchForce = 0;
            this.totalSpringConstant = 0;
            this.springs = new Map();
        }
        updateVoiceSize(size) {
            if (size > this.voiceSize) {
                this.voiceSize = size;
                this.version++;
            }
        }
        setPreBeatSize(beat, size) {
            if (!this.preBeatSizes.has(beat.index) || this.preBeatSizes.get(beat.index) < size) {
                this.preBeatSizes.set(beat.index, size);
                this.version++;
            }
        }
        getPreBeatSize(beat) {
            if (this.preBeatSizes.has(beat.index)) {
                return this.preBeatSizes.get(beat.index);
            }
            return 0;
        }
        setOnBeatSize(beat, size) {
            if (!this.onBeatSizes.has(beat.index) || this.onBeatSizes.get(beat.index) < size) {
                this.onBeatSizes.set(beat.index, size);
                this.version++;
            }
        }
        getOnBeatSize(beat) {
            if (this.onBeatSizes.has(beat.index)) {
                return this.onBeatSizes.get(beat.index);
            }
            return 0;
        }
        getBeatCenterX(beat) {
            if (this.onBeatCenterX.has(beat.index)) {
                return this.onBeatCenterX.get(beat.index);
            }
            return 0;
        }
        setBeatCenterX(beat, x) {
            if (!this.onBeatCenterX.has(beat.index) || this.onBeatCenterX.get(beat.index) < x) {
                this.onBeatCenterX.set(beat.index, x);
                this.version++;
            }
        }
        updateMinStretchForce(force) {
            if (this.minStretchForce < force) {
                this.minStretchForce = force;
                this.version++;
            }
        }
        addSpring(start, duration, preSpringSize, postSpringSize) {
            this.version++;
            let spring;
            if (!this.springs.has(start)) {
                spring = new Spring();
                spring.timePosition = start;
                spring.allDurations.push(duration);
                // check in the previous spring for the shortest duration that overlaps with this spring
                // Gourlay defines that we need the smallest note duration that either starts **or continues** on the current spring.
                if (this._timeSortedSprings.length > 0) {
                    let previousSpring = this._timeSortedSprings[this._timeSortedSprings.length - 1];
                    for (let prevDuration of previousSpring.allDurations) {
                        let end = previousSpring.timePosition + prevDuration;
                    }
                }
                spring.longestDuration = duration;
                spring.postSpringWidth = postSpringSize;
                spring.preSpringWidth = preSpringSize;
                this.springs.set(start, spring);
                let timeSorted = this._timeSortedSprings;
                let insertPos = timeSorted.length - 1;
                while (insertPos > 0 && timeSorted[insertPos].timePosition > start) {
                    insertPos--;
                }
                this._timeSortedSprings.splice(insertPos + 1, 0, spring);
            }
            else {
                spring = this.springs.get(start);
                if (spring.postSpringWidth < postSpringSize) {
                    spring.postSpringWidth = postSpringSize;
                }
                if (spring.preSpringWidth < preSpringSize) {
                    spring.preSpringWidth = preSpringSize;
                }
                if (duration < spring.smallestDuration) {
                    spring.smallestDuration = duration;
                }
                if (duration > spring.longestDuration) {
                    spring.longestDuration = duration;
                }
                spring.allDurations.push(duration);
            }
            if (this._minTime === -1 || this._minTime > start) {
                this._minTime = start;
            }
            return spring;
        }
        addBeatSpring(beat, preBeatSize, postBeatSize) {
            let start = beat.absoluteDisplayStart;
            return this.addSpring(start, beat.displayDuration, preBeatSize, postBeatSize);
        }
        finish() {
            this.calculateSpringConstants();
            this.version++;
        }
        calculateSpringConstants() {
            this._xMin = 0;
            let springs = this.springs;
            for (let kvp of springs) {
                let spring = kvp[1];
                if (spring.springWidth < this._xMin) {
                    this._xMin = spring.springWidth;
                }
            }
            let totalSpringConstant = 0;
            let sortedSprings = this._timeSortedSprings;
            for (let i = 0; i < sortedSprings.length; i++) {
                let currentSpring = sortedSprings[i];
                let duration = 0;
                if (i === sortedSprings.length - 1) {
                    duration = currentSpring.longestDuration;
                }
                else {
                    let nextSpring = sortedSprings[i + 1];
                    duration = Math.abs(nextSpring.timePosition - currentSpring.timePosition);
                }
                currentSpring.springConstant = this.calculateSpringConstant(currentSpring, duration);
                totalSpringConstant += 1 / currentSpring.springConstant;
            }
            this.totalSpringConstant = 1 / totalSpringConstant;
            // calculate the force required to have at least the minimum size.
            for (let i = 0; i < sortedSprings.length; i++) {
                let force = sortedSprings[i].springWidth * sortedSprings[i].springConstant;
                this.updateMinStretchForce(force);
            }
        }
        calculateSpringConstant(spring, duration) {
            if (duration <= 0) {
                duration = MidiUtils.toTicks(Duration.SixtyFourth);
            }
            if (spring.smallestDuration === 0) {
                spring.smallestDuration = duration;
            }
            let minDuration = spring.smallestDuration;
            let phi = 1 + 0.6 * Math.log2(duration / BarLayoutingInfo.MinDuration);
            return (minDuration / duration) * (1 / (phi * BarLayoutingInfo.MinDurationWidth));
        }
        spaceToForce(space) {
            return space * this.totalSpringConstant;
        }
        calculateVoiceWidth(force) {
            return this.calculateWidth(force, this.totalSpringConstant);
        }
        calculateWidth(force, springConstant) {
            return force / springConstant;
        }
        buildOnTimePositions(force) {
            if (Platform.isAlmostEqualTo(this._onTimePositionsForce, force) && this._onTimePositions) {
                return this._onTimePositions;
            }
            this._onTimePositionsForce = force;
            let positions = (this._onTimePositions = new Map());
            let sortedSprings = this._timeSortedSprings;
            if (sortedSprings.length === 0) {
                return positions;
            }
            let springX = sortedSprings[0].preSpringWidth;
            for (let i = 0; i < sortedSprings.length; i++) {
                positions.set(sortedSprings[i].timePosition, springX);
                springX += this.calculateWidth(force, sortedSprings[i].springConstant);
            }
            return positions;
        }
    }
    BarLayoutingInfo.MinDuration = 30;
    BarLayoutingInfo.MinDurationWidth = 10;

    /**
     * This container represents a single column of bar renderers independent from any staves.
     * This container can be used to reorganize renderers into a new staves.
     */
    class MasterBarsRenderers {
        constructor() {
            this.width = 0;
            this.isLinkedToPrevious = false;
            this.canWrap = true;
            this.renderers = [];
        }
    }

    class StaveTrackGroup {
        constructor(staveGroup, track) {
            this.staves = [];
            this.stavesRelevantForBoundsLookup = [];
            this.firstStaffInAccolade = null;
            this.lastStaffInAccolade = null;
            this.staveGroup = staveGroup;
            this.track = track;
        }
        addStaff(staff) {
            this.staves.push(staff);
            if (staff.isRelevantForBoundsLookup) {
                this.stavesRelevantForBoundsLookup.push(staff);
            }
        }
    }

    /**
     * A Staff consists of a list of different staves and groups
     * them using an accolade.
     */
    class StaveGroup {
        constructor() {
            this._allStaves = [];
            this._firstStaffInAccolade = null;
            this._lastStaffInAccolade = null;
            this._accoladeSpacingCalculated = false;
            this.x = 0;
            this.y = 0;
            this.index = 0;
            this.accoladeSpacing = 0;
            /**
             * Indicates whether this line is full or not. If the line is full the
             * bars can be aligned to the maximum width. If the line is not full
             * the bars will not get stretched.
             */
            this.isFull = false;
            /**
             * The width that the content bars actually need
             */
            this.width = 0;
            this.isLast = false;
            this.masterBarsRenderers = [];
            this.staves = [];
        }
        get firstBarIndex() {
            return this.masterBarsRenderers[0].masterBar.index;
        }
        get lastBarIndex() {
            return this.masterBarsRenderers[this.masterBarsRenderers.length - 1].masterBar.index;
        }
        addMasterBarRenderers(tracks, renderers) {
            if (tracks.length === 0) {
                return null;
            }
            this.masterBarsRenderers.push(renderers);
            this.calculateAccoladeSpacing(tracks);
            renderers.layoutingInfo.preBeatSize = 0;
            let src = 0;
            for (let i = 0, j = this.staves.length; i < j; i++) {
                let g = this.staves[i];
                for (let k = 0, l = g.staves.length; k < l; k++) {
                    let s = g.staves[k];
                    let renderer = renderers.renderers[src++];
                    s.addBarRenderer(renderer);
                }
            }
            // Width += renderers.Width;
            this.updateWidth();
            return renderers;
        }
        addBars(tracks, barIndex) {
            if (tracks.length === 0) {
                return null;
            }
            let result = new MasterBarsRenderers();
            result.layoutingInfo = new BarLayoutingInfo();
            result.masterBar = tracks[0].score.masterBars[barIndex];
            this.masterBarsRenderers.push(result);
            this.calculateAccoladeSpacing(tracks);
            // add renderers
            let barLayoutingInfo = result.layoutingInfo;
            for (let g of this.staves) {
                for (let s of g.staves) {
                    let bar = g.track.staves[s.modelStaff.index].bars[barIndex];
                    s.addBar(bar, barLayoutingInfo);
                    let renderer = s.barRenderers[s.barRenderers.length - 1];
                    result.renderers.push(renderer);
                    if (renderer.isLinkedToPrevious) {
                        result.isLinkedToPrevious = true;
                    }
                    if (!renderer.canWrap) {
                        result.canWrap = false;
                    }
                }
            }
            barLayoutingInfo.finish();
            // ensure same widths of new renderer
            result.width = this.updateWidth();
            return result;
        }
        revertLastBar() {
            if (this.masterBarsRenderers.length > 1) {
                let toRemove = this.masterBarsRenderers[this.masterBarsRenderers.length - 1];
                this.masterBarsRenderers.splice(this.masterBarsRenderers.length - 1, 1);
                let w = 0;
                for (let i = 0, j = this._allStaves.length; i < j; i++) {
                    let s = this._allStaves[i];
                    let lastBar = s.revertLastBar();
                    w = Math.max(w, lastBar.width);
                }
                this.width -= w;
                return toRemove;
            }
            return null;
        }
        updateWidth() {
            let realWidth = 0;
            for (let i = 0, j = this._allStaves.length; i < j; i++) {
                let s = this._allStaves[i];
                s.barRenderers[s.barRenderers.length - 1].applyLayoutingInfo();
                if (s.barRenderers[s.barRenderers.length - 1].width > realWidth) {
                    realWidth = s.barRenderers[s.barRenderers.length - 1].width;
                }
            }
            this.width += realWidth;
            return realWidth;
        }
        calculateAccoladeSpacing(tracks) {
            if (!this._accoladeSpacingCalculated && this.index === 0) {
                this._accoladeSpacingCalculated = true;
                if (this.layout.renderer.settings.notation.hideTrackNames) {
                    this.accoladeSpacing = 0;
                }
                else {
                    let canvas = this.layout.renderer.canvas;
                    let res = this.layout.renderer.settings.display.resources.effectFont;
                    canvas.font = res;
                    for (let t of tracks) {
                        this.accoladeSpacing = Math.ceil(Math.max(this.accoladeSpacing, canvas.measureText(t.shortName)));
                    }
                    this.accoladeSpacing *= this.layout.scale;
                    this.accoladeSpacing += 2 * StaveGroup.AccoladeLabelSpacing * this.layout.scale;
                    this.width += this.accoladeSpacing;
                }
            }
        }
        getStaveTrackGroup(track) {
            for (let i = 0, j = this.staves.length; i < j; i++) {
                let g = this.staves[i];
                if (g.track === track) {
                    return g;
                }
            }
            return null;
        }
        addStaff(track, staff) {
            let group = this.getStaveTrackGroup(track);
            if (!group) {
                group = new StaveTrackGroup(this, track);
                this.staves.push(group);
            }
            staff.staveTrackGroup = group;
            staff.staveGroup = this;
            staff.index = this._allStaves.length;
            this._allStaves.push(staff);
            group.addStaff(staff);
            if (staff.isInAccolade) {
                if (!this._firstStaffInAccolade) {
                    this._firstStaffInAccolade = staff;
                    staff.isFirstInAccolade = true;
                }
                if (!group.firstStaffInAccolade) {
                    group.firstStaffInAccolade = staff;
                }
                if (!this._lastStaffInAccolade) {
                    this._lastStaffInAccolade = staff;
                    staff.isLastInAccolade = true;
                }
                if (this._lastStaffInAccolade) {
                    this._lastStaffInAccolade.isLastInAccolade = false;
                }
                this._lastStaffInAccolade = staff;
                this._lastStaffInAccolade.isLastInAccolade = true;
                group.lastStaffInAccolade = staff;
            }
        }
        get height() {
            return this._allStaves[this._allStaves.length - 1].y + this._allStaves[this._allStaves.length - 1].height;
        }
        scaleToWidth(width) {
            for (let i = 0, j = this._allStaves.length; i < j; i++) {
                this._allStaves[i].scaleToWidth(width);
            }
            this.width = width;
        }
        paint(cx, cy, canvas) {
            this.paintPartial(cx + this.x, cy + this.y, canvas, 0, this.masterBarsRenderers.length);
        }
        paintPartial(cx, cy, canvas, startIndex, count) {
            this.buildBoundingsLookup(cx, cy);
            for (let i = 0, j = this._allStaves.length; i < j; i++) {
                this._allStaves[i].paint(cx, cy, canvas, startIndex, count);
            }
            let res = this.layout.renderer.settings.display.resources;
            if (this.staves.length > 0 && startIndex === 0) {
                //
                // Draw start grouping
                //
                canvas.color = res.barSeparatorColor;
                if (this._firstStaffInAccolade && this._lastStaffInAccolade) {
                    //
                    // draw grouping line for all staves
                    //
                    let firstStart = cy +
                        this._firstStaffInAccolade.y +
                        this._firstStaffInAccolade.staveTop +
                        this._firstStaffInAccolade.topSpacing +
                        this._firstStaffInAccolade.topOverflow;
                    let lastEnd = cy +
                        this._lastStaffInAccolade.y +
                        this._lastStaffInAccolade.topSpacing +
                        this._lastStaffInAccolade.topOverflow +
                        this._lastStaffInAccolade.staveBottom;
                    let acooladeX = cx + this._firstStaffInAccolade.x;
                    canvas.beginPath();
                    canvas.moveTo(acooladeX, firstStart);
                    canvas.lineTo(acooladeX, lastEnd);
                    canvas.stroke();
                }
                //
                // Draw accolade for each track group
                //
                canvas.font = res.effectFont;
                for (let i = 0, j = this.staves.length; i < j; i++) {
                    let g = this.staves[i];
                    if (g.firstStaffInAccolade && g.lastStaffInAccolade) {
                        let firstStart = cy +
                            g.firstStaffInAccolade.y +
                            g.firstStaffInAccolade.staveTop +
                            g.firstStaffInAccolade.topSpacing +
                            g.firstStaffInAccolade.topOverflow;
                        let lastEnd = cy +
                            g.lastStaffInAccolade.y +
                            g.lastStaffInAccolade.topSpacing +
                            g.lastStaffInAccolade.topOverflow +
                            g.lastStaffInAccolade.staveBottom;
                        let acooladeX = cx + g.firstStaffInAccolade.x;
                        let barSize = 3 * this.layout.renderer.settings.display.scale;
                        let barOffset = barSize;
                        let accoladeStart = firstStart - barSize * 4;
                        let accoladeEnd = lastEnd + barSize * 4;
                        // text
                        if (this.index === 0 && !this.layout.renderer.settings.notation.hideTrackNames) {
                            canvas.fillText(g.track.shortName, cx + StaveGroup.AccoladeLabelSpacing * this.layout.scale, firstStart);
                        }
                        // rect
                        canvas.fillRect(acooladeX - barOffset - barSize, accoladeStart, barSize, accoladeEnd - accoladeStart);
                        let spikeStartX = acooladeX - barOffset - barSize;
                        let spikeEndX = acooladeX + barSize * 2;
                        // top spike
                        canvas.beginPath();
                        canvas.moveTo(spikeStartX, accoladeStart);
                        canvas.bezierCurveTo(spikeStartX, accoladeStart, spikeStartX, accoladeStart, spikeEndX, accoladeStart - barSize);
                        canvas.bezierCurveTo(acooladeX, accoladeStart + barSize, spikeStartX, accoladeStart + barSize, spikeStartX, accoladeStart + barSize);
                        canvas.closePath();
                        canvas.fill();
                        // bottom spike
                        canvas.beginPath();
                        canvas.moveTo(spikeStartX, accoladeEnd);
                        canvas.bezierCurveTo(spikeStartX, accoladeEnd, acooladeX, accoladeEnd, spikeEndX, accoladeEnd + barSize);
                        canvas.bezierCurveTo(acooladeX, accoladeEnd - barSize, spikeStartX, accoladeEnd - barSize, spikeStartX, accoladeEnd - barSize);
                        canvas.closePath();
                        canvas.fill();
                    }
                }
            }
        }
        finalizeGroup() {
            let currentY = 0;
            for (let staff of this._allStaves) {
                staff.x = this.accoladeSpacing;
                staff.y = currentY;
                staff.finalizeStaff();
                currentY += staff.height;
            }
        }
        buildBoundingsLookup(cx, cy) {
            if (this.layout.renderer.boundsLookup.isFinished) {
                return;
            }
            if (!this._firstStaffInAccolade || !this._lastStaffInAccolade) {
                return;
            }
            let lastStaff = this._allStaves[this._allStaves.length - 1];
            let visualTop = cy + this.y + this._firstStaffInAccolade.y;
            let visualBottom = cy + this.y + this._lastStaffInAccolade.y + this._lastStaffInAccolade.height;
            let realTop = cy + this.y + this._allStaves[0].y;
            let realBottom = cy + this.y + lastStaff.y + lastStaff.height;
            let lineTop = cy +
                this.y +
                this._firstStaffInAccolade.y +
                this._firstStaffInAccolade.topSpacing +
                this._firstStaffInAccolade.topOverflow +
                (this._firstStaffInAccolade.barRenderers.length > 0
                    ? this._firstStaffInAccolade.barRenderers[0].topPadding
                    : 0);
            let lineBottom = cy +
                this.y +
                lastStaff.y +
                lastStaff.height -
                lastStaff.bottomSpacing -
                lastStaff.bottomOverflow -
                (lastStaff.barRenderers.length > 0 ? lastStaff.barRenderers[0].bottomPadding : 0);
            let visualHeight = visualBottom - visualTop;
            let lineHeight = lineBottom - lineTop;
            let realHeight = realBottom - realTop;
            let x = this.x + this._firstStaffInAccolade.x;
            let staveGroupBounds = new StaveGroupBounds();
            staveGroupBounds.visualBounds = new Bounds();
            staveGroupBounds.visualBounds.x = cx;
            staveGroupBounds.visualBounds.y = cy + this.y;
            staveGroupBounds.visualBounds.w = this.width;
            staveGroupBounds.visualBounds.h = this.height;
            staveGroupBounds.realBounds = new Bounds();
            staveGroupBounds.realBounds.x = cx;
            staveGroupBounds.realBounds.y = cy + this.y;
            staveGroupBounds.realBounds.w = this.width;
            staveGroupBounds.realBounds.h = this.height;
            this.layout.renderer.boundsLookup.addStaveGroup(staveGroupBounds);
            let masterBarBoundsLookup = new Map();
            for (let i = 0; i < this.staves.length; i++) {
                for (let staff of this.staves[i].stavesRelevantForBoundsLookup) {
                    for (let renderer of staff.barRenderers) {
                        let masterBarBounds;
                        if (!masterBarBoundsLookup.has(renderer.bar.masterBar.index)) {
                            masterBarBounds = new MasterBarBounds();
                            masterBarBounds.index = renderer.bar.masterBar.index;
                            masterBarBounds.isFirstOfLine = renderer.isFirstOfLine;
                            masterBarBounds.realBounds = new Bounds();
                            masterBarBounds.realBounds.x = x + renderer.x;
                            masterBarBounds.realBounds.y = realTop;
                            masterBarBounds.realBounds.w = renderer.width;
                            masterBarBounds.realBounds.h = realHeight;
                            masterBarBounds.visualBounds = new Bounds();
                            masterBarBounds.visualBounds.x = x + renderer.x;
                            masterBarBounds.visualBounds.y = visualTop;
                            masterBarBounds.visualBounds.w = renderer.width;
                            masterBarBounds.visualBounds.h = visualHeight;
                            masterBarBounds.lineAlignedBounds = new Bounds();
                            masterBarBounds.lineAlignedBounds.x = x + renderer.x;
                            masterBarBounds.lineAlignedBounds.y = lineTop;
                            masterBarBounds.lineAlignedBounds.w = renderer.width;
                            masterBarBounds.lineAlignedBounds.h = lineHeight;
                            this.layout.renderer.boundsLookup.addMasterBar(masterBarBounds);
                            masterBarBoundsLookup.set(masterBarBounds.index, masterBarBounds);
                        }
                        else {
                            masterBarBounds = masterBarBoundsLookup.get(renderer.bar.masterBar.index);
                        }
                        renderer.buildBoundingsLookup(masterBarBounds, x, cy + this.y + staff.y);
                    }
                }
            }
        }
        getBarX(index) {
            if (!this._firstStaffInAccolade || this.layout.renderer.tracks.length === 0) {
                return 0;
            }
            let bar = this.layout.renderer.tracks[0].staves[0].bars[index];
            let renderer = this.layout.getRendererForBar(this._firstStaffInAccolade.staveId, bar);
            return renderer.x;
        }
    }
    StaveGroup.AccoladeLabelSpacing = 10;

    /**
     * This is the base public class for creating new layouting engines for the score renderer.
     */
    class ScoreLayout {
        constructor(renderer) {
            this._barRendererLookup = new Map();
            this.width = 0;
            this.height = 0;
            this.scoreInfoGlyphs = new Map();
            this.chordDiagrams = null;
            this.tuningGlyph = null;
            this.firstBarIndex = 0;
            this.lastBarIndex = 0;
            this.renderer = renderer;
        }
        layoutAndRender() {
            let score = this.renderer.score;
            let startIndex = this.renderer.settings.display.startBar;
            startIndex--; // map to array index
            startIndex = Math.min(score.masterBars.length - 1, Math.max(0, startIndex));
            this.firstBarIndex = startIndex;
            let endBarIndex = this.renderer.settings.display.barCount;
            if (endBarIndex < 0) {
                endBarIndex = score.masterBars.length;
            }
            endBarIndex = startIndex + endBarIndex - 1; // map count to array index
            endBarIndex = Math.min(score.masterBars.length - 1, Math.max(0, endBarIndex));
            this.lastBarIndex = endBarIndex;
            this.createScoreInfoGlyphs();
            this.doLayoutAndRender();
        }
        createScoreInfoGlyphs() {
            Logger.info('ScoreLayout', 'Creating score info glyphs');
            let flags = this.renderer.settings.notation.hideInfo
                ? HeaderFooterElements.None
                : HeaderFooterElements.All;
            let score = this.renderer.score;
            let res = this.renderer.settings.display.resources;
            this.scoreInfoGlyphs = new Map();
            if (score.title && (flags & HeaderFooterElements.Title) !== 0) {
                this.scoreInfoGlyphs.set(HeaderFooterElements.Title, new TextGlyph(0, 0, score.title, res.titleFont, TextAlign.Center));
            }
            if (score.subTitle && (flags & HeaderFooterElements.SubTitle) !== 0) {
                this.scoreInfoGlyphs.set(HeaderFooterElements.SubTitle, new TextGlyph(0, 0, score.subTitle, res.subTitleFont, TextAlign.Center));
            }
            if (score.artist && (flags & HeaderFooterElements.Artist) !== 0) {
                this.scoreInfoGlyphs.set(HeaderFooterElements.Artist, new TextGlyph(0, 0, score.artist, res.subTitleFont, TextAlign.Center));
            }
            if (score.album && (flags & HeaderFooterElements.Album) !== 0) {
                this.scoreInfoGlyphs.set(HeaderFooterElements.Album, new TextGlyph(0, 0, score.album, res.subTitleFont, TextAlign.Center));
            }
            if (score.music && score.music === score.words && (flags & HeaderFooterElements.WordsAndMusic) !== 0) {
                this.scoreInfoGlyphs.set(HeaderFooterElements.WordsAndMusic, new TextGlyph(0, 0, 'Music and Words by ' + score.words, res.wordsFont, TextAlign.Center));
            }
            else {
                if (score.music && (flags & HeaderFooterElements.Music) !== 0) {
                    this.scoreInfoGlyphs.set(HeaderFooterElements.Music, new TextGlyph(0, 0, 'Music by ' + score.music, res.wordsFont, TextAlign.Right));
                }
                if (score.words && (flags & HeaderFooterElements.Words) !== 0) {
                    this.scoreInfoGlyphs.set(HeaderFooterElements.Words, new TextGlyph(0, 0, 'Words by ' + score.words, res.wordsFont, TextAlign.Left));
                }
            }
            if (!this.renderer.settings.notation.hideTuning) {
                let staffWithTuning = null;
                for (let track of this.renderer.tracks) {
                    for (let staff of track.staves) {
                        if (!staff.isPercussion && staff.isStringed && staff.tuning.length > 0) {
                            staffWithTuning = staff;
                            break;
                        }
                    }
                    if (staffWithTuning) {
                        break;
                    }
                }
                // tuning info
                if (staffWithTuning) {
                    let tuning = Tuning.findTuning(staffWithTuning.tuning);
                    if (tuning) {
                        this.tuningGlyph = new TuningGlyph(0, 0, this.scale, res, tuning);
                    }
                }
            }
            // chord diagram glyphs
            if (!this.renderer.settings.notation.hideChordDiagrams) {
                this.chordDiagrams = new ChordDiagramContainerGlyph(0, 0);
                this.chordDiagrams.renderer = new BarRendererBase(this.renderer, this.renderer.tracks[0].staves[0].bars[0]);
                let chords = new Map();
                for (let track of this.renderer.tracks) {
                    for (let staff of track.staves) {
                        for (let kvp of staff.chords) {
                            let chordId = kvp[0];
                            if (!chords.has(chordId)) {
                                let chord = kvp[1];
                                if (chord.showDiagram) {
                                    chords.set(chordId, chord);
                                    this.chordDiagrams.addChord(chord);
                                }
                            }
                        }
                    }
                }
            }
        }
        get scale() {
            return this.renderer.settings.display.scale;
        }
        createEmptyStaveGroup() {
            let group = new StaveGroup();
            group.layout = this;
            for (let trackIndex = 0; trackIndex < this.renderer.tracks.length; trackIndex++) {
                let track = this.renderer.tracks[trackIndex];
                let hasScore = false;
                for (let staff of track.staves) {
                    if (staff.showStandardNotation) {
                        hasScore = true;
                        break;
                    }
                }
                for (let staffIndex = 0; staffIndex < track.staves.length; staffIndex++) {
                    let staff = track.staves[staffIndex];
                    // use optimal profile for track
                    let staveProfile;
                    if (staff.isPercussion) {
                        staveProfile = exports.StaveProfile.Score;
                    }
                    else if (this.renderer.settings.display.staveProfile !== exports.StaveProfile.Default) {
                        staveProfile = this.renderer.settings.display.staveProfile;
                    }
                    else if (staff.showTablature && staff.showStandardNotation) {
                        staveProfile = exports.StaveProfile.ScoreTab;
                    }
                    else if (staff.showTablature) {
                        staveProfile = hasScore ? exports.StaveProfile.TabMixed : exports.StaveProfile.Tab;
                    }
                    else if (staff.showStandardNotation) {
                        staveProfile = exports.StaveProfile.Score;
                    }
                    else {
                        continue;
                    }
                    let profile = Environment.staveProfiles.get(staveProfile);
                    for (let factory of profile) {
                        if (factory.canCreate(track, staff)) {
                            group.addStaff(track, new RenderStaff(trackIndex, staff, factory));
                        }
                    }
                }
            }
            return group;
        }
        registerBarRenderer(key, renderer) {
            if (!this._barRendererLookup.has(key)) {
                this._barRendererLookup.set(key, new Map());
            }
            this._barRendererLookup.get(key).set(renderer.bar.id, renderer);
        }
        unregisterBarRenderer(key, renderer) {
            if (this._barRendererLookup.has(key)) {
                let lookup = this._barRendererLookup.get(key);
                lookup.delete(renderer.bar.id);
            }
        }
        getRendererForBar(key, bar) {
            let barRendererId = bar.id;
            if (this._barRendererLookup.has(key) && this._barRendererLookup.get(key).has(barRendererId)) {
                return this._barRendererLookup.get(key).get(barRendererId);
            }
            return null;
        }
        renderAnnotation() {
            // attention, you are not allowed to remove change this notice within any version of this library without permission!
            let msg = 'rendered by alphaTab (https://alphaTab.net)';
            let canvas = this.renderer.canvas;
            let resources = this.renderer.settings.display.resources;
            let size = 12 * this.renderer.settings.display.scale;
            let height = size * 2;
            this.height += height;
            let x = this.width / 2;
            canvas.beginRender(this.width, height);
            canvas.color = resources.mainGlyphColor;
            canvas.font = new Font(resources.copyrightFont.family, size, FontStyle.Bold);
            canvas.textAlign = TextAlign.Center;
            canvas.fillText(msg, x, size);
            let result = canvas.endRender();
            let e = new RenderFinishedEventArgs();
            e.width = this.width;
            e.height = height;
            e.renderResult = result;
            e.totalWidth = this.width;
            e.totalHeight = this.height;
            e.firstMasterBarIndex = -1;
            e.lastMasterBarIndex = -1;
            this.renderer.partialRenderFinished.trigger(e);
        }
    }

    class HorizontalScreenLayoutPartialInfo {
        constructor() {
            this.width = 0;
            this.masterBars = [];
        }
    }
    /**
     * This layout arranges the bars all horizontally
     */
    class HorizontalScreenLayout extends ScoreLayout {
        constructor(renderer) {
            super(renderer);
            this._group = null;
            this._pagePadding = null;
        }
        get name() {
            return 'HorizontalScreen';
        }
        get supportsResize() {
            return false;
        }
        resize() { }
        doLayoutAndRender() {
            this._pagePadding = this.renderer.settings.display.padding;
            if (!this._pagePadding) {
                this._pagePadding = HorizontalScreenLayout.PagePadding;
            }
            if (this._pagePadding.length === 1) {
                this._pagePadding = new Float32Array([
                    this._pagePadding[0],
                    this._pagePadding[0],
                    this._pagePadding[0],
                    this._pagePadding[0]
                ]);
            }
            else if (this._pagePadding.length === 2) {
                this._pagePadding = new Float32Array([
                    this._pagePadding[0],
                    this._pagePadding[1],
                    this._pagePadding[0],
                    this._pagePadding[1]
                ]);
            }
            let score = this.renderer.score;
            let canvas = this.renderer.canvas;
            let startIndex = this.renderer.settings.display.startBar;
            startIndex--; // map to array index
            startIndex = Math.min(score.masterBars.length - 1, Math.max(0, startIndex));
            let currentBarIndex = startIndex;
            let endBarIndex = this.renderer.settings.display.barCount;
            if (endBarIndex <= 0) {
                endBarIndex = score.masterBars.length;
            }
            endBarIndex = startIndex + endBarIndex - 1; // map count to array index
            endBarIndex = Math.min(score.masterBars.length - 1, Math.max(0, endBarIndex));
            this._group = this.createEmptyStaveGroup();
            this._group.isLast = true;
            this._group.x = this._pagePadding[0];
            this._group.y = this._pagePadding[1];
            let countPerPartial = this.renderer.settings.display.barCountPerPartial;
            let partials = [];
            let currentPartial = new HorizontalScreenLayoutPartialInfo();
            while (currentBarIndex <= endBarIndex) {
                let result = this._group.addBars(this.renderer.tracks, currentBarIndex);
                if (result) {
                    // if we detect that the new renderer is linked to the previous
                    // renderer, we need to put it into the previous partial
                    if (currentPartial.masterBars.length === 0 && result.isLinkedToPrevious && partials.length > 0) {
                        let previousPartial = partials[partials.length - 1];
                        previousPartial.masterBars.push(score.masterBars[currentBarIndex]);
                        previousPartial.width += result.width;
                    }
                    else {
                        currentPartial.masterBars.push(score.masterBars[currentBarIndex]);
                        currentPartial.width += result.width;
                        // no targetPartial here because previous partials already handled this code
                        if (currentPartial.masterBars.length >= countPerPartial) {
                            if (partials.length === 0) {
                                currentPartial.width += this._group.x + this._group.accoladeSpacing;
                            }
                            partials.push(currentPartial);
                            Logger.info(this.name, 'Finished partial from bar ' +
                                currentPartial.masterBars[0].index +
                                ' to ' +
                                currentPartial.masterBars[currentPartial.masterBars.length - 1].index, null);
                            currentPartial = new HorizontalScreenLayoutPartialInfo();
                        }
                    }
                }
                currentBarIndex++;
            }
            // don't miss the last partial if not empty
            if (currentPartial.masterBars.length > 0) {
                if (partials.length === 0) {
                    currentPartial.width += this._group.x + this._group.accoladeSpacing;
                }
                partials.push(currentPartial);
                Logger.info(this.name, 'Finished partial from bar ' +
                    currentPartial.masterBars[0].index +
                    ' to ' +
                    currentPartial.masterBars[currentPartial.masterBars.length - 1].index, null);
            }
            this._group.finalizeGroup();
            this.height = this._group.y + this._group.height + this._pagePadding[3];
            this.width = this._group.x + this._group.width + this._pagePadding[2];
            currentBarIndex = 0;
            for (let i = 0; i < partials.length; i++) {
                let partial = partials[i];
                canvas.beginRender(partial.width, this.height);
                canvas.color = this.renderer.settings.display.resources.mainGlyphColor;
                canvas.textAlign = TextAlign.Left;
                let renderX = this._group.getBarX(partial.masterBars[0].index) + this._group.accoladeSpacing;
                if (i === 0) {
                    renderX -= this._group.x + this._group.accoladeSpacing;
                }
                Logger.info(this.name, 'Rendering partial from bar ' +
                    partial.masterBars[0].index +
                    ' to ' +
                    partial.masterBars[partial.masterBars.length - 1].index, null);
                this._group.paintPartial(-renderX, this._group.y, this.renderer.canvas, currentBarIndex, partial.masterBars.length);
                let result = canvas.endRender();
                let e = new RenderFinishedEventArgs();
                e.totalWidth = this.width;
                e.totalHeight = this.height;
                e.width = partial.width;
                e.height = this.height;
                e.renderResult = result;
                e.firstMasterBarIndex = partial.masterBars[0].index;
                e.lastMasterBarIndex = partial.masterBars[partial.masterBars.length - 1].index;
                this.renderer.partialRenderFinished.trigger(e);
                currentBarIndex += partial.masterBars.length;
            }
        }
    }
    HorizontalScreenLayout.PagePadding = new Float32Array([20, 20, 20, 20]);
    HorizontalScreenLayout.GroupSpacing = 20;

    /**
     * This layout arranges the bars into a fixed width and dynamic height region.
     */
    class PageViewLayout extends ScoreLayout {
        constructor(renderer) {
            super(renderer);
            this._groups = [];
            this._allMasterBarRenderers = [];
            this._barsFromPreviousGroup = [];
            this._pagePadding = null;
        }
        get name() {
            return 'PageView';
        }
        doLayoutAndRender() {
            this._pagePadding = this.renderer.settings.display.padding;
            if (!this._pagePadding) {
                this._pagePadding = PageViewLayout.PagePadding;
            }
            if (this._pagePadding.length === 1) {
                this._pagePadding = new Float32Array([
                    this._pagePadding[0],
                    this._pagePadding[0],
                    this._pagePadding[0],
                    this._pagePadding[0]
                ]);
            }
            else if (this._pagePadding.length === 2) {
                this._pagePadding = new Float32Array([
                    this._pagePadding[0],
                    this._pagePadding[1],
                    this._pagePadding[0],
                    this._pagePadding[1]
                ]);
            }
            let x = this._pagePadding[0];
            let y = this._pagePadding[1];
            this.width = this.renderer.width;
            this._allMasterBarRenderers = [];
            //
            // 1. Score Info
            y = this.layoutAndRenderScoreInfo(x, y, -1);
            //
            // 2. Chord Diagrms
            y = this.layoutAndRenderChordDiagrams(y, -1);
            //
            // 3. One result per StaveGroup
            y = this.layoutAndRenderScore(x, y);
            this.height = y + this._pagePadding[3];
        }
        get supportsResize() {
            return true;
        }
        resize() {
            let x = this._pagePadding[0];
            let y = this._pagePadding[1];
            this.width = this.renderer.width;
            let oldHeight = this.height;
            //
            // 1. Score Info
            y = this.layoutAndRenderScoreInfo(x, y, oldHeight);
            //
            // 2. Chord Digrams
            y = this.layoutAndRenderChordDiagrams(y, oldHeight);
            //
            // 2. One result per StaveGroup
            y = this.resizeAndRenderScore(x, y, oldHeight);
            this.height = y + this._pagePadding[3];
        }
        layoutAndRenderChordDiagrams(y, totalHeight = -1) {
            if (!this.chordDiagrams) {
                return y;
            }
            let res = this.renderer.settings.display.resources;
            this.chordDiagrams.width = this.width;
            this.chordDiagrams.doLayout();
            let canvas = this.renderer.canvas;
            canvas.beginRender(this.width, this.chordDiagrams.height);
            canvas.color = res.scoreInfoColor;
            canvas.textAlign = TextAlign.Center;
            this.chordDiagrams.paint(0, 0, canvas);
            let result = canvas.endRender();
            y += this.chordDiagrams.height;
            let e = new RenderFinishedEventArgs();
            e.width = this.width;
            e.height = this.chordDiagrams.height;
            e.renderResult = result;
            e.totalWidth = this.width;
            e.totalHeight = totalHeight < 0 ? y : totalHeight;
            e.firstMasterBarIndex = -1;
            e.lastMasterBarIndex = -1;
            this.renderer.partialRenderFinished.trigger(e);
            return y;
        }
        layoutAndRenderScoreInfo(x, y, totalHeight = -1) {
            Logger.debug(this.name, 'Layouting score info');
            let scale = this.scale;
            let res = this.renderer.settings.display.resources;
            let centeredGlyphs = [
                HeaderFooterElements.Title,
                HeaderFooterElements.SubTitle,
                HeaderFooterElements.Artist,
                HeaderFooterElements.Album,
                HeaderFooterElements.WordsAndMusic
            ];
            for (let i = 0; i < centeredGlyphs.length; i++) {
                if (this.scoreInfoGlyphs.has(centeredGlyphs[i])) {
                    let glyph = this.scoreInfoGlyphs.get(centeredGlyphs[i]);
                    glyph.x = this.width / 2;
                    glyph.y = y;
                    glyph.textAlign = TextAlign.Center;
                    y += glyph.font.size;
                }
            }
            let musicOrWords = false;
            let musicOrWordsHeight = 0;
            if (this.scoreInfoGlyphs.has(HeaderFooterElements.Music)) {
                let glyph = this.scoreInfoGlyphs.get(HeaderFooterElements.Music);
                glyph.x = this.width - this._pagePadding[2];
                glyph.y = y;
                glyph.textAlign = TextAlign.Right;
                musicOrWords = true;
                musicOrWordsHeight = glyph.font.size;
            }
            if (this.scoreInfoGlyphs.has(HeaderFooterElements.Words)) {
                let glyph = this.scoreInfoGlyphs.get(HeaderFooterElements.Words);
                glyph.x = x;
                glyph.y = y;
                glyph.textAlign = TextAlign.Left;
                musicOrWords = true;
                musicOrWordsHeight = glyph.font.size;
            }
            if (musicOrWords) {
                y += musicOrWordsHeight;
            }
            if (this.tuningGlyph) {
                y += 20 * scale;
                this.tuningGlyph.x = x;
                this.tuningGlyph.y = y;
                y += this.tuningGlyph.height;
            }
            y += 20 * scale;
            let canvas = this.renderer.canvas;
            canvas.beginRender(this.width, y);
            canvas.color = res.scoreInfoColor;
            canvas.textAlign = TextAlign.Center;
            for (let kvp of this.scoreInfoGlyphs) {
                kvp[1].paint(0, 0, canvas);
            }
            if (this.tuningGlyph) {
                this.tuningGlyph.paint(0, 0, canvas);
            }
            let result = canvas.endRender();
            let e = new RenderFinishedEventArgs();
            e.width = this.width;
            e.height = y;
            e.renderResult = result;
            e.totalWidth = this.width;
            e.totalHeight = totalHeight < 0 ? y : totalHeight;
            e.firstMasterBarIndex = -1;
            e.lastMasterBarIndex = -1;
            this.renderer.partialRenderFinished.trigger(e);
            return y;
        }
        resizeAndRenderScore(x, y, oldHeight) {
            let canvas = this.renderer.canvas;
            // if we have a fixed number of bars per row, we only need to refit them.
            if (this.renderer.settings.display.barsPerRow !== -1) {
                for (let i = 0; i < this._groups.length; i++) {
                    let group = this._groups[i];
                    this.fitGroup(group);
                    group.finalizeGroup();
                    y += this.paintGroup(group, oldHeight, canvas);
                }
            }
            else {
                this._groups = [];
                let currentIndex = 0;
                let maxWidth = this.maxWidth;
                let group = this.createEmptyStaveGroup();
                group.index = this._groups.length;
                group.x = x;
                group.y = y;
                while (currentIndex < this._allMasterBarRenderers.length) {
                    // if the current renderer still has space in the current group add it
                    // also force adding in case the group is empty
                    let renderers = this._allMasterBarRenderers[currentIndex];
                    if (group.width + renderers.width <= maxWidth || group.masterBarsRenderers.length === 0) {
                        group.addMasterBarRenderers(this.renderer.tracks, renderers);
                        // move to next group
                        currentIndex++;
                    }
                    else {
                        // if we cannot wrap on the current bar, we remove the last bar
                        // (this might even remove multiple ones until we reach a bar that can wrap);
                        while (renderers && !renderers.canWrap && group.masterBarsRenderers.length > 1) {
                            renderers = group.revertLastBar();
                            currentIndex--;
                        }
                        // in case we do not have space, we create a new group
                        group.isFull = true;
                        group.isLast = this.lastBarIndex === group.lastBarIndex;
                        this._groups.push(group);
                        this.fitGroup(group);
                        group.finalizeGroup();
                        y += this.paintGroup(group, oldHeight, canvas);
                        // note: we do not increase currentIndex here to have it added to the next group
                        group = this.createEmptyStaveGroup();
                        group.index = this._groups.length;
                        group.x = x;
                        group.y = y;
                    }
                }
                group.isLast = this.lastBarIndex === group.lastBarIndex;
                // don't forget to finish the last group
                this.fitGroup(group);
                group.finalizeGroup();
                y += this.paintGroup(group, oldHeight, canvas);
            }
            return y;
        }
        layoutAndRenderScore(x, y) {
            let canvas = this.renderer.canvas;
            let startIndex = this.firstBarIndex;
            let currentBarIndex = startIndex;
            let endBarIndex = this.lastBarIndex;
            this._groups = [];
            while (currentBarIndex <= endBarIndex) {
                // create group and align set proper coordinates
                let group = this.createStaveGroup(currentBarIndex, endBarIndex);
                this._groups.push(group);
                group.x = x;
                group.y = y;
                currentBarIndex = group.lastBarIndex + 1;
                // finalize group (sizing etc).
                this.fitGroup(group);
                group.finalizeGroup();
                Logger.info(this.name, 'Rendering partial from bar ' + group.firstBarIndex + ' to ' + group.lastBarIndex, null);
                y += this.paintGroup(group, y, canvas);
            }
            return y;
        }
        paintGroup(group, totalHeight, canvas) {
            // paint into canvas
            let height = group.height + 20 * this.scale;
            canvas.beginRender(this.width, height);
            this.renderer.canvas.color = this.renderer.settings.display.resources.mainGlyphColor;
            this.renderer.canvas.textAlign = TextAlign.Left;
            // NOTE: we use this negation trick to make the group paint itself to 0/0 coordinates
            // since we use partial drawing
            group.paint(0, -group.y, canvas);
            // calculate coordinates for next group
            totalHeight += height;
            let result = canvas.endRender();
            let args = new RenderFinishedEventArgs();
            args.totalWidth = this.width;
            args.totalHeight = totalHeight;
            args.width = this.width;
            args.height = height;
            args.renderResult = result;
            args.firstMasterBarIndex = group.firstBarIndex;
            args.lastMasterBarIndex = group.lastBarIndex;
            this.renderer.partialRenderFinished.trigger(args);
            return height;
        }
        /**
         * Realignes the bars in this line according to the available space
         */
        fitGroup(group) {
            if (group.isFull || group.width > this.maxWidth) {
                group.scaleToWidth(this.maxWidth);
            }
            this.width = Math.max(this.width, group.width);
        }
        createStaveGroup(currentBarIndex, endIndex) {
            let group = this.createEmptyStaveGroup();
            group.index = this._groups.length;
            let barsPerRow = this.renderer.settings.display.barsPerRow;
            let maxWidth = this.maxWidth;
            let end = endIndex + 1;
            for (let i = currentBarIndex; i < end; i++) {
                if (this._barsFromPreviousGroup.length > 0) {
                    for (let renderer of this._barsFromPreviousGroup) {
                        group.addMasterBarRenderers(this.renderer.tracks, renderer);
                        i = renderer.masterBar.index;
                    }
                }
                else {
                    let renderers = group.addBars(this.renderer.tracks, i);
                    if (renderers) {
                        this._allMasterBarRenderers.push(renderers);
                    }
                }
                this._barsFromPreviousGroup = [];
                let groupIsFull = false;
                // can bar placed in this line?
                if (barsPerRow === -1 && group.width >= maxWidth && group.masterBarsRenderers.length !== 0) {
                    groupIsFull = true;
                }
                else if (group.masterBarsRenderers.length === barsPerRow + 1) {
                    groupIsFull = true;
                }
                if (groupIsFull) {
                    let reverted = group.revertLastBar();
                    if (reverted) {
                        this._barsFromPreviousGroup.push(reverted);
                        while (reverted && !reverted.canWrap && group.masterBarsRenderers.length > 1) {
                            reverted = group.revertLastBar();
                            if (reverted) {
                                this._barsFromPreviousGroup.push(reverted);
                            }
                        }
                    }
                    group.isFull = true;
                    group.isLast = false;
                    this._barsFromPreviousGroup.reverse();
                    return group;
                }
                group.x = 0;
            }
            group.isLast = endIndex === group.lastBarIndex;
            return group;
        }
        get maxWidth() {
            return this.renderer.width - this._pagePadding[0] - this._pagePadding[2];
        }
    }
    PageViewLayout.PagePadding = new Float32Array([40, 40, 40, 40]);
    PageViewLayout.GroupSpacing = 20;

    /**
     * Defines all possible accidentals for notes.
     */
    var AccidentalType;
    (function (AccidentalType) {
        /**
         * No accidental
         */
        AccidentalType[AccidentalType["None"] = 0] = "None";
        /**
         * Naturalize
         */
        AccidentalType[AccidentalType["Natural"] = 1] = "Natural";
        /**
         * Sharp
         */
        AccidentalType[AccidentalType["Sharp"] = 2] = "Sharp";
        /**
         * Flat
         */
        AccidentalType[AccidentalType["Flat"] = 3] = "Flat";
        /**
         * Natural for smear bends
         */
        AccidentalType[AccidentalType["NaturalQuarterNoteUp"] = 4] = "NaturalQuarterNoteUp";
        /**
         * Sharp for smear bends
         */
        AccidentalType[AccidentalType["SharpQuarterNoteUp"] = 5] = "SharpQuarterNoteUp";
        /**
         * Flat for smear bends
         */
        AccidentalType[AccidentalType["FlatQuarterNoteUp"] = 6] = "FlatQuarterNoteUp";
    })(AccidentalType || (AccidentalType = {}));

    class AccidentalGlyph extends MusicFontGlyph {
        constructor(x, y, accidentalType, isGrace = false) {
            super(x, y, isGrace ? NoteHeadGlyph.GraceScale : 1, AccidentalGlyph.getMusicSymbol(accidentalType));
            this._isGrace = false;
            this._isGrace = isGrace;
        }
        static getMusicSymbol(accidentalType) {
            switch (accidentalType) {
                case AccidentalType.Natural:
                    return MusicFontSymbol.AccidentalNatural;
                case AccidentalType.Sharp:
                    return MusicFontSymbol.AccidentalSharp;
                case AccidentalType.Flat:
                    return MusicFontSymbol.AccidentalFlat;
                case AccidentalType.NaturalQuarterNoteUp:
                    return MusicFontSymbol.AccidentalQuarterToneNaturalArrowUp;
                case AccidentalType.SharpQuarterNoteUp:
                    return MusicFontSymbol.AccidentalQuarterToneSharpArrowUp;
                case AccidentalType.FlatQuarterNoteUp:
                    return MusicFontSymbol.AccidentalQuarterToneFlatArrowUp;
            }
            return MusicFontSymbol.None;
        }
        doLayout() {
            this.width = 8 * (this._isGrace ? NoteHeadGlyph.GraceScale : 1) * this.scale;
        }
    }

    class BarNumberGlyph extends Glyph {
        constructor(x, y, num) {
            super(x, y);
            this._number = 0;
            this._number = num;
        }
        doLayout() {
            this.renderer.scoreRenderer.canvas.font = this.renderer.resources.barNumberFont;
            this.width = this.renderer.scoreRenderer.canvas.measureText(this._number.toString()) + 5 * this.scale;
        }
        paint(cx, cy, canvas) {
            if (!this.renderer.staff.isFirstInAccolade) {
                return;
            }
            let res = this.renderer.resources;
            let c = canvas.color;
            canvas.color = res.barNumberColor;
            canvas.font = res.barNumberFont;
            canvas.fillText(this._number.toString(), cx + this.x, cy + this.y);
            canvas.color = c;
        }
    }

    class BarSeperatorGlyph extends Glyph {
        constructor(x, y) {
            super(x, y);
        }
        doLayout() {
            if (this.renderer.isLast) {
                this.width = 15 * this.scale;
            }
            else if (!this.renderer.nextRenderer ||
                this.renderer.nextRenderer.staff !== this.renderer.staff ||
                !this.renderer.nextRenderer.bar.masterBar.isRepeatStart) {
                this.width = 2 * this.scale;
                if (this.renderer.bar.masterBar.isDoubleBar) {
                    this.width += 2 * this.scale;
                }
            }
            else {
                this.width = 2 * this.scale;
            }
        }
        paint(cx, cy, canvas) {
            let blockWidth = 4 * this.scale;
            let top = cy + this.y + this.renderer.topPadding;
            let bottom = cy + this.y + this.renderer.height - this.renderer.bottomPadding;
            let left = cx + this.x;
            let h = bottom - top;
            if (this.renderer.isLast) {
                // small bar
                canvas.fillRect(left + this.width - blockWidth - blockWidth, top, this.scale, h);
                // big bar
                canvas.fillRect(left + this.width - blockWidth, top, blockWidth, h);
            }
            else if (!this.renderer.nextRenderer ||
                this.renderer.nextRenderer.staff !== this.renderer.staff ||
                !this.renderer.nextRenderer.bar.masterBar.isRepeatStart) {
                // small bar
                canvas.fillRect(left + this.width - this.scale, top, this.scale, h);
                if (this.renderer.bar.masterBar.isDoubleBar) {
                    canvas.fillRect(left + this.width - 5 * this.scale, top, this.scale, h);
                }
            }
        }
    }

    class BeamGlyph extends MusicFontGlyph {
        constructor(x, y, duration, direction, isGrace) {
            super(x, y, isGrace ? NoteHeadGlyph.GraceScale : 1, BeamGlyph.getSymbol(duration, direction, isGrace));
        }
        doLayout() {
            this.width = 0;
        }
        static getSymbol(duration, direction, isGrace) {
            if (isGrace) {
                duration = Duration.Eighth;
            }
            if (direction === BeamDirection.Up) {
                switch (duration) {
                    case Duration.Eighth:
                        return MusicFontSymbol.FooterUpEighth;
                    case Duration.Sixteenth:
                        return MusicFontSymbol.FooterUpSixteenth;
                    case Duration.ThirtySecond:
                        return MusicFontSymbol.FooterUpThirtySecond;
                    case Duration.SixtyFourth:
                        return MusicFontSymbol.FooterUpSixtyFourth;
                    case Duration.OneHundredTwentyEighth:
                        return MusicFontSymbol.FooterUpOneHundredTwentyEighth;
                    case Duration.TwoHundredFiftySixth:
                        return MusicFontSymbol.FooterUpTwoHundredFiftySixth;
                    default:
                        return MusicFontSymbol.FooterUpEighth;
                }
            }
            switch (duration) {
                case Duration.Eighth:
                    return MusicFontSymbol.FooterDownEighth;
                case Duration.Sixteenth:
                    return MusicFontSymbol.FooterDownSixteenth;
                case Duration.ThirtySecond:
                    return MusicFontSymbol.FooterDownThirtySecond;
                case Duration.SixtyFourth:
                    return MusicFontSymbol.FooterDownSixtyFourth;
                case Duration.OneHundredTwentyEighth:
                    return MusicFontSymbol.FooterDownOneHundredTwentyEighth;
                case Duration.TwoHundredFiftySixth:
                    return MusicFontSymbol.FooterDownOneHundredTwentyEighth;
                default:
                    return MusicFontSymbol.FooterDownEighth;
            }
        }
    }

    class ClefGlyph extends MusicFontGlyph {
        constructor(x, y, clef, clefOttava) {
            super(x, y, 1, ClefGlyph.getSymbol(clef));
            this._clef = clef;
            this._clefOttava = clefOttava;
        }
        doLayout() {
            switch (this._clef) {
                case Clef.Neutral:
                    this.width = 15 * this.scale;
                    break;
                case Clef.C3:
                case Clef.C4:
                case Clef.F4:
                case Clef.G2:
                    this.width = 28 * this.scale;
                    break;
            }
        }
        static getSymbol(clef) {
            switch (clef) {
                case Clef.Neutral:
                    return MusicFontSymbol.ClefNeutral;
                case Clef.C3:
                    return MusicFontSymbol.ClefC;
                case Clef.C4:
                    return MusicFontSymbol.ClefC;
                case Clef.F4:
                    return MusicFontSymbol.ClefF;
                case Clef.G2:
                    return MusicFontSymbol.ClefG;
                default:
                    return MusicFontSymbol.None;
            }
        }
        paint(cx, cy, canvas) {
            super.paint(cx, cy, canvas);
            let numberGlyph;
            let top = false;
            switch (this._clefOttava) {
                case Ottavia._15ma:
                    numberGlyph = new MusicFontGlyph(-4 * this.scale, 0, 0.5, MusicFontSymbol.Ottava15);
                    top = true;
                    break;
                case Ottavia._8va:
                    numberGlyph = new MusicFontGlyph(-2 * this.scale, 0, 0.5, MusicFontSymbol.Ottava8);
                    top = true;
                    break;
                case Ottavia._8vb:
                    numberGlyph = new MusicFontGlyph(-6 * this.scale, 0, 0.5, MusicFontSymbol.Ottava8);
                    break;
                case Ottavia._15mb:
                    numberGlyph = new MusicFontGlyph(-8 * this.scale, 0, 0.5, MusicFontSymbol.Ottava15);
                    break;
                default:
                    return;
            }
            let offsetY = 0;
            let offsetX = 0;
            switch (this._clef) {
                case Clef.Neutral:
                    offsetY = top ? -12 : 15;
                    offsetX = 0;
                    break;
                case Clef.C3:
                    offsetY = top ? -19 : 27;
                    offsetX = 0;
                    break;
                case Clef.C4:
                    offsetY = top ? -19 : 27;
                    offsetX = 0;
                    break;
                case Clef.F4:
                    offsetY = top ? -9 : 27;
                    offsetX = -4;
                    break;
                case Clef.G2:
                    offsetY = top ? -37 : 30;
                    offsetX = 0;
                    break;
                default:
                    return;
            }
            numberGlyph.renderer = this.renderer;
            numberGlyph.doLayout();
            let x = this.width / 2;
            numberGlyph.paint(cx + this.x + x + offsetX * this.scale, cy + this.y + offsetY * this.scale, canvas);
        }
    }

    class RepeatCloseGlyph extends Glyph {
        constructor(x, y) {
            super(x, y);
        }
        doLayout() {
            this.width = 11 * this.scale;
        }
        paint(cx, cy, canvas) {
            let blockWidth = 4 * this.scale;
            let top = cy + this.y + this.renderer.topPadding;
            let bottom = cy + this.y + this.renderer.height - this.renderer.bottomPadding;
            let left = cx + this.x;
            let h = bottom - top;
            // circles
            let circleSize = 1.5 * this.scale;
            let middle = (top + bottom) / 2;
            let dotOffset = 3;
            canvas.fillCircle(left, middle - circleSize * dotOffset, circleSize);
            canvas.fillCircle(left, middle + circleSize * dotOffset, circleSize);
            // line
            left += 4 * this.scale;
            canvas.beginPath();
            canvas.moveTo(left, top);
            canvas.lineTo(left, bottom);
            canvas.stroke();
            // big bar
            left += 3 * this.scale + 0.5;
            canvas.fillRect(left, top, blockWidth, h);
        }
    }

    class RepeatCountGlyph extends Glyph {
        constructor(x, y, count) {
            super(x, y);
            this._count = 0;
            this._count = 0;
            this._count = count;
        }
        doLayout() {
            this.width = 0;
        }
        paint(cx, cy, canvas) {
            let res = this.renderer.resources;
            let oldAlign = canvas.textAlign;
            canvas.font = res.barNumberFont;
            canvas.textAlign = TextAlign.Right;
            let s = 'x' + this._count;
            let w = canvas.measureText(s) / 1.5;
            canvas.fillText(s, cx + this.x - w, cy + this.y);
            canvas.textAlign = oldAlign;
        }
    }

    class RepeatOpenGlyph extends Glyph {
        constructor(x, y, circleSize, dotOffset) {
            super(x, y);
            this._dotOffset = 0;
            this._circleSize = 0;
            this._dotOffset = 0.0;
            this._circleSize = 0.0;
            this._dotOffset = dotOffset;
            this._circleSize = circleSize;
        }
        doLayout() {
            this.width = 13 * this.scale;
        }
        paint(cx, cy, canvas) {
            let blockWidth = 4 * this.scale;
            let top = cy + this.y + this.renderer.topPadding;
            let bottom = cy + this.y + this.renderer.height - this.renderer.bottomPadding;
            let left = cx + this.x + 0.5;
            // big bar
            let h = bottom - top;
            canvas.fillRect(left, top, blockWidth, h);
            // line
            left += blockWidth * 2 - 0.5;
            canvas.beginPath();
            canvas.moveTo(left, top);
            canvas.lineTo(left, bottom);
            canvas.stroke();
            // circles
            left += 3 * this.scale;
            let circleSize = this._circleSize * this.scale;
            let middle = (top + bottom) / 2;
            canvas.fillCircle(left, middle - circleSize * this._dotOffset, circleSize);
            canvas.fillCircle(left, middle + circleSize * this._dotOffset, circleSize);
        }
    }

    class AccentuationGlyph extends MusicFontGlyph {
        constructor(x, y, accentuation) {
            super(x, y, 1, AccentuationGlyph.getSymbol(accentuation));
        }
        static getSymbol(accentuation) {
            switch (accentuation) {
                case AccentuationType.None:
                    return MusicFontSymbol.None;
                case AccentuationType.Normal:
                    return MusicFontSymbol.Accentuation;
                case AccentuationType.Heavy:
                    return MusicFontSymbol.HeavyAccentuation;
                default:
                    return MusicFontSymbol.None;
            }
        }
        doLayout() {
            this.width = 9 * this.scale;
        }
    }

    class ChineseCymbalGlyph extends MusicFontGlyph {
        constructor(x, y, isGrace) {
            super(x, y, isGrace ? NoteHeadGlyph.GraceScale : 1, MusicFontSymbol.NoteHarmonic);
            this._isGrace = isGrace;
        }
        doLayout() {
            this.width = 9 * (this._isGrace ? NoteHeadGlyph.GraceScale : 1) * this.scale;
        }
    }

    class CircleGlyph extends Glyph {
        constructor(x, y, size) {
            super(x, y);
            this._size = 0;
            this._size = size;
        }
        doLayout() {
            this.width = this._size + 3 * this.scale;
        }
        paint(cx, cy, canvas) {
            canvas.fillCircle(cx + this.x, cy + this.y, this._size);
        }
    }

    class DeadNoteHeadGlyph extends MusicFontGlyph {
        constructor(x, y, isGrace) {
            super(x, y, isGrace ? NoteHeadGlyph.GraceScale : 1, MusicFontSymbol.NoteDead);
            this._isGrace = isGrace;
        }
        doLayout() {
            this.width = 9 * (this._isGrace ? NoteHeadGlyph.GraceScale : 1) * this.scale;
        }
    }

    class DiamondNoteHeadGlyph extends MusicFontGlyph {
        constructor(x, y, duration, isGrace) {
            super(x, y, isGrace ? NoteHeadGlyph.GraceScale : 1, DiamondNoteHeadGlyph.getSymbol(duration));
            this._isGrace = isGrace;
        }
        static getSymbol(duration) {
            switch (duration) {
                case Duration.QuadrupleWhole:
                case Duration.DoubleWhole:
                case Duration.Whole:
                case Duration.Half:
                    return MusicFontSymbol.NoteHarmonicWhole;
                default:
                    return MusicFontSymbol.NoteHarmonic;
            }
        }
        doLayout() {
            this.width = 9 * (this._isGrace ? NoteHeadGlyph.GraceScale : 1) * this.scale;
        }
    }

    class DrumSticksGlyph extends MusicFontGlyph {
        constructor(x, y, isGrace) {
            super(x, y, isGrace ? NoteHeadGlyph.GraceScale : 1, MusicFontSymbol.NoteSideStick);
            this._isGrace = isGrace;
        }
        doLayout() {
            this.width = 9 * (this._isGrace ? NoteHeadGlyph.GraceScale : 1) * this.scale;
        }
    }

    class TieGlyph extends Glyph {
        constructor(startBeat, endBeat, forEnd) {
            super(0, 0);
            this.yOffset = 0;
            this.startBeat = startBeat;
            this.endBeat = endBeat;
            this.forEnd = forEnd;
        }
        doLayout() {
            this.width = 0;
        }
        paint(cx, cy, canvas) {
            if (!this.endBeat) {
                return;
            }
            // TODO fix nullability of start/end beat,
            let startNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, this.startBeat.voice.bar);
            let endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, this.endBeat.voice.bar);
            let startX = 0;
            let endX = 0;
            let startY = 0;
            let endY = 0;
            let shouldDraw = false;
            // if we are on the tie start, we check if we
            // either can draw till the end note, or we just can draw till the bar end
            let direction = !startNoteRenderer
                ? this.getBeamDirection(this.endBeat, endNoteRenderer)
                : this.getBeamDirection(this.startBeat, startNoteRenderer);
            if (!this.forEnd && startNoteRenderer) {
                // line break or bar break
                if (startNoteRenderer !== endNoteRenderer) {
                    startX = cx + startNoteRenderer.x + this.getStartX(startNoteRenderer);
                    startY = cy + startNoteRenderer.y + this.getStartY(startNoteRenderer, direction) + this.yOffset;
                    // line break: to bar end
                    if (!endNoteRenderer || startNoteRenderer.staff !== endNoteRenderer.staff) {
                        endX = cx + startNoteRenderer.x + startNoteRenderer.width;
                        endY = startY;
                    }
                    else {
                        endX = cx + endNoteRenderer.x + this.getEndX(endNoteRenderer);
                        endY = cy + endNoteRenderer.y + this.getEndY(endNoteRenderer, direction) + this.yOffset;
                    }
                }
                else {
                    startX = cx + startNoteRenderer.x + this.getStartX(startNoteRenderer);
                    endX = cx + endNoteRenderer.x + this.getEndX(endNoteRenderer);
                    startY = cy + startNoteRenderer.y + this.getStartY(startNoteRenderer, direction) + this.yOffset;
                    endY = cy + endNoteRenderer.y + this.getEndY(endNoteRenderer, direction) + this.yOffset;
                }
                shouldDraw = true;
            }
            else if (!startNoteRenderer || startNoteRenderer.staff !== endNoteRenderer.staff) {
                startX = cx + endNoteRenderer.x;
                endX = cx + endNoteRenderer.x + this.getEndX(endNoteRenderer);
                startY = cy + endNoteRenderer.y + this.getEndY(endNoteRenderer, direction) + this.yOffset;
                endY = startY;
                shouldDraw = true;
            }
            if (shouldDraw) {
                TieGlyph.paintTie(canvas, this.scale, startX, startY, endX, endY, direction === BeamDirection.Down, this.getTieHeight(startX, startY, endX, endY), 4);
                canvas.fill();
            }
        }
        getTieHeight(startX, startY, endX, endY) {
            return 22;
        }
        getBeamDirection(beat, noteRenderer) {
            return BeamDirection.Down;
        }
        getStartY(noteRenderer, direction) {
            return 0;
        }
        getEndY(noteRenderer, direction) {
            return 0;
        }
        getStartX(noteRenderer) {
            return 0;
        }
        getEndX(noteRenderer) {
            return 0;
        }
        static paintTie(canvas, scale, x1, y1, x2, y2, down = false, offset = 22, size = 4) {
            if (x1 === x2 && y1 === y2) {
                return;
            }
            // ensure endX > startX
            if (x2 < x1) {
                let t = x1;
                x1 = x2;
                x2 = t;
                t = y1;
                y1 = y2;
                y2 = t;
            }
            //
            // calculate control points
            //
            offset *= scale;
            size *= scale;
            // normal vector
            let normalVectorX = y2 - y1;
            let normalVectorY = x2 - x1;
            let length = Math.sqrt(normalVectorX * normalVectorX + normalVectorY * normalVectorY);
            if (down) {
                normalVectorX *= -1;
            }
            else {
                normalVectorY *= -1;
            }
            // make to unit vector
            normalVectorX /= length;
            normalVectorY /= length;
            // center of connection
            let centerX = (x2 + x1) / 2;
            let centerY = (y2 + y1) / 2;
            // control points
            let cp1X = centerX + offset * normalVectorX;
            let cp1Y = centerY + offset * normalVectorY;
            let cp2X = centerX + (offset - size) * normalVectorX;
            let cp2Y = centerY + (offset - size) * normalVectorY;
            canvas.beginPath();
            canvas.moveTo(x1, y1);
            canvas.quadraticCurveTo(cp1X, cp1Y, x2, y2);
            canvas.quadraticCurveTo(cp2X, cp2Y, x1, y1);
            canvas.closePath();
        }
    }

    class GhostParenthesisGlyph extends Glyph {
        constructor(isOpen) {
            super(0, 0);
            this.height = 0;
            this._isOpen = isOpen;
        }
        doLayout() {
            super.doLayout();
            this.width = GhostParenthesisGlyph.Size * this.scale;
        }
        paint(cx, cy, canvas) {
            if (this._isOpen) {
                TieGlyph.paintTie(canvas, this.scale, cx + this.x + this.width, cy + this.y + this.height, cx + this.x + this.width, cy + this.y, false, 6, 3);
            }
            else {
                TieGlyph.paintTie(canvas, this.scale, cx + this.x, cy + this.y, cx + this.x, cy + this.y + this.height, false, 6, 3);
            }
            canvas.fill();
        }
    }
    GhostParenthesisGlyph.Size = 6;

    class GhostNoteInfo {
        constructor(line, isGhost) {
            this.line = 0;
            this.line = line;
            this.isGhost = isGhost;
        }
    }
    class GhostNoteContainerGlyph extends Glyph {
        constructor(isOpen) {
            super(0, 0);
            this._infos = [];
            this._glyphs = [];
            this.isEmpty = true;
            this._isOpen = isOpen;
        }
        addParenthesis(n) {
            let sr = this.renderer;
            let line = sr.getNoteLine(n);
            let hasParenthesis = n.isGhost || (this.isTiedBend(n) && sr.settings.notation.showParenthesisForTiedBends);
            this.addParenthesisOnLine(line, hasParenthesis);
        }
        addParenthesisOnLine(line, hasParenthesis) {
            let info = new GhostNoteInfo(line, hasParenthesis);
            this._infos.push(info);
            if (hasParenthesis) {
                this.isEmpty = false;
            }
        }
        isTiedBend(note) {
            if (note.isTieDestination) {
                if (note.tieOrigin.hasBend) {
                    return true;
                }
                return this.isTiedBend(note.tieOrigin);
            }
            return false;
        }
        doLayout() {
            let sr = this.renderer;
            this._infos.sort((a, b) => {
                return a.line - b.line;
            });
            let previousGlyph = null;
            let sizePerLine = sr.getScoreY(1, 0);
            for (let i = 0, j = this._infos.length; i < j; i++) {
                let g;
                if (!this._infos[i].isGhost) {
                    previousGlyph = null;
                }
                else if (!previousGlyph) {
                    g = new GhostParenthesisGlyph(this._isOpen);
                    g.renderer = this.renderer;
                    g.y = sr.getScoreY(this._infos[i].line, 0) - sizePerLine;
                    g.height = sizePerLine * 2;
                    g.doLayout();
                    this._glyphs.push(g);
                    previousGlyph = g;
                }
                else {
                    let y = sr.getScoreY(this._infos[i].line, 0) + sizePerLine;
                    previousGlyph.height = y - previousGlyph.y;
                }
            }
            this.width = this._glyphs.length > 0 ? this._glyphs[0].width : 0;
        }
        paint(cx, cy, canvas) {
            super.paint(cx, cy, canvas);
            for (let g of this._glyphs) {
                g.paint(cx + this.x, cy + this.y, canvas);
            }
        }
    }

    class HiHatGlyph extends MusicFontGlyph {
        constructor(x, y, isGrace) {
            super(x, y, isGrace ? NoteHeadGlyph.GraceScale : 1, MusicFontSymbol.NoteHiHat);
            this._isGrace = isGrace;
        }
        doLayout() {
            this.width = 9 * (this._isGrace ? NoteHeadGlyph.GraceScale : 1) * this.scale;
        }
    }

    class RideCymbalGlyph extends MusicFontGlyph {
        constructor(x, y, isGrace) {
            super(x, y, isGrace ? NoteHeadGlyph.GraceScale : 1, MusicFontSymbol.NoteHarmonicWhole);
            this._isGrace = isGrace;
        }
        doLayout() {
            this.width = 9 * (this._isGrace ? NoteHeadGlyph.GraceScale : 1) * this.scale;
        }
    }

    class ScoreNoteGlyphInfo {
        constructor(glyph, line) {
            this.line = 0;
            this.glyph = glyph;
            this.line = line;
        }
    }

    class ScoreNoteChordGlyphBase extends Glyph {
        constructor() {
            super(0, 0);
            this._infos = [];
            this._noteHeadPadding = 0;
            this.minNote = null;
            this.maxNote = null;
            this.spacingChanged = new EventEmitter();
            this.upLineX = 0;
            this.downLineX = 0;
            this.displacedX = 0;
            this.noteStartX = 0;
        }
        add(noteGlyph, noteLine) {
            let info = new ScoreNoteGlyphInfo(noteGlyph, noteLine);
            this._infos.push(info);
            if (!this.minNote || this.minNote.line > info.line) {
                this.minNote = info;
            }
            if (!this.maxNote || this.maxNote.line < info.line) {
                this.maxNote = info;
            }
        }
        get hasTopOverflow() {
            return !!this.minNote && this.minNote.line <= 0;
        }
        get hasBottomOverflow() {
            return !!this.maxNote && this.maxNote.line > 8;
        }
        doLayout() {
            this._infos.sort((a, b) => {
                return b.line - a.line;
            });
            let displacedX = 0;
            let lastDisplaced = false;
            let lastLine = 0;
            let anyDisplaced = false;
            let direction = this.direction;
            let lineOffset = this.scale * 1.5;
            let w = 0;
            for (let i = 0, j = this._infos.length; i < j; i++) {
                let g = this._infos[i].glyph;
                g.renderer = this.renderer;
                g.doLayout();
                let displace = false;
                if (i === 0) {
                    displacedX = g.width - lineOffset;
                }
                else {
                    // check if note needs to be repositioned
                    if (Math.abs(lastLine - this._infos[i].line) <= 1) {
                        // reposition if needed
                        if (!lastDisplaced) {
                            displace = true;
                            g.x = displacedX;
                            anyDisplaced = true;
                            lastDisplaced = true; // let next iteration know we are displace now
                        }
                        else {
                            lastDisplaced = false; // let next iteration know that we weren't displaced now
                        }
                    }
                    else {
                        lastDisplaced = false;
                    }
                }
                // for beat direction down we invert the displacement.
                // this means: displaced is on the left side of the stem and not displaced is right
                if (direction === BeamDirection.Down) {
                    g.x = displace ? 0 : displacedX;
                }
                else {
                    g.x = displace ? displacedX : 0;
                }
                g.x += this.noteStartX;
                lastLine = this._infos[i].line;
                w = Math.max(w, g.x + g.width - lineOffset);
            }
            if (anyDisplaced) {
                this._noteHeadPadding = 0;
                this.upLineX = displacedX;
                this.downLineX = displacedX;
            }
            else {
                this._noteHeadPadding = direction === BeamDirection.Down ? -displacedX : 0;
                w += this._noteHeadPadding;
                this.upLineX = w;
                this.downLineX = 0;
            }
            this.displacedX = displacedX;
            this.width = w;
        }
        paint(cx, cy, canvas) {
            cx += this.x;
            cy += this.y;
            // TODO: this method seems to be quite heavy according to the profiler, why?
            let scoreRenderer = this.renderer;
            // TODO: Take care of beateffects in overflow
            let linePadding = 3 * this.scale;
            let lineWidth = this.width - this.noteStartX + linePadding * 2;
            if (this.hasTopOverflow) {
                let color = canvas.color;
                canvas.color = scoreRenderer.resources.staffLineColor;
                let l = 0;
                while (l >= this.minNote.line) {
                    // + 1 Because we want to place the line in the center of the note, not at the top
                    let lY = cy + scoreRenderer.getScoreY(l, 0);
                    canvas.fillRect(cx - linePadding + this.noteStartX, lY, lineWidth, this.scale);
                    l -= 2;
                }
                canvas.color = color;
            }
            if (this.hasBottomOverflow) {
                let color = canvas.color;
                canvas.color = scoreRenderer.resources.staffLineColor;
                let l = 12;
                while (l <= this.maxNote.line) {
                    let lY = cy + scoreRenderer.getScoreY(l, 0);
                    canvas.fillRect(cx - linePadding + this.noteStartX, lY, lineWidth, this.scale);
                    l += 2;
                }
                canvas.color = color;
            }
            let infos = this._infos;
            let x = cx + this._noteHeadPadding;
            for (let g of infos) {
                g.glyph.renderer = this.renderer;
                g.glyph.paint(x, cy, canvas);
            }
        }
    }

    class TremoloPickingGlyph extends MusicFontGlyph {
        constructor(x, y, duration) {
            super(x, y, 1, TremoloPickingGlyph.getSymbol(duration));
        }
        doLayout() {
            this.width = 12 * this.scale;
        }
        static getSymbol(duration) {
            switch (duration) {
                case Duration.ThirtySecond:
                    return MusicFontSymbol.TremoloPickingThirtySecond;
                case Duration.Sixteenth:
                    return MusicFontSymbol.TremoloPickingSixteenth;
                case Duration.Eighth:
                    return MusicFontSymbol.TremoloPickingEighth;
                default:
                    return MusicFontSymbol.None;
            }
        }
    }

    class ScoreNoteChordGlyph extends ScoreNoteChordGlyphBase {
        constructor() {
            super();
            this._noteGlyphLookup = new Map();
            this._notes = [];
            this._tremoloPicking = null;
            this.beatEffects = new Map();
        }
        get direction() {
            return this.beamingHelper.direction;
        }
        getNoteX(note, onEnd = true) {
            if (this._noteGlyphLookup.has(note.id)) {
                let n = this._noteGlyphLookup.get(note.id);
                let pos = this.x + n.x;
                if (onEnd) {
                    pos += n.width;
                }
                return pos;
            }
            return 0;
        }
        getNoteY(note, aboveNote = false) {
            if (this._noteGlyphLookup.has(note.id)) {
                return this.y + this._noteGlyphLookup.get(note.id).y + (aboveNote ? -(NoteHeadGlyph.NoteHeadHeight * this.scale) / 2 : 0);
            }
            return 0;
        }
        addNoteGlyph(noteGlyph, note, noteLine) {
            super.add(noteGlyph, noteLine);
            this._noteGlyphLookup.set(note.id, noteGlyph);
            this._notes.push(note);
        }
        updateBeamingHelper(cx) {
            if (this.beamingHelper) {
                this.beamingHelper.registerBeatLineX('score', this.beat, cx + this.x + this.upLineX, cx + this.x + this.downLineX);
            }
        }
        doLayout() {
            super.doLayout();
            let direction = this.direction;
            for (let kvp of this.beatEffects) {
                let effect = kvp[1];
                effect.renderer = this.renderer;
                effect.doLayout();
            }
            if (this.beat.isTremolo) {
                let offset = 0;
                let baseNote = direction === BeamDirection.Up ? this.minNote : this.maxNote;
                let tremoloX = direction === BeamDirection.Up ? this.displacedX : 0;
                let speed = this.beat.tremoloSpeed;
                switch (speed) {
                    case Duration.ThirtySecond:
                        offset = direction === BeamDirection.Up ? -15 : 15;
                        break;
                    case Duration.Sixteenth:
                        offset = direction === BeamDirection.Up ? -12 : 15;
                        break;
                    case Duration.Eighth:
                        offset = direction === BeamDirection.Up ? -10 : 10;
                        break;
                    default:
                        offset = direction === BeamDirection.Up ? -10 : 15;
                        break;
                }
                this._tremoloPicking = new TremoloPickingGlyph(tremoloX, baseNote.glyph.y + offset * this.scale, speed);
                this._tremoloPicking.renderer = this.renderer;
                this._tremoloPicking.doLayout();
            }
        }
        paint(cx, cy, canvas) {
            // TODO: this method seems to be quite heavy according to the profiler, why?
            let scoreRenderer = this.renderer;
            //
            // Note Effects only painted once
            //
            let effectY = this.beamingHelper.direction === BeamDirection.Up
                ? scoreRenderer.getScoreY(this.maxNote.line, 1.5 * NoteHeadGlyph.NoteHeadHeight)
                : scoreRenderer.getScoreY(this.minNote.line, -1.0 * NoteHeadGlyph.NoteHeadHeight);
            // TODO: take care of actual glyph height
            let effectSpacing = this.beamingHelper.direction === BeamDirection.Up ? 7 * this.scale : -7 * this.scale;
            for (let kvp of this.beatEffects) {
                let g = kvp[1];
                g.y = effectY;
                g.x = this.width / 2;
                g.paint(cx + this.x, cy + this.y, canvas);
                effectY += effectSpacing;
            }
            if (this.renderer.settings.core.includeNoteBounds) {
                for (let note of this._notes) {
                    if (this._noteGlyphLookup.has(note.id)) {
                        let glyph = this._noteGlyphLookup.get(note.id);
                        let noteBounds = new NoteBounds();
                        noteBounds.note = note;
                        noteBounds.noteHeadBounds = new Bounds();
                        noteBounds.noteHeadBounds.x = cx + this.x + glyph.x;
                        noteBounds.noteHeadBounds.y = cy + this.y + glyph.y;
                        noteBounds.noteHeadBounds.w = glyph.width;
                        noteBounds.noteHeadBounds.h = glyph.height;
                        this.renderer.scoreRenderer.boundsLookup.addNote(noteBounds);
                    }
                }
            }
            super.paint(cx, cy, canvas);
            if (this._tremoloPicking) {
                this._tremoloPicking.paint(cx, cy, canvas);
            }
        }
    }

    class ScoreRestGlyph extends MusicFontGlyph {
        constructor(x, y, duration) {
            super(x, y, 1, ScoreRestGlyph.getSymbol(duration));
            this._duration = duration;
        }
        static getSymbol(duration) {
            switch (duration) {
                case Duration.QuadrupleWhole:
                    return MusicFontSymbol.RestQuadrupleWhole;
                case Duration.DoubleWhole:
                    return MusicFontSymbol.RestDoubleWhole;
                case Duration.Whole:
                    return MusicFontSymbol.RestWhole;
                case Duration.Half:
                    return MusicFontSymbol.RestHalf;
                case Duration.Quarter:
                    return MusicFontSymbol.RestQuarter;
                case Duration.Eighth:
                    return MusicFontSymbol.RestEighth;
                case Duration.Sixteenth:
                    return MusicFontSymbol.RestSixteenth;
                case Duration.ThirtySecond:
                    return MusicFontSymbol.RestThirtySecond;
                case Duration.SixtyFourth:
                    return MusicFontSymbol.RestSixtyFourth;
                case Duration.OneHundredTwentyEighth:
                    return MusicFontSymbol.RestOneHundredTwentyEighth;
                case Duration.TwoHundredFiftySixth:
                    return MusicFontSymbol.RestTwoHundredFiftySixth;
                default:
                    return MusicFontSymbol.None;
            }
        }
        static getSize(duration) {
            switch (duration) {
                case Duration.QuadrupleWhole:
                case Duration.DoubleWhole:
                case Duration.Whole:
                case Duration.Half:
                case Duration.Quarter:
                case Duration.Eighth:
                case Duration.Sixteenth:
                    return 9;
                case Duration.ThirtySecond:
                    return 12;
                case Duration.SixtyFourth:
                    return 14;
                case Duration.OneHundredTwentyEighth:
                case Duration.TwoHundredFiftySixth:
                    return 20;
            }
            return 10;
        }
        doLayout() {
            this.width = ScoreRestGlyph.getSize(this._duration) * this.scale;
        }
        updateBeamingHelper(cx) {
            if (this.beamingHelper) {
                this.beamingHelper.registerBeatLineX('score', this.beat, cx + this.x + this.width / 2, cx + this.x + this.width / 2);
            }
        }
    }

    class AccidentalGroupGlyph extends GlyphGroup {
        constructor() {
            super(0, 0);
        }
        doLayout() {
            if (!this.glyphs) {
                this.width = 0;
                return;
            }
            //
            // Determine Columns for accidentals
            //
            this.glyphs.sort((a, b) => {
                if (a.y < b.y) {
                    return -1;
                }
                if (a.y > b.y) {
                    return 1;
                }
                return 0;
            });
            // defines the reserved y position of the columns
            let columns = [];
            columns.push(AccidentalGroupGlyph.NonReserved);
            let accidentalSize = 21 * this.scale;
            for (let i = 0, j = this.glyphs.length; i < j; i++) {
                let g = this.glyphs[i];
                g.renderer = this.renderer;
                g.doLayout();
                // find column where glyph fits into
                // as long the glyph does not fit into the current column
                let gColumn = 0;
                while (columns[gColumn] > g.y) {
                    // move to next column
                    gColumn++;
                    // and create the new column if needed
                    if (gColumn === columns.length) {
                        columns.push(AccidentalGroupGlyph.NonReserved);
                    }
                }
                // temporary save column as X
                g.x = gColumn;
                columns[gColumn] = g.y + accidentalSize;
            }
            //
            // Place accidentals in columns
            //
            let columnWidth = 8 * this.scale;
            let padding = 2 * this.scale;
            if (this.glyphs.length === 0) {
                this.width = 0;
            }
            else {
                this.width = padding + columnWidth * columns.length;
            }
            for (let i = 0, j = this.glyphs.length; i < j; i++) {
                let g = this.glyphs[i];
                g.x = padding + (this.width - (g.x + 1) * columnWidth);
            }
        }
    }
    AccidentalGroupGlyph.NonReserved = -3000;

    class BendNoteHeadGroupGlyph extends ScoreNoteChordGlyphBase {
        constructor(beat, showParenthesis = false) {
            super();
            this._showParenthesis = false;
            this._noteValueLookup = new Map();
            this._accidentals = new AccidentalGroupGlyph();
            this._preNoteParenthesis = null;
            this._postNoteParenthesis = null;
            this.isEmpty = true;
            this.noteHeadOffset = 0;
            this._beat = beat;
            this._showParenthesis = showParenthesis;
            if (showParenthesis) {
                this._preNoteParenthesis = new GhostNoteContainerGlyph(true);
                this._postNoteParenthesis = new GhostNoteContainerGlyph(false);
            }
        }
        get direction() {
            return BeamDirection.Up;
        }
        getNoteValueY(noteValue, aboveNote = false) {
            if (this._noteValueLookup.has(noteValue)) {
                return this.y + this._noteValueLookup.get(noteValue).y + (aboveNote ? -(NoteHeadGlyph.NoteHeadHeight * NoteHeadGlyph.GraceScale * this.scale) / 2 : 0);
            }
            return 0;
        }
        containsNoteValue(noteValue) {
            return this._noteValueLookup.has(noteValue);
        }
        getNoteX(noteValue, onMiddle = true) {
            if (this._noteValueLookup.has(noteValue)) {
                let n = this._noteValueLookup.get(noteValue);
                let pos = this.x + n.x;
                if (onMiddle) {
                    pos += n.width / 2.0;
                }
                return pos;
            }
            return 0;
        }
        addGlyph(noteValue, quarterBend = false) {
            let sr = this.renderer;
            let noteHeadGlyph = new NoteHeadGlyph(0, 0, Duration.Quarter, true);
            let accidental = sr.accidentalHelper.applyAccidentalForValue(this._beat, noteValue, quarterBend);
            let line = sr.accidentalHelper.getNoteLineForValue(noteValue, false);
            noteHeadGlyph.y = sr.getScoreY(line, 0);
            if (this._showParenthesis) {
                this._preNoteParenthesis.renderer = this.renderer;
                this._postNoteParenthesis.renderer = this.renderer;
                this._preNoteParenthesis.addParenthesisOnLine(line, true);
                this._postNoteParenthesis.addParenthesisOnLine(line, true);
            }
            if (accidental !== AccidentalType.None) {
                this._accidentals.addGlyph(new AccidentalGlyph(0, noteHeadGlyph.y, accidental, true));
            }
            this._noteValueLookup.set(noteValue, noteHeadGlyph);
            this.add(noteHeadGlyph, line);
            this.isEmpty = false;
        }
        doLayout() {
            let x = 0;
            if (this._showParenthesis) {
                this._preNoteParenthesis.x = x;
                this._preNoteParenthesis.renderer = this.renderer;
                this._preNoteParenthesis.doLayout();
                x += this._preNoteParenthesis.width + BendNoteHeadGroupGlyph.ElementPadding * this.scale;
            }
            if (!this._accidentals.isEmpty) {
                this._accidentals.x = x;
                this._accidentals.renderer = this.renderer;
                this._accidentals.doLayout();
                x += this._accidentals.width + BendNoteHeadGroupGlyph.ElementPadding * this.scale;
            }
            this.noteStartX = x;
            super.doLayout();
            this.noteHeadOffset = this.noteStartX + (this.width - this.noteStartX) / 2;
            if (this._showParenthesis) {
                this._postNoteParenthesis.x = this.width + BendNoteHeadGroupGlyph.ElementPadding * this.scale;
                this._postNoteParenthesis.renderer = this.renderer;
                this._postNoteParenthesis.doLayout();
                this.width += this._postNoteParenthesis.width + BendNoteHeadGroupGlyph.ElementPadding * this.scale;
            }
        }
        paint(cx, cy, canvas) {
            // canvas.Color = Color.Random();
            // canvas.FillRect(cx + X, cy + Y, Width, 10);
            // canvas.Color = Renderer.Resources.MainGlyphColor;
            if (!this._accidentals.isEmpty) {
                this._accidentals.paint(cx + this.x, cy + this.y, canvas);
            }
            if (this._showParenthesis) {
                this._preNoteParenthesis.paint(cx + this.x, cy + this.y, canvas);
                this._postNoteParenthesis.paint(cx + this.x, cy + this.y, canvas);
            }
            super.paint(cx, cy, canvas);
        }
    }
    BendNoteHeadGroupGlyph.ElementPadding = 2;

    class ScoreHelperNotesBaseGlyph extends Glyph {
        constructor() {
            super(...arguments);
            this.BendNoteHeads = [];
        }
        drawBendSlur(canvas, x1, y1, x2, y2, down, scale, slurText) {
            let normalVectorX = y2 - y1;
            let normalVectorY = x2 - x1;
            let length = Math.sqrt(normalVectorX * normalVectorX + normalVectorY * normalVectorY);
            if (down) {
                normalVectorX *= -1;
            }
            else {
                normalVectorY *= -1;
            }
            // make to unit vector
            normalVectorX /= length;
            normalVectorY /= length;
            // center of connection
            // TODO: should be 1/3
            let centerX = (x2 + x1) / 2;
            let centerY = (y2 + y1) / 2;
            let offset = ScoreHelperNotesBaseGlyph.SlurHeight * scale;
            if (x2 - x1 < 20) {
                offset /= 2;
            }
            let cp1X = centerX + offset * normalVectorX;
            let cp1Y = centerY + offset * normalVectorY;
            canvas.beginPath();
            canvas.moveTo(x1, y1);
            canvas.lineTo(cp1X, cp1Y);
            canvas.lineTo(x2, y2);
            canvas.stroke();
            if (slurText) {
                let w = canvas.measureText(slurText);
                let textOffset = down ? 0 : -canvas.font.size;
                canvas.fillText(slurText, cp1X - w / 2, cp1Y + textOffset);
            }
        }
        doLayout() {
            super.doLayout();
            this.width = 0;
            for (let noteHeads of this.BendNoteHeads) {
                noteHeads.doLayout();
                this.width += noteHeads.width + 10 * this.scale;
            }
        }
        getBeamDirection(beat, noteRenderer) {
            // invert direction (if stems go up, ties go down to not cross them)
            switch (noteRenderer.getBeatDirection(beat)) {
                case BeamDirection.Up:
                    return BeamDirection.Down;
                default:
                    return BeamDirection.Up;
            }
        }
    }
    ScoreHelperNotesBaseGlyph.SlurHeight = 11;
    ScoreHelperNotesBaseGlyph.EndPadding = ((10 / 2) | 0) + 3;

    class TabBendRenderPoint extends BendPoint {
        constructor(offset = 0, value = 0) {
            super(offset, value);
            this.lineValue = 0;
            this.lineValue = value;
        }
    }

    class TabBendGlyph extends Glyph {
        constructor() {
            super(...arguments);
            this._notes = [];
            this._renderPoints = new Map();
            this._preBendMinValue = -1;
            this._bendMiddleMinValue = -1;
            this._bendEndMinValue = -1;
            this._bendEndContinuedMinValue = -1;
            this._releaseMinValue = -1;
            this._releaseContinuedMinValue = -1;
            this._maxBendValue = -1;
        }
        addBends(note) {
            this._notes.push(note);
            let renderPoints = this.createRenderingPoints(note);
            this._renderPoints.set(note.id, renderPoints);
            if (this._maxBendValue === -1 || this._maxBendValue < note.maxBendPoint.value) {
                this._maxBendValue = note.maxBendPoint.value;
            }
            // compute arrow end values for common bend types
            let value = 0;
            switch (note.bendType) {
                case BendType.Bend:
                    value = renderPoints[1].value;
                    if (note.isTieOrigin) {
                        if (this._bendEndContinuedMinValue === -1 || value < this._bendEndContinuedMinValue) {
                            this._bendEndContinuedMinValue = value;
                        }
                    }
                    else {
                        if (this._bendEndMinValue === -1 || value < this._bendEndMinValue) {
                            this._bendEndMinValue = value;
                        }
                    }
                    break;
                case BendType.Release:
                    value = renderPoints[1].value;
                    if (note.isTieOrigin) {
                        if (this._releaseContinuedMinValue === -1 || value < this._releaseContinuedMinValue) {
                            this._releaseContinuedMinValue = value;
                        }
                    }
                    else {
                        if (value > 0 && (this._releaseMinValue === -1 || value < this._releaseMinValue)) {
                            this._releaseMinValue = value;
                        }
                    }
                    break;
                case BendType.BendRelease:
                    value = renderPoints[1].value;
                    if (this._bendMiddleMinValue === -1 || value < this._bendMiddleMinValue) {
                        this._bendMiddleMinValue = value;
                    }
                    value = renderPoints[2].value;
                    if (note.isTieOrigin) {
                        if (this._releaseContinuedMinValue === -1 || value < this._releaseContinuedMinValue) {
                            this._releaseContinuedMinValue = value;
                        }
                    }
                    else {
                        if (value > 0 && (this._releaseMinValue === -1 || value < this._releaseMinValue)) {
                            this._releaseMinValue = value;
                        }
                    }
                    break;
                case BendType.Prebend:
                    value = renderPoints[0].value;
                    if (this._preBendMinValue === -1 || value < this._preBendMinValue) {
                        this._preBendMinValue = value;
                    }
                    break;
                case BendType.PrebendBend:
                    value = renderPoints[0].value;
                    if (this._preBendMinValue === -1 || value < this._preBendMinValue) {
                        this._preBendMinValue = value;
                    }
                    value = renderPoints[1].value;
                    if (note.isTieOrigin) {
                        if (this._bendEndContinuedMinValue === -1 || value < this._bendEndContinuedMinValue) {
                            this._bendEndContinuedMinValue = value;
                        }
                    }
                    else {
                        if (this._bendEndMinValue === -1 || value < this._bendEndMinValue) {
                            this._bendEndMinValue = value;
                        }
                    }
                    break;
                case BendType.PrebendRelease:
                    value = renderPoints[0].value;
                    if (this._preBendMinValue === -1 || value < this._preBendMinValue) {
                        this._preBendMinValue = value;
                    }
                    value = renderPoints[1].value;
                    if (note.isTieOrigin) {
                        if (this._releaseContinuedMinValue === -1 || value < this._releaseContinuedMinValue) {
                            this._releaseContinuedMinValue = value;
                        }
                    }
                    else {
                        if (value > 0 && (this._releaseMinValue === -1 || value < this._releaseMinValue)) {
                            this._releaseMinValue = value;
                        }
                    }
                    break;
            }
        }
        doLayout() {
            super.doLayout();
            let bendHeight = this._maxBendValue * TabBendGlyph.BendValueHeight * this.scale;
            this.renderer.registerOverflowTop(bendHeight);
            let value = 0;
            for (let note of this._notes) {
                let renderPoints = this._renderPoints.get(note.id);
                switch (note.bendType) {
                    case BendType.Bend:
                        renderPoints[1].lineValue = note.isTieOrigin
                            ? this._bendEndContinuedMinValue
                            : this._bendEndMinValue;
                        break;
                    case BendType.Release:
                        value = note.isTieOrigin ? this._releaseContinuedMinValue : this._releaseMinValue;
                        if (value >= 0) {
                            renderPoints[1].lineValue = value;
                        }
                        break;
                    case BendType.BendRelease:
                        renderPoints[1].lineValue = this._bendMiddleMinValue;
                        value = note.isTieOrigin ? this._releaseContinuedMinValue : this._releaseMinValue;
                        if (value >= 0) {
                            renderPoints[2].lineValue = value;
                        }
                        break;
                    case BendType.Prebend:
                        renderPoints[0].lineValue = this._preBendMinValue;
                        break;
                    case BendType.PrebendBend:
                        renderPoints[0].lineValue = this._preBendMinValue;
                        renderPoints[1].lineValue = note.isTieOrigin
                            ? this._bendEndContinuedMinValue
                            : this._bendEndMinValue;
                        break;
                    case BendType.PrebendRelease:
                        renderPoints[0].lineValue = this._preBendMinValue;
                        value = note.isTieOrigin ? this._releaseContinuedMinValue : this._releaseMinValue;
                        if (value >= 0) {
                            renderPoints[1].lineValue = value;
                        }
                        break;
                }
            }
            this.width = 0;
            this._notes.sort((a, b) => {
                if (a.isStringed) {
                    return a.string - b.string;
                }
                return a.realValue - b.realValue;
            });
        }
        createRenderingPoints(note) {
            let renderingPoints = [];
            // Guitar Pro Rendering Note:
            // Last point of bend is always at end of the note even
            // though it might not be 100% correct from timing perspective.
            switch (note.bendType) {
                case BendType.Custom:
                    for (let bendPoint of note.bendPoints) {
                        renderingPoints.push(new TabBendRenderPoint(bendPoint.offset, bendPoint.value));
                    }
                    break;
                case BendType.BendRelease:
                    renderingPoints.push(new TabBendRenderPoint(0, note.bendPoints[0].value));
                    renderingPoints.push(new TabBendRenderPoint((BendPoint.MaxPosition / 2) | 0, note.bendPoints[1].value));
                    renderingPoints.push(new TabBendRenderPoint(BendPoint.MaxPosition, note.bendPoints[3].value));
                    break;
                case BendType.Bend:
                case BendType.Hold:
                case BendType.Prebend:
                case BendType.PrebendBend:
                case BendType.PrebendRelease:
                case BendType.Release:
                    renderingPoints.push(new TabBendRenderPoint(0, note.bendPoints[0].value));
                    renderingPoints.push(new TabBendRenderPoint(BendPoint.MaxPosition, note.bendPoints[1].value));
                    break;
            }
            return renderingPoints;
        }
        paint(cx, cy, canvas) {
            let color = canvas.color;
            if (this._notes.length > 1) {
                canvas.color = this.renderer.resources.secondaryGlyphColor;
            }
            for (let note of this._notes) {
                let renderPoints = this._renderPoints.get(note.id);
                let startNoteRenderer = this.renderer;
                let endNote = note;
                let isMultiBeatBend = false;
                let endNoteRenderer = null;
                let endNoteHasBend = false;
                let slurText = note.bendStyle === BendStyle.Gradual ? 'grad.' : '';
                let endBeat = null;
                while (endNote.isTieOrigin) {
                    let nextNote = endNote.tieDestination;
                    endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, nextNote.beat.voice.bar);
                    if (!endNoteRenderer || startNoteRenderer.staff !== endNoteRenderer.staff) {
                        break;
                    }
                    endNote = nextNote;
                    isMultiBeatBend = true;
                    if (endNote.hasBend || !this.renderer.settings.notation.extendBendArrowsOnTiedNotes) {
                        endNoteHasBend = true;
                        break;
                    }
                }
                endBeat = endNote.beat;
                endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, endBeat.voice.bar);
                if (endBeat.isLastOfVoice &&
                    !endNote.hasBend &&
                    this.renderer.settings.notation.extendBendArrowsOnTiedNotes) {
                    endBeat = null;
                }
                let startX = 0;
                let endX = 0;
                let topY = cy + startNoteRenderer.y;
                // float bottomY = cy + startNoteRenderer.Y + startNoteRenderer.GetNoteY(note);
                startX = cx + startNoteRenderer.x;
                if (renderPoints[0].value > 0 || note.isContinuedBend) {
                    startX += startNoteRenderer.getBeatX(note.beat, BeatXPosition.MiddleNotes);
                }
                else {
                    startX += startNoteRenderer.getNoteX(note, true);
                }
                // canvas.Color = Color.Random();
                // canvas.FillRect(
                //    cx + startNoteRenderer.X + startNoteRenderer.GetBeatX(_note.Beat, BeatXPosition.MiddleNotes),
                //    cy + startNoteRenderer.Y, 10, 10);
                // canvas.FillRect(
                //    cx + startNoteRenderer.X + startNoteRenderer.GetBeatX(_note.Beat, BeatXPosition.EndBeat),
                //    cy + startNoteRenderer.Y + 10, 10, 10);
                if (!endBeat || (endBeat.isLastOfVoice && !endNoteHasBend)) {
                    endX = cx + endNoteRenderer.x + endNoteRenderer.postBeatGlyphsStart;
                }
                else if (endNoteHasBend || !endBeat.nextBeat) {
                    endX = cx + endNoteRenderer.x + endNoteRenderer.getBeatX(endBeat, BeatXPosition.MiddleNotes);
                }
                else if (note.bendType === BendType.Hold) {
                    endX = cx + endNoteRenderer.x + endNoteRenderer.getBeatX(endBeat.nextBeat, BeatXPosition.OnNotes);
                }
                else {
                    endX = cx + endNoteRenderer.x + endNoteRenderer.getBeatX(endBeat.nextBeat, BeatXPosition.PreNotes);
                }
                if (!isMultiBeatBend) {
                    endX -= TabBendGlyph.ArrowSize * this.scale;
                }
                // we need some pixels for the arrow. otherwise we might draw into the next
                // note
                let width = endX - startX;
                // calculate offsets per step
                let dX = width / BendPoint.MaxPosition;
                canvas.beginPath();
                for (let i = 0, j = renderPoints.length - 1; i < j; i++) {
                    let firstPt = renderPoints[i];
                    let secondPt = renderPoints[i + 1];
                    // draw pre-bend if previous
                    if (i === 0 && firstPt.value !== 0 && !note.isTieDestination) {
                        this.paintBend(note, new TabBendRenderPoint(0, 0), firstPt, startX, topY, dX, slurText, canvas);
                    }
                    if (note.bendType !== BendType.Prebend) {
                        this.paintBend(note, firstPt, secondPt, startX, topY, dX, slurText, canvas);
                    }
                    else if (note.isTieOrigin && note.tieDestination.hasBend) {
                        secondPt = new TabBendRenderPoint(BendPoint.MaxPosition, firstPt.value);
                        secondPt.lineValue = firstPt.lineValue;
                        this.paintBend(note, firstPt, secondPt, startX, topY, dX, slurText, canvas);
                    }
                }
                canvas.color = color;
            }
        }
        paintBend(note, firstPt, secondPt, cx, cy, dX, slurText, canvas) {
            let r = this.renderer;
            let res = this.renderer.resources;
            let overflowOffset = r.lineOffset / 2;
            let x1 = cx + dX * firstPt.offset;
            let bendValueHeight = TabBendGlyph.BendValueHeight * this.scale;
            let y1 = cy - bendValueHeight * firstPt.lineValue;
            if (firstPt.value === 0) {
                if (secondPt.offset === firstPt.offset) {
                    y1 += r.getNoteY(note.beat.maxStringNote, true);
                }
                else {
                    y1 += r.getNoteY(note, false);
                }
            }
            else {
                y1 += overflowOffset;
            }
            let x2 = cx + dX * secondPt.offset;
            let y2 = cy - bendValueHeight * secondPt.lineValue;
            if (secondPt.lineValue === 0) {
                y2 += r.getNoteY(note, false);
            }
            else {
                y2 += overflowOffset;
            }
            // what type of arrow? (up/down)
            let arrowOffset = 0;
            let arrowSize = TabBendGlyph.ArrowSize * this.scale;
            if (secondPt.value > firstPt.value) {
                if (y2 + arrowSize > y1) {
                    y2 = y1 - arrowSize;
                }
                canvas.beginPath();
                canvas.moveTo(x2, y2);
                canvas.lineTo(x2 - arrowSize * 0.5, y2 + arrowSize);
                canvas.lineTo(x2 + arrowSize * 0.5, y2 + arrowSize);
                canvas.closePath();
                canvas.fill();
                arrowOffset = arrowSize;
            }
            else if (secondPt.value !== firstPt.value) {
                if (y2 < y1) {
                    y2 = y1 + arrowSize;
                }
                canvas.beginPath();
                canvas.moveTo(x2, y2);
                canvas.lineTo(x2 - arrowSize * 0.5, y2 - arrowSize);
                canvas.lineTo(x2 + arrowSize * 0.5, y2 - arrowSize);
                canvas.closePath();
                canvas.fill();
                arrowOffset = -arrowSize;
            }
            canvas.stroke();
            if (firstPt.value === secondPt.value) {
                // draw horizontal dashed line
                // to really have the line ending at the right position
                // we draw from right to left. it's okay if the space is at the beginning
                if (firstPt.lineValue > 0) {
                    let dashX = x2;
                    let dashSize = TabBendGlyph.DashSize * this.scale;
                    let end = x1 + dashSize;
                    let dashes = (dashX - x1) / (dashSize * 2);
                    if (dashes < 1) {
                        canvas.moveTo(dashX, y1);
                        canvas.lineTo(x1, y1);
                    }
                    else {
                        while (dashX > end) {
                            canvas.moveTo(dashX, y1);
                            canvas.lineTo(dashX - dashSize, y1);
                            dashX -= dashSize * 2;
                        }
                    }
                    canvas.stroke();
                }
            }
            else {
                if (x2 > x1) {
                    // draw bezier lien from first to second point
                    canvas.moveTo(x1, y1);
                    canvas.bezierCurveTo((x1 + x2) / 2, y1, x2, y1, x2, y2 + arrowOffset);
                    canvas.stroke();
                }
                else {
                    canvas.moveTo(x1, y1);
                    canvas.lineTo(x2, y2);
                    canvas.stroke();
                }
            }
            if (slurText && firstPt.offset < secondPt.offset) {
                canvas.font = res.graceFont;
                let size = canvas.measureText(slurText);
                let y = 0;
                let x = 0;
                if (y1 > y2) {
                    let h = Math.abs(y1 - y2);
                    y = h > canvas.font.size * 1.3 ? y1 - h / 2 : y1;
                    x = (x1 + x2 - size) / 2;
                }
                else {
                    y = y1;
                    x = x2 - size;
                }
                canvas.fillText(slurText, x, y);
            }
            if (secondPt.value !== 0 && firstPt.value !== secondPt.value) {
                let dV = secondPt.value;
                let up = secondPt.value > firstPt.value;
                dV = Math.abs(dV);
                // calculate label
                let s = '';
                // Full Steps
                if (dV === 4) {
                    s = 'full';
                    dV -= 4;
                }
                else if (dV >= 4 || dV <= -4) {
                    let steps = (dV / 4) | 0;
                    s += steps;
                    // Quaters
                    dV -= steps * 4;
                }
                if (dV > 0) {
                    s += TabBendGlyph.getFractionSign(dV);
                }
                if (s !== '') {
                    y2 = cy - bendValueHeight * secondPt.value;
                    let startY = y2;
                    if (!up) {
                        startY = y1 + (Math.abs(y2 - y1) * 1) / 3;
                    }
                    // draw label
                    canvas.font = res.tablatureFont;
                    let size = canvas.measureText(s);
                    let y = startY - res.tablatureFont.size * 0.5 - 2 * this.scale;
                    let x = x2 - size / 2;
                    canvas.fillText(s, x, y);
                }
            }
        }
        static getFractionSign(steps) {
            switch (steps) {
                case 1:
                    return 'Â¼';
                case 2:
                    return 'Â½';
                case 3:
                    return 'Â¾';
                default:
                    return steps + '/ 4';
            }
        }
    }
    TabBendGlyph.ArrowSize = 6;
    TabBendGlyph.DashSize = 3;
    TabBendGlyph.BendValueHeight = 6;

    class TabWhammyBarGlyph extends Glyph {
        constructor(beat) {
            super(0, 0);
            this._isSimpleDip = false;
            this._beat = beat;
            this._renderPoints = this.createRenderingPoints(beat);
        }
        createRenderingPoints(beat) {
            // advanced rendering
            if (beat.whammyBarType === WhammyType.Custom) {
                return beat.whammyBarPoints;
            }
            let renderingPoints = [];
            // Guitar Pro Rendering Note:
            // Last point of bend is always at end of the beat even
            // though it might not be 100% correct from timing perspective.
            switch (beat.whammyBarType) {
                case WhammyType.Dive:
                case WhammyType.Hold:
                case WhammyType.PrediveDive:
                case WhammyType.Predive:
                    renderingPoints.push(new BendPoint(0, beat.whammyBarPoints[0].value));
                    renderingPoints.push(new BendPoint(BendPoint.MaxPosition, beat.whammyBarPoints[1].value));
                    break;
                case WhammyType.Dip:
                    renderingPoints.push(new BendPoint(0, beat.whammyBarPoints[0].value));
                    renderingPoints.push(new BendPoint((BendPoint.MaxPosition / 2) | 0, beat.whammyBarPoints[1].value));
                    renderingPoints.push(new BendPoint(BendPoint.MaxPosition, beat.whammyBarPoints[beat.whammyBarPoints.length - 1].value));
                    break;
            }
            return renderingPoints;
        }
        doLayout() {
            super.doLayout();
            this._isSimpleDip =
                this.renderer.settings.notation.notationMode === exports.NotationMode.SongBook &&
                    this._beat.whammyBarType === WhammyType.Dip;
            //
            // Get the min and max values for all combined whammys
            let minValue = null;
            let maxValue = null;
            let beat = this._beat;
            while (beat && beat.hasWhammyBar) {
                if (!minValue || minValue.value > beat.minWhammyPoint.value) {
                    minValue = beat.minWhammyPoint;
                }
                if (!maxValue || maxValue.value < beat.maxWhammyPoint.value) {
                    maxValue = beat.maxWhammyPoint;
                }
                beat = beat.nextBeat;
            }
            let topOffset = maxValue.value > 0 ? Math.abs(this.getOffset(maxValue.value)) : 0;
            if (topOffset > 0 ||
                this._beat.whammyBarPoints[0].value !== 0 ||
                this.renderer.settings.notation.showZeroOnDiveWhammy) {
                topOffset += this.renderer.resources.tablatureFont.size * 2;
            }
            let bottomOffset = minValue.value < 0 ? Math.abs(this.getOffset(minValue.value)) : 0;
            this.renderer.registerOverflowTop(topOffset + bottomOffset);
            let currentOffset = this.renderer.staff.getSharedLayoutData(TabWhammyBarGlyph.TopOffsetSharedDataKey, -1);
            if (topOffset > currentOffset) {
                this.renderer.staff.setSharedLayoutData(TabWhammyBarGlyph.TopOffsetSharedDataKey, topOffset);
            }
        }
        getOffset(value) {
            if (value === 0) {
                return 0;
            }
            let offset = TabWhammyBarGlyph.PerHalfSize * this.scale +
                Math.log2(Math.abs(value) / 2) * TabWhammyBarGlyph.PerHalfSize * this.scale;
            if (value < 0) {
                offset = -offset;
            }
            return offset;
        }
        paint(cx, cy, canvas) {
            let startNoteRenderer = this.renderer;
            let endBeat = this._beat.nextBeat;
            let endNoteRenderer = null;
            let endXPositionType = BeatXPosition.PreNotes;
            if (endBeat) {
                endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, endBeat.voice.bar);
                if (!endNoteRenderer || endNoteRenderer.staff !== startNoteRenderer.staff) {
                    endBeat = null;
                    endNoteRenderer = null;
                }
                else if (endNoteRenderer !== startNoteRenderer && !endBeat.hasWhammyBar) {
                    endBeat = null;
                    endNoteRenderer = null;
                }
                else {
                    endXPositionType =
                        endBeat.hasWhammyBar &&
                            (startNoteRenderer.settings.notation.notationMode !== exports.NotationMode.SongBook ||
                                endBeat.whammyBarType !== WhammyType.Dip)
                            ? BeatXPosition.MiddleNotes
                            : BeatXPosition.PreNotes;
                }
            }
            let startX = 0;
            let endX = 0;
            if (this._isSimpleDip) {
                startX =
                    cx +
                        startNoteRenderer.x +
                        startNoteRenderer.getBeatX(this._beat, BeatXPosition.OnNotes) -
                        2 * this.scale;
                endX =
                    cx +
                        startNoteRenderer.x +
                        startNoteRenderer.getBeatX(this._beat, BeatXPosition.PostNotes) +
                        2 * this.scale;
            }
            else {
                startX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._beat, BeatXPosition.MiddleNotes);
                endX = !endNoteRenderer
                    ? cx + startNoteRenderer.x + startNoteRenderer.width - 2 * this.scale
                    : cx + endNoteRenderer.x + endNoteRenderer.getBeatX(endBeat, endXPositionType);
            }
            let old = canvas.textAlign;
            canvas.textAlign = TextAlign.Center;
            if (this._renderPoints.length >= 2) {
                let dx = (endX - startX) / BendPoint.MaxPosition;
                canvas.beginPath();
                let zeroY = cy + this.renderer.staff.getSharedLayoutData(TabWhammyBarGlyph.TopOffsetSharedDataKey, 0);
                let slurText = this._beat.whammyStyle === BendStyle.Gradual ? 'grad.' : '';
                for (let i = 0, j = this._renderPoints.length - 1; i < j; i++) {
                    let firstPt = this._renderPoints[i];
                    let secondPt = this._renderPoints[i + 1];
                    let nextPt = i < j - 2 ? this._renderPoints[i + 2] : null;
                    let isFirst = i === 0;
                    // draw pre-bend if previous
                    if (i === 0 && firstPt.value !== 0 && !this._beat.isContinuedWhammy) {
                        this.paintWhammy(false, new BendPoint(0, 0), firstPt, secondPt, startX, zeroY, dx, canvas);
                        isFirst = false;
                    }
                    this.paintWhammy(isFirst, firstPt, secondPt, nextPt, startX, zeroY, dx, canvas, slurText);
                    slurText = '';
                }
                canvas.stroke();
            }
            canvas.textAlign = old;
        }
        paintWhammy(isFirst, firstPt, secondPt, nextPt, cx, cy, dx, canvas, slurText) {
            let x1 = cx + dx * firstPt.offset;
            let x2 = cx + dx * secondPt.offset;
            let y1 = cy - this.getOffset(firstPt.value);
            let y2 = cy - this.getOffset(secondPt.value);
            if (firstPt.offset === secondPt.offset) {
                let dashSize = TabWhammyBarGlyph.DashSize * this.scale;
                let dashes = Math.abs(y2 - y1) / (dashSize * 2);
                if (dashes < 1) {
                    canvas.moveTo(x1, y1);
                    canvas.lineTo(x2, y2);
                }
                else {
                    let dashEndY = Math.max(y1, y2);
                    let dashStartY = Math.min(y1, y2);
                    while (dashEndY > dashStartY) {
                        canvas.moveTo(x1, dashStartY);
                        canvas.lineTo(x1, dashStartY + dashSize);
                        dashStartY += dashSize * 2;
                    }
                }
                canvas.stroke();
            }
            else if (firstPt.value === secondPt.value) {
                let dashSize = TabWhammyBarGlyph.DashSize * this.scale;
                let dashes = Math.abs(x2 - x1) / (dashSize * 2);
                if (dashes < 1) {
                    canvas.moveTo(x1, y1);
                    canvas.lineTo(x2, y2);
                }
                else {
                    let dashEndX = Math.max(x1, x2);
                    let dashStartX = Math.min(x1, x2);
                    while (dashEndX > dashStartX) {
                        canvas.moveTo(dashEndX, y1);
                        canvas.lineTo(dashEndX - dashSize, y1);
                        dashEndX -= dashSize * 2;
                    }
                }
                canvas.stroke();
            }
            else {
                canvas.moveTo(x1, y1);
                canvas.lineTo(x2, y2);
            }
            let res = this.renderer.resources;
            if (isFirst && !this._beat.isContinuedWhammy && !this._isSimpleDip) {
                let y = y1;
                y -= res.tablatureFont.size + 2 * this.scale;
                if (this.renderer.settings.notation.showZeroOnDiveWhammy) {
                    canvas.fillText('0', x1, y);
                }
                if (slurText) {
                    y -= res.tablatureFont.size + 2 * this.scale;
                    canvas.fillText(slurText, x1, y);
                }
            }
            let dV = Math.abs(secondPt.value);
            if ((dV !== 0 || (this.renderer.settings.notation.showZeroOnDiveWhammy && !this._isSimpleDip)) &&
                firstPt.value !== secondPt.value) {
                let s = '';
                if (secondPt.value < 0) {
                    s += '-';
                }
                if (dV >= 4) {
                    let steps = (dV / 4) | 0;
                    s += steps;
                    // Quaters
                    dV -= steps * 4;
                }
                else if (dV === 0) {
                    s += '0';
                }
                if (dV > 0) {
                    s += TabBendGlyph.getFractionSign(dV);
                }
                let y = 0;
                if (this._isSimpleDip) {
                    y = Math.min(y1, y2) - res.tablatureFont.size - 2 * this.scale;
                }
                else {
                    y = firstPt.offset === secondPt.offset ? Math.min(y1, y2) : y2;
                    y -= res.tablatureFont.size + 2 * this.scale;
                    if (nextPt && nextPt.value > secondPt.value) {
                        y -= 2 * this.scale;
                    }
                }
                let x = x2;
                canvas.fillText(s, x, y);
            }
        }
    }
    TabWhammyBarGlyph.TopOffsetSharedDataKey = 'tab.whammy.topoffset';
    TabWhammyBarGlyph.PerHalfSize = 6;
    TabWhammyBarGlyph.DashSize = 3;

    class ScoreWhammyBarGlyph extends ScoreHelperNotesBaseGlyph {
        constructor(beat) {
            super();
            this._beat = beat;
        }
        doLayout() {
            let whammyMode = this.renderer.settings.notation.notationMode;
            switch (this._beat.whammyBarType) {
                case WhammyType.None:
                case WhammyType.Custom:
                case WhammyType.Hold:
                    return;
                case WhammyType.Dive:
                case WhammyType.PrediveDive:
                    {
                        let endGlyphs = new BendNoteHeadGroupGlyph(this._beat, false);
                        endGlyphs.renderer = this.renderer;
                        let lastWhammyPoint = this._beat.whammyBarPoints[this._beat.whammyBarPoints.length - 1];
                        for (let note of this._beat.notes) {
                            if (!note.isTieOrigin) {
                                endGlyphs.addGlyph(this.getBendNoteValue(note, lastWhammyPoint), lastWhammyPoint.value % 2 !== 0);
                            }
                        }
                        endGlyphs.doLayout();
                        this.BendNoteHeads.push(endGlyphs);
                    }
                    break;
                case WhammyType.Dip:
                    {
                        if (whammyMode === exports.NotationMode.SongBook) {
                            let res = this.renderer.resources;
                            this.renderer.simpleWhammyOverflow =
                                res.tablatureFont.size * 1.5 +
                                    ScoreWhammyBarGlyph.SimpleDipHeight * this.scale +
                                    ScoreWhammyBarGlyph.SimpleDipPadding * this.scale;
                        }
                        else {
                            let middleGlyphs = new BendNoteHeadGroupGlyph(this._beat, false);
                            middleGlyphs.renderer = this.renderer;
                            if (this.renderer.settings.notation.notationMode === exports.NotationMode.GuitarPro) {
                                let middleBendPoint = this._beat.whammyBarPoints[1];
                                for (let note of this._beat.notes) {
                                    middleGlyphs.addGlyph(this.getBendNoteValue(note, this._beat.whammyBarPoints[1]), middleBendPoint.value % 2 !== 0);
                                }
                            }
                            middleGlyphs.doLayout();
                            this.BendNoteHeads.push(middleGlyphs);
                            let endGlyphs = new BendNoteHeadGroupGlyph(this._beat, false);
                            endGlyphs.renderer = this.renderer;
                            if (this.renderer.settings.notation.notationMode === exports.NotationMode.GuitarPro) {
                                let lastBendPoint = this._beat.whammyBarPoints[this._beat.whammyBarPoints.length - 1];
                                for (let note of this._beat.notes) {
                                    endGlyphs.addGlyph(this.getBendNoteValue(note, lastBendPoint), lastBendPoint.value % 2 !== 0);
                                }
                            }
                            endGlyphs.doLayout();
                            this.BendNoteHeads.push(endGlyphs);
                        }
                    }
                    break;
                case WhammyType.Predive:
                    break;
            }
            super.doLayout();
        }
        paint(cx, cy, canvas) {
            let beat = this._beat;
            switch (beat.whammyBarType) {
                case WhammyType.None:
                case WhammyType.Custom:
                    return;
            }
            let whammyMode = this.renderer.settings.notation.notationMode;
            let startNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, beat.voice.bar);
            let startX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(beat, BeatXPosition.MiddleNotes);
            let beatDirection = this.getBeamDirection(beat, startNoteRenderer);
            let direction = this._beat.notes.length === 1 ? beatDirection : BeamDirection.Up;
            let textalign = canvas.textAlign;
            for (let i = 0; i < beat.notes.length; i++) {
                let note = beat.notes[i];
                let startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(note, true);
                if (direction === BeamDirection.Down) {
                    startY += NoteHeadGlyph.NoteHeadHeight * this.scale;
                }
                if (i > 0 && i >= ((this._beat.notes.length / 2) | 0)) {
                    direction = BeamDirection.Down;
                }
                let endX = cx + startNoteRenderer.x;
                if (beat.isLastOfVoice) {
                    endX += startNoteRenderer.width;
                }
                else {
                    endX += startNoteRenderer.getBeatX(beat, BeatXPosition.EndBeat);
                }
                endX -= 8 * this.scale;
                let slurText = beat.whammyStyle === BendStyle.Gradual && i === 0 ? 'grad.' : '';
                let endNoteRenderer = null;
                if (note.isTieOrigin) {
                    endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, note.tieDestination.beat.voice.bar);
                    if (endNoteRenderer && endNoteRenderer.staff === startNoteRenderer.staff) {
                        endX =
                            cx +
                                endNoteRenderer.x +
                                endNoteRenderer.getBeatX(note.tieDestination.beat, BeatXPosition.MiddleNotes);
                    }
                    else {
                        endNoteRenderer = null;
                    }
                }
                let heightOffset = NoteHeadGlyph.NoteHeadHeight * this.scale * NoteHeadGlyph.GraceScale * 0.5;
                if (direction === BeamDirection.Up) {
                    heightOffset = -heightOffset;
                }
                let endValue = 0;
                let endY = 0;
                switch (beat.whammyBarType) {
                    case WhammyType.Hold:
                        if (note.isTieOrigin) {
                            if (!endNoteRenderer) {
                                endY = startY;
                            }
                            else {
                                endY = cy + endNoteRenderer.y + endNoteRenderer.getNoteY(note.tieDestination, true);
                            }
                            TieGlyph.paintTie(canvas, this.scale, startX, startY, endX, endY, beatDirection === BeamDirection.Down, 22, 4);
                            canvas.fill();
                        }
                        break;
                    case WhammyType.Dive:
                        if (i === 0) {
                            this.BendNoteHeads[0].x = endX - this.BendNoteHeads[0].noteHeadOffset;
                            this.BendNoteHeads[0].y = cy + startNoteRenderer.y;
                            this.BendNoteHeads[0].paint(0, 0, canvas);
                        }
                        endValue = this.getBendNoteValue(note, beat.whammyBarPoints[beat.whammyBarPoints.length - 1]);
                        if (this.BendNoteHeads[0].containsNoteValue(endValue)) {
                            endY = this.BendNoteHeads[0].getNoteValueY(endValue, false) + heightOffset;
                            this.drawBendSlur(canvas, startX, startY, endX, endY, direction === BeamDirection.Down, this.scale, slurText);
                        }
                        else if (endNoteRenderer &&
                            ((note.isTieOrigin && note.tieDestination.beat.hasWhammyBar) || note.beat.isContinuedWhammy)) {
                            endY = cy + endNoteRenderer.y + endNoteRenderer.getNoteY(note.tieDestination, true);
                            this.drawBendSlur(canvas, startX, startY, endX, endY, direction === BeamDirection.Down, this.scale, slurText);
                        }
                        else if (note.isTieOrigin) {
                            if (!endNoteRenderer) {
                                endY = startY;
                            }
                            else {
                                endY = cy + endNoteRenderer.y + endNoteRenderer.getNoteY(note.tieDestination, true);
                            }
                            TieGlyph.paintTie(canvas, this.scale, startX, startY, endX, endY, beatDirection === BeamDirection.Down, 22, 4);
                            canvas.fill();
                        }
                        break;
                    case WhammyType.Dip:
                        if (whammyMode === exports.NotationMode.SongBook) {
                            if (i === 0) {
                                let simpleStartX = cx +
                                    startNoteRenderer.x +
                                    startNoteRenderer.getBeatX(this._beat, BeatXPosition.OnNotes) -
                                    2 * this.scale;
                                let simpleEndX = cx +
                                    startNoteRenderer.x +
                                    startNoteRenderer.getBeatX(this._beat, BeatXPosition.PostNotes) +
                                    2 * this.scale;
                                let middleX = (simpleStartX + simpleEndX) / 2;
                                let text = (((this._beat.whammyBarPoints[1].value - this._beat.whammyBarPoints[0].value) / 4) |
                                    0).toString();
                                canvas.font = this.renderer.resources.tablatureFont;
                                canvas.fillText(text, middleX, cy + this.y);
                                let simpleStartY = cy + this.y + canvas.font.size + 2 * this.scale;
                                let simpleEndY = simpleStartY + ScoreWhammyBarGlyph.SimpleDipHeight * this.scale;
                                if (this._beat.whammyBarPoints[1].value > this._beat.whammyBarPoints[0].value) {
                                    canvas.moveTo(simpleStartX, simpleEndY);
                                    canvas.lineTo(middleX, simpleStartY);
                                    canvas.lineTo(simpleEndX, simpleEndY);
                                }
                                else {
                                    canvas.moveTo(simpleStartX, simpleStartY);
                                    canvas.lineTo(middleX, simpleEndY);
                                    canvas.lineTo(simpleEndX, simpleStartY);
                                }
                                canvas.stroke();
                            }
                            if (note.isTieOrigin) {
                                if (!endNoteRenderer) {
                                    endY = startY;
                                }
                                else {
                                    endY = cy + endNoteRenderer.y + endNoteRenderer.getNoteY(note.tieDestination, true);
                                }
                                TieGlyph.paintTie(canvas, this.scale, startX, startY, endX, endY, beatDirection === BeamDirection.Down, 22, 4);
                                canvas.fill();
                            }
                        }
                        else {
                            let middleX = (startX + endX) / 2;
                            this.BendNoteHeads[0].x = middleX - this.BendNoteHeads[0].noteHeadOffset;
                            this.BendNoteHeads[0].y = cy + startNoteRenderer.y;
                            this.BendNoteHeads[0].paint(0, 0, canvas);
                            let middleValue = this.getBendNoteValue(note, beat.whammyBarPoints[1]);
                            let middleY = this.BendNoteHeads[0].getNoteValueY(middleValue, false) + heightOffset;
                            this.drawBendSlur(canvas, startX, startY, middleX, middleY, direction === BeamDirection.Down, this.scale, slurText);
                            this.BendNoteHeads[1].x = endX - this.BendNoteHeads[1].noteHeadOffset;
                            this.BendNoteHeads[1].y = cy + startNoteRenderer.y;
                            this.BendNoteHeads[1].paint(0, 0, canvas);
                            endValue = this.getBendNoteValue(note, beat.whammyBarPoints[beat.whammyBarPoints.length - 1]);
                            endY = this.BendNoteHeads[1].getNoteValueY(endValue, false) + heightOffset;
                            this.drawBendSlur(canvas, middleX, middleY, endX, endY, direction === BeamDirection.Down, this.scale, slurText);
                        }
                        break;
                    case WhammyType.PrediveDive:
                    case WhammyType.Predive:
                        let preX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(note.beat, BeatXPosition.PreNotes);
                        preX += startNoteRenderer.getBeatContainer(note.beat).preNotes
                            .prebendNoteHeadOffset;
                        let preY = cy +
                            startNoteRenderer.y +
                            startNoteRenderer.getScoreY(startNoteRenderer.accidentalHelper.getNoteLineForValue(note.displayValue - ((note.beat.whammyBarPoints[0].value / 2) | 0), false), 0) +
                            heightOffset;
                        this.drawBendSlur(canvas, preX, preY, startX, startY, direction === BeamDirection.Down, this.scale, slurText);
                        if (this.BendNoteHeads.length > 0) {
                            this.BendNoteHeads[0].x = endX - this.BendNoteHeads[0].noteHeadOffset;
                            this.BendNoteHeads[0].y = cy + startNoteRenderer.y;
                            this.BendNoteHeads[0].paint(0, 0, canvas);
                            endValue = this.getBendNoteValue(note, beat.whammyBarPoints[beat.whammyBarPoints.length - 1]);
                            endY = this.BendNoteHeads[0].getNoteValueY(endValue, false) + heightOffset;
                            this.drawBendSlur(canvas, startX, startY, endX, endY, direction === BeamDirection.Down, this.scale, slurText);
                        }
                        break;
                }
            }
            canvas.textAlign = textalign;
        }
        getBendNoteValue(note, bendPoint) {
            // NOTE: bendpoints are in 1/4 tones, but the note values are in 1/2 notes.
            return note.displayValueWithoutBend + ((bendPoint.value / 2) | 0);
        }
    }
    ScoreWhammyBarGlyph.SimpleDipHeight = TabWhammyBarGlyph.PerHalfSize * 2;
    ScoreWhammyBarGlyph.SimpleDipPadding = 2;

    /**
     * This simple glyph allows to put an empty region in to a BarRenderer.
     */
    class SpacingGlyph extends Glyph {
        constructor(x, y, width) {
            super(x, y);
            this.width = width;
        }
    }

    class ScoreBeatGlyph extends BeatOnNoteGlyphBase {
        constructor() {
            super(...arguments);
            this.noteHeads = null;
            this.restGlyph = null;
        }
        updateBeamingHelper() {
            if (this.noteHeads) {
                this.noteHeads.updateBeamingHelper(this.container.x + this.x);
            }
            else if (this.restGlyph) {
                this.restGlyph.updateBeamingHelper(this.container.x + this.x);
            }
        }
        doLayout() {
            // create glyphs
            let sr = this.renderer;
            if (!this.container.beat.isEmpty) {
                if (!this.container.beat.isRest) {
                    //
                    // Note heads
                    //
                    this.noteHeads = new ScoreNoteChordGlyph();
                    this.noteHeads.beat = this.container.beat;
                    this.noteHeads.beamingHelper = this.beamingHelper;
                    let ghost = new GhostNoteContainerGlyph(false);
                    ghost.renderer = this.renderer;
                    for (let note of this.container.beat.notes) {
                        if (note.isVisible) {
                            this.createNoteGlyph(note);
                            ghost.addParenthesis(note);
                        }
                    }
                    this.addGlyph(this.noteHeads);
                    if (!ghost.isEmpty) {
                        this.addGlyph(new SpacingGlyph(0, 0, 4 * (this.container.beat.graceType !== GraceType.None ? NoteHeadGlyph.GraceScale : 1) * this.scale));
                        this.addGlyph(ghost);
                    }
                    //
                    // Whammy Bar
                    if (this.container.beat.hasWhammyBar) {
                        let whammy = new ScoreWhammyBarGlyph(this.container.beat);
                        whammy.renderer = this.renderer;
                        whammy.doLayout();
                        this.container.ties.push(whammy);
                    }
                    //
                    // Note dots
                    //
                    if (this.container.beat.dots > 0) {
                        this.addGlyph(new SpacingGlyph(0, 0, 5 * this.scale));
                        for (let i = 0; i < this.container.beat.dots; i++) {
                            let group = new GlyphGroup(0, 0);
                            for (let note of this.container.beat.notes) {
                                this.createBeatDot(sr.getNoteLine(note), group);
                            }
                            this.addGlyph(group);
                        }
                    }
                }
                else {
                    let dotLine = 0;
                    let line = 0;
                    let offset = 0;
                    switch (this.container.beat.duration) {
                        case Duration.QuadrupleWhole:
                            line = 6;
                            dotLine = 5;
                            break;
                        case Duration.DoubleWhole:
                            line = 6;
                            dotLine = 5;
                            break;
                        case Duration.Whole:
                            line = 4;
                            dotLine = 5;
                            break;
                        case Duration.Half:
                            line = 6;
                            dotLine = 5;
                            break;
                        case Duration.Quarter:
                            line = 6;
                            offset = -2;
                            dotLine = 5;
                            break;
                        case Duration.Eighth:
                            line = 6;
                            dotLine = 5;
                            break;
                        case Duration.Sixteenth:
                            line = 6;
                            dotLine = 5;
                            break;
                        case Duration.ThirtySecond:
                            line = 6;
                            dotLine = 3;
                            break;
                        case Duration.SixtyFourth:
                            line = 6;
                            dotLine = 3;
                            break;
                        case Duration.OneHundredTwentyEighth:
                            line = 6;
                            dotLine = 3;
                            break;
                        case Duration.TwoHundredFiftySixth:
                            line = 6;
                            dotLine = 3;
                            break;
                    }
                    let y = sr.getScoreY(line, offset);
                    this.restGlyph = new ScoreRestGlyph(0, y, this.container.beat.duration);
                    this.restGlyph.beat = this.container.beat;
                    this.restGlyph.beamingHelper = this.beamingHelper;
                    this.addGlyph(this.restGlyph);
                    //
                    // Note dots
                    //
                    if (this.container.beat.dots > 0) {
                        this.addGlyph(new SpacingGlyph(0, 0, 5 * this.scale));
                        for (let i = 0; i < this.container.beat.dots; i++) {
                            let group = new GlyphGroup(0, 0);
                            this.createBeatDot(dotLine, group);
                            this.addGlyph(group);
                        }
                    }
                }
            }
            super.doLayout();
            if (this.container.beat.isEmpty) {
                this.centerX = this.width / 2;
            }
            else if (this.container.beat.isRest) {
                this.centerX = this.restGlyph.x + this.restGlyph.width / 2;
            }
            else {
                this.centerX = this.noteHeads.x + this.noteHeads.width / 2;
            }
        }
        createBeatDot(line, group) {
            let sr = this.renderer;
            group.addGlyph(new CircleGlyph(0, sr.getScoreY(line, 0), 1.5 * this.scale));
        }
        createNoteHeadGlyph(n) {
            let isGrace = this.container.beat.graceType !== GraceType.None;
            if (n.beat.voice.bar.staff.isPercussion) {
                let value = n.realValue;
                if (value <= 30 || value >= 67 || ScoreBeatGlyph.NormalKeys.has(value)) {
                    return new NoteHeadGlyph(0, 0, Duration.Quarter, isGrace);
                }
                if (ScoreBeatGlyph.XKeys.has(value)) {
                    return new DrumSticksGlyph(0, 0, isGrace);
                }
                if (value === 46) {
                    return new HiHatGlyph(0, 0, isGrace);
                }
                if (value === 49 || value === 57) {
                    return new DiamondNoteHeadGlyph(0, 0, n.beat.duration, isGrace);
                }
                if (value === 52) {
                    return new ChineseCymbalGlyph(0, 0, isGrace);
                }
                if (value === 51 || value === 53 || value === 59) {
                    return new RideCymbalGlyph(0, 0, isGrace);
                }
                return new NoteHeadGlyph(0, 0, Duration.Quarter, isGrace);
            }
            if (n.isDead) {
                return new DeadNoteHeadGlyph(0, 0, isGrace);
            }
            if (n.beat.graceType === GraceType.BendGrace) {
                return new NoteHeadGlyph(0, 0, Duration.Quarter, true);
            }
            if (n.harmonicType === HarmonicType.Natural) {
                return new DiamondNoteHeadGlyph(0, 0, n.beat.duration, isGrace);
            }
            return new NoteHeadGlyph(0, 0, n.beat.duration, isGrace);
        }
        createNoteGlyph(n) {
            if (n.beat.graceType === GraceType.BendGrace && !n.hasBend) {
                return;
            }
            let sr = this.renderer;
            let noteHeadGlyph = this.createNoteHeadGlyph(n);
            // calculate y position
            let line = sr.getNoteLine(n);
            noteHeadGlyph.y = sr.getScoreY(line, 0);
            this.noteHeads.addNoteGlyph(noteHeadGlyph, n, line);
            if (n.harmonicType !== HarmonicType.None && n.harmonicType !== HarmonicType.Natural) {
                // create harmonic note head.
                let harmonicFret = n.displayValue + n.harmonicPitch;
                noteHeadGlyph = new DiamondNoteHeadGlyph(0, 0, n.beat.duration, this.container.beat.graceType !== GraceType.None);
                line = sr.accidentalHelper.getNoteLineForValue(harmonicFret, false);
                noteHeadGlyph.y = sr.getScoreY(line, 0);
                this.noteHeads.addNoteGlyph(noteHeadGlyph, n, line);
            }
            if (n.isStaccato && !this.noteHeads.beatEffects.has('Staccato')) {
                this.noteHeads.beatEffects.set('Staccato', new CircleGlyph(0, 0, 1.5));
            }
            if (n.accentuated === AccentuationType.Normal && !this.noteHeads.beatEffects.has('Accent')) {
                this.noteHeads.beatEffects.set('Accent', new AccentuationGlyph(0, 0, AccentuationType.Normal));
            }
            if (n.accentuated === AccentuationType.Heavy && !this.noteHeads.beatEffects.has('HAccent')) {
                this.noteHeads.beatEffects.set('HAccent', new AccentuationGlyph(0, 0, AccentuationType.Heavy));
            }
        }
    }
    ScoreBeatGlyph.NormalKeys = new Map([
        [32, true],
        [34, true],
        [35, true],
        [36, true],
        [38, true],
        [39, true],
        [40, true],
        [41, true],
        [43, true],
        [45, true],
        [47, true],
        [48, true],
        [50, true],
        [55, true],
        [56, true],
        [58, true],
        [60, true],
        [61, true]
    ]);
    ScoreBeatGlyph.XKeys = new Map([
        [31, true],
        [33, true],
        [37, true],
        [42, true],
        [44, true],
        [54, true],
        [62, true],
        [63, true],
        [64, true],
        [65, true],
        [66, true]
    ]);

    class ScoreBrushGlyph extends Glyph {
        constructor(beat) {
            super(0, 0);
            this._beat = beat;
        }
        doLayout() {
            this.width = 10 * this.scale;
        }
        paint(cx, cy, canvas) {
            // TODO: Create webfont version
            let scoreBarRenderer = this.renderer;
            let lineSize = scoreBarRenderer.lineOffset;
            let startY = cy + this.y + (scoreBarRenderer.getNoteY(this._beat.maxNote, false) - lineSize);
            let endY = cy + this.y + scoreBarRenderer.getNoteY(this._beat.minNote, false) + lineSize;
            let arrowX = cx + this.x + this.width / 2;
            let arrowSize = 8 * this.scale;
            if (this._beat.brushType !== BrushType.None) {
                if (this._beat.brushType === BrushType.ArpeggioUp) {
                    let lineStartY = startY - arrowSize;
                    let lineEndY = endY - arrowSize;
                    canvas.beginRotate(cx + this.x + 2 * this.scale, lineEndY, -90);
                    let glyph = new NoteVibratoGlyph(0, 0, VibratoType.Slight, 1.2);
                    glyph.renderer = this.renderer;
                    glyph.doLayout();
                    glyph.width = Math.abs(lineEndY - lineStartY);
                    glyph.paint(0, 0, canvas);
                    canvas.endRotate();
                    canvas.beginPath();
                    canvas.moveTo(arrowX, endY);
                    canvas.lineTo(arrowX + arrowSize / 2, endY - arrowSize);
                    canvas.lineTo(arrowX - arrowSize / 2, endY - arrowSize);
                    canvas.closePath();
                    canvas.fill();
                }
                else if (this._beat.brushType === BrushType.ArpeggioDown) {
                    let lineStartY = startY + arrowSize;
                    let lineEndY = endY + arrowSize;
                    canvas.beginRotate(cx + this.x + 7 * this.scale, lineStartY, 90);
                    let glyph = new NoteVibratoGlyph(0, 0, VibratoType.Slight, 1.2);
                    glyph.renderer = this.renderer;
                    glyph.doLayout();
                    glyph.width = Math.abs(lineEndY - lineStartY);
                    glyph.paint(0, 0, canvas);
                    canvas.endRotate();
                    canvas.beginPath();
                    canvas.moveTo(arrowX, startY);
                    canvas.lineTo(arrowX + arrowSize / 2, startY + arrowSize);
                    canvas.lineTo(arrowX - arrowSize / 2, startY + arrowSize);
                    canvas.closePath();
                    canvas.fill();
                }
            }
        }
    }

    class ScoreBeatPreNotesGlyph extends BeatGlyphBase {
        constructor() {
            super();
            this._prebends = null;
            this.accidentals = null;
        }
        get prebendNoteHeadOffset() {
            return this._prebends ? this._prebends.x + this._prebends.noteHeadOffset : 0;
        }
        doLayout() {
            if (!this.container.beat.isRest) {
                let accidentals = new AccidentalGroupGlyph();
                let ghost = new GhostNoteContainerGlyph(true);
                ghost.renderer = this.renderer;
                this._prebends = new BendNoteHeadGroupGlyph(this.container.beat, true);
                this._prebends.renderer = this.renderer;
                for (let note of this.container.beat.notes) {
                    if (note.isVisible) {
                        if (note.hasBend) {
                            switch (note.bendType) {
                                case BendType.PrebendBend:
                                case BendType.Prebend:
                                case BendType.PrebendRelease:
                                    this._prebends.addGlyph(note.displayValue - ((note.bendPoints[0].value / 2) | 0), false);
                                    break;
                            }
                        }
                        else if (note.beat.hasWhammyBar) {
                            switch (note.beat.whammyBarType) {
                                case WhammyType.PrediveDive:
                                case WhammyType.Predive:
                                    this._prebends.addGlyph(note.displayValue - ((note.beat.whammyBarPoints[0].value / 2) | 0), false);
                                    break;
                            }
                        }
                        this.createAccidentalGlyph(note, accidentals);
                        ghost.addParenthesis(note);
                    }
                }
                if (!this._prebends.isEmpty) {
                    this.addGlyph(this._prebends);
                    this.addGlyph(new SpacingGlyph(0, 0, 4 * (this.container.beat.graceType !== GraceType.None ? NoteHeadGlyph.GraceScale : 1) * this.scale));
                }
                if (this.container.beat.brushType !== BrushType.None) {
                    this.addGlyph(new ScoreBrushGlyph(this.container.beat));
                    this.addGlyph(new SpacingGlyph(0, 0, 4 * this.scale));
                }
                if (!ghost.isEmpty) {
                    this.addGlyph(ghost);
                    this.addGlyph(new SpacingGlyph(0, 0, 4 * (this.container.beat.graceType !== GraceType.None ? NoteHeadGlyph.GraceScale : 1) * this.scale));
                }
                if (!accidentals.isEmpty) {
                    this.accidentals = accidentals;
                    this.addGlyph(accidentals);
                    this.addGlyph(new SpacingGlyph(0, 0, 4 * (this.container.beat.graceType !== GraceType.None ? NoteHeadGlyph.GraceScale : 1) * this.scale));
                }
            }
            super.doLayout();
        }
        createAccidentalGlyph(n, accidentals) {
            let sr = this.renderer;
            let accidental = sr.accidentalHelper.applyAccidental(n);
            let noteLine = sr.getNoteLine(n);
            let isGrace = this.container.beat.graceType !== GraceType.None;
            if (accidental !== AccidentalType.None) {
                accidentals.addGlyph(new AccidentalGlyph(0, sr.getScoreY(noteLine, 0), accidental, isGrace));
            }
            if (n.harmonicType !== HarmonicType.None && n.harmonicType !== HarmonicType.Natural) {
                let harmonicFret = n.displayValue + n.harmonicPitch;
                accidental = sr.accidentalHelper.applyAccidentalForValue(n.beat, harmonicFret, isGrace);
                noteLine = sr.accidentalHelper.getNoteLineForValue(harmonicFret, false);
                accidentals.addGlyph(new AccidentalGlyph(0, sr.getScoreY(noteLine, 0), accidental, isGrace));
            }
        }
    }

    class DigitGlyph extends MusicFontGlyph {
        constructor(x, y, digit, scale) {
            super(x, y, scale, DigitGlyph.getSymbol(digit));
            this._digit = 0;
            this._scale = 0;
            this._digit = digit;
            this._scale = scale;
        }
        doLayout() {
            this.y += 7 * this.scale;
            this.width = this.getDigitWidth(this._digit) * this.scale * this._scale;
        }
        getDigitWidth(digit) {
            switch (digit) {
                case 0:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    return 14;
                case 1:
                    return 10;
                default:
                    return 0;
            }
        }
        static getSymbol(digit) {
            switch (digit) {
                case 0:
                    return MusicFontSymbol.Num0;
                case 1:
                    return MusicFontSymbol.Num1;
                case 2:
                    return MusicFontSymbol.Num2;
                case 3:
                    return MusicFontSymbol.Num3;
                case 4:
                    return MusicFontSymbol.Num4;
                case 5:
                    return MusicFontSymbol.Num5;
                case 6:
                    return MusicFontSymbol.Num6;
                case 7:
                    return MusicFontSymbol.Num7;
                case 8:
                    return MusicFontSymbol.Num8;
                case 9:
                    return MusicFontSymbol.Num9;
                default:
                    return MusicFontSymbol.None;
            }
        }
    }

    class NumberGlyph extends GlyphGroup {
        constructor(x, y, num, scale = 1.0) {
            super(x, y);
            this._number = 0;
            this._scale = 0;
            this._number = num;
            this._scale = scale;
        }
        doLayout() {
            let i = this._number;
            while (i > 0) {
                let num = i % 10;
                let gl = new DigitGlyph(0, 0, num, this._scale);
                this.addGlyph(gl);
                i = (i / 10) | 0;
            }
            if (this.glyphs) {
                this.glyphs.reverse();
                let cx = 0;
                for (let j = 0, k = this.glyphs.length; j < k; j++) {
                    let g = this.glyphs[j];
                    g.x = cx;
                    g.y = 0;
                    g.renderer = this.renderer;
                    g.doLayout();
                    cx += g.width;
                }
                this.width = cx;
            }
        }
    }

    class TimeSignatureGlyph extends GlyphGroup {
        constructor(x, y, numerator, denominator, isCommon) {
            super(x, y);
            this._numerator = 0;
            this._denominator = 0;
            this._numerator = numerator;
            this._denominator = denominator;
            this._isCommon = isCommon;
        }
        doLayout() {
            if (this._isCommon && this._numerator === 2 && this._denominator === 2) {
                let common = new MusicFontGlyph(0, this.commonY, this.commonScale, MusicFontSymbol.TimeSignatureCutCommon);
                common.width = 14 * this.scale;
                this.addGlyph(common);
                super.doLayout();
            }
            else if (this._isCommon && this._numerator === 4 && this._denominator === 4) {
                let common = new MusicFontGlyph(0, this.commonY, this.commonScale, MusicFontSymbol.TimeSignatureCommon);
                common.width = 14 * this.scale;
                this.addGlyph(common);
                super.doLayout();
            }
            else {
                let numerator = new NumberGlyph(0, this.numeratorY, this._numerator, this.numberScale);
                let denominator = new NumberGlyph(0, this.denominatorY, this._denominator, this.numberScale);
                this.addGlyph(numerator);
                this.addGlyph(denominator);
                super.doLayout();
                for (let i = 0, j = this.glyphs.length; i < j; i++) {
                    let g = this.glyphs[i];
                    g.x = (this.width - g.width) / 2;
                }
            }
        }
    }

    class ScoreTimeSignatureGlyph extends TimeSignatureGlyph {
        get commonY() {
            let renderer = this.renderer;
            return renderer.getScoreY(4, 0);
        }
        get numeratorY() {
            return 2 * this.scale;
        }
        get denominatorY() {
            return 20 * this.scale;
        }
        get commonScale() {
            return 1;
        }
        get numberScale() {
            return 1;
        }
        constructor(x, y, numerator, denominator, isCommon) {
            super(x, y, numerator, denominator, isCommon);
        }
    }

    class ScoreBendGlyph extends ScoreHelperNotesBaseGlyph {
        constructor(beat) {
            super();
            this._notes = [];
            this._endNoteGlyph = null;
            this._middleNoteGlyph = null;
            this._beat = beat;
        }
        addBends(note) {
            this._notes.push(note);
            if (note.isTieOrigin) {
                return;
            }
            switch (note.bendType) {
                case BendType.Bend:
                case BendType.PrebendRelease:
                case BendType.PrebendBend:
                    {
                        let endGlyphs = this._endNoteGlyph;
                        if (!endGlyphs) {
                            endGlyphs = this._endNoteGlyph = new BendNoteHeadGroupGlyph(note.beat, false);
                            endGlyphs.renderer = this.renderer;
                            this.BendNoteHeads.push(endGlyphs);
                        }
                        let lastBendPoint = note.bendPoints[note.bendPoints.length - 1];
                        endGlyphs.addGlyph(this.getBendNoteValue(note, lastBendPoint), lastBendPoint.value % 2 !== 0);
                    }
                    break;
                case BendType.Release:
                    {
                        if (!note.isTieOrigin) {
                            let endGlyphs = this._endNoteGlyph;
                            if (!endGlyphs) {
                                endGlyphs = this._endNoteGlyph = new BendNoteHeadGroupGlyph(note.beat, false);
                                endGlyphs.renderer = this.renderer;
                                this.BendNoteHeads.push(endGlyphs);
                            }
                            let lastBendPoint = note.bendPoints[note.bendPoints.length - 1];
                            endGlyphs.addGlyph(this.getBendNoteValue(note, lastBendPoint), lastBendPoint.value % 2 !== 0);
                        }
                    }
                    break;
                case BendType.BendRelease:
                    {
                        let middleGlyphs = this._middleNoteGlyph;
                        if (!middleGlyphs) {
                            middleGlyphs = this._middleNoteGlyph = new BendNoteHeadGroupGlyph(note.beat, false);
                            middleGlyphs.renderer = this.renderer;
                            this.BendNoteHeads.push(middleGlyphs);
                        }
                        let middleBendPoint = note.bendPoints[1];
                        middleGlyphs.addGlyph(this.getBendNoteValue(note, note.bendPoints[1]), middleBendPoint.value % 2 !== 0);
                        let endGlyphs = this._endNoteGlyph;
                        if (!endGlyphs) {
                            endGlyphs = this._endNoteGlyph = new BendNoteHeadGroupGlyph(note.beat, false);
                            endGlyphs.renderer = this.renderer;
                            this.BendNoteHeads.push(endGlyphs);
                        }
                        let lastBendPoint = note.bendPoints[note.bendPoints.length - 1];
                        endGlyphs.addGlyph(this.getBendNoteValue(note, lastBendPoint), lastBendPoint.value % 2 !== 0);
                    }
                    break;
            }
        }
        paint(cx, cy, canvas) {
            // Draw note heads
            let startNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, this._beat.voice.bar);
            let startX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._beat, BeatXPosition.MiddleNotes);
            let endBeatX = cx + startNoteRenderer.x;
            if (this._beat.isLastOfVoice) {
                endBeatX += startNoteRenderer.postBeatGlyphsStart;
            }
            else {
                endBeatX += startNoteRenderer.getBeatX(this._beat.nextBeat, BeatXPosition.PreNotes);
            }
            endBeatX -= 8 * this.scale;
            let middleX = (startX + endBeatX) / 2;
            if (this._middleNoteGlyph) {
                this._middleNoteGlyph.x = middleX - this._middleNoteGlyph.noteHeadOffset;
                this._middleNoteGlyph.y = cy + startNoteRenderer.y;
                this._middleNoteGlyph.paint(0, 0, canvas);
            }
            if (this._endNoteGlyph) {
                this._endNoteGlyph.x = endBeatX - this._endNoteGlyph.noteHeadOffset;
                this._endNoteGlyph.y = cy + startNoteRenderer.y;
                this._endNoteGlyph.paint(0, 0, canvas);
            }
            this._notes.sort((a, b) => {
                return b.displayValue - a.displayValue;
            });
            let directionBeat = this._beat.graceType === GraceType.BendGrace ? this._beat.nextBeat : this._beat;
            let direction = this._notes.length === 1 ? this.getBeamDirection(directionBeat, startNoteRenderer) : BeamDirection.Up;
            // draw slurs
            for (let i = 0; i < this._notes.length; i++) {
                let note = this._notes[i];
                if (i > 0 && i >= ((this._notes.length / 2) | 0)) {
                    direction = BeamDirection.Down;
                }
                let startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(note, true);
                let heightOffset = NoteHeadGlyph.NoteHeadHeight * this.scale * NoteHeadGlyph.GraceScale * 0.5;
                if (direction === BeamDirection.Down) {
                    startY += NoteHeadGlyph.NoteHeadHeight * this.scale;
                }
                let slurText = note.bendStyle === BendStyle.Gradual ? 'grad.' : '';
                if (note.isTieOrigin) {
                    let endNote = note.tieDestination;
                    let endNoteRenderer = !endNote
                        ? null
                        : this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, endNote.beat.voice.bar);
                    // if we have a line break we draw only a line until the end
                    if (!endNoteRenderer || endNoteRenderer.staff !== startNoteRenderer.staff) {
                        let endX = cx + startNoteRenderer.x + startNoteRenderer.width;
                        let noteValueToDraw = note.tieDestination.realValue;
                        startNoteRenderer.accidentalHelper.applyAccidentalForValue(note.beat, noteValueToDraw, false);
                        let endY = cy +
                            startNoteRenderer.y +
                            startNoteRenderer.getScoreY(startNoteRenderer.accidentalHelper.getNoteLineForValue(noteValueToDraw, false), 0);
                        if (note.bendType === BendType.Hold || note.bendType === BendType.Prebend) {
                            TieGlyph.paintTie(canvas, this.scale, startX, startY, endX, endY, direction === BeamDirection.Down, 22, 4);
                            canvas.fill();
                        }
                        else {
                            this.drawBendSlur(canvas, startX, startY, endX, endY, direction === BeamDirection.Down, this.scale, slurText);
                        }
                    }
                    else {
                        let endX = cx + endNoteRenderer.x + endNoteRenderer.getBeatX(endNote.beat, BeatXPosition.MiddleNotes);
                        let endY = cy + endNoteRenderer.y + endNoteRenderer.getNoteY(endNote, true);
                        if (direction === BeamDirection.Down) {
                            endY += NoteHeadGlyph.NoteHeadHeight * this.scale;
                        }
                        if (note.bendType === BendType.Hold || note.bendType === BendType.Prebend) {
                            TieGlyph.paintTie(canvas, this.scale, startX, startY, endX, endY, direction === BeamDirection.Down, 22, 4);
                            canvas.fill();
                        }
                        else {
                            this.drawBendSlur(canvas, startX, startY, endX, endY, direction === BeamDirection.Down, this.scale, slurText);
                        }
                    }
                    switch (note.bendType) {
                        case BendType.Prebend:
                        case BendType.PrebendBend:
                        case BendType.PrebendRelease:
                            let preX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(note.beat, BeatXPosition.PreNotes);
                            preX += startNoteRenderer.getBeatContainer(note.beat).preNotes
                                .prebendNoteHeadOffset;
                            let preY = cy +
                                startNoteRenderer.y +
                                startNoteRenderer.getScoreY(startNoteRenderer.accidentalHelper.getNoteLineForValue(note.displayValue - ((note.bendPoints[0].value / 2) | 0), false), 0) +
                                heightOffset;
                            this.drawBendSlur(canvas, preX, preY, startX, startY, direction === BeamDirection.Down, this.scale);
                            break;
                    }
                }
                else {
                    if (direction === BeamDirection.Up) {
                        heightOffset = -heightOffset;
                    }
                    let endValue = 0;
                    let endY = 0;
                    switch (note.bendType) {
                        case BendType.Bend:
                            endValue = this.getBendNoteValue(note, note.bendPoints[note.bendPoints.length - 1]);
                            endY = this._endNoteGlyph.getNoteValueY(endValue, false) + heightOffset;
                            this.drawBendSlur(canvas, startX, startY, endBeatX, endY, direction === BeamDirection.Down, this.scale, slurText);
                            break;
                        case BendType.BendRelease:
                            let middleValue = this.getBendNoteValue(note, note.bendPoints[1]);
                            let middleY = this._middleNoteGlyph.getNoteValueY(middleValue, false) + heightOffset;
                            this.drawBendSlur(canvas, startX, startY, middleX, middleY, direction === BeamDirection.Down, this.scale, slurText);
                            endValue = this.getBendNoteValue(note, note.bendPoints[note.bendPoints.length - 1]);
                            endY = this._endNoteGlyph.getNoteValueY(endValue, false) + heightOffset;
                            this.drawBendSlur(canvas, middleX, middleY, endBeatX, endY, direction === BeamDirection.Down, this.scale, slurText);
                            break;
                        case BendType.Release:
                            if (this.BendNoteHeads.length > 0) {
                                endValue = this.getBendNoteValue(note, note.bendPoints[note.bendPoints.length - 1]);
                                endY = this.BendNoteHeads[0].getNoteValueY(endValue, false) + heightOffset;
                                this.drawBendSlur(canvas, startX, startY, endBeatX, endY, direction === BeamDirection.Down, this.scale, slurText);
                            }
                            break;
                        case BendType.Prebend:
                        case BendType.PrebendBend:
                        case BendType.PrebendRelease:
                            let preX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(note.beat, BeatXPosition.PreNotes);
                            preX += startNoteRenderer.getBeatContainer(note.beat).preNotes
                                .prebendNoteHeadOffset;
                            let preY = cy +
                                startNoteRenderer.y +
                                startNoteRenderer.getScoreY(startNoteRenderer.accidentalHelper.getNoteLineForValue(note.displayValue - ((note.bendPoints[0].value / 2) | 0), false), 0) +
                                heightOffset;
                            this.drawBendSlur(canvas, preX, preY, startX, startY, direction === BeamDirection.Down, this.scale);
                            if (this.BendNoteHeads.length > 0) {
                                endValue = this.getBendNoteValue(note, note.bendPoints[note.bendPoints.length - 1]);
                                endY = this.BendNoteHeads[0].getNoteValueY(endValue, false) + heightOffset;
                                this.drawBendSlur(canvas, startX, startY, endBeatX, endY, direction === BeamDirection.Down, this.scale, slurText);
                            }
                            break;
                    }
                }
            }
        }
        getBendNoteValue(note, bendPoint) {
            // NOTE: bendpoints are in 1/4 tones, but the note values are in 1/2 notes.
            return note.displayValueWithoutBend + ((bendPoint.value / 2) | 0);
        }
    }

    class ScoreLegatoGlyph extends TieGlyph {
        constructor(startBeat, endBeat, forEnd = false) {
            super(startBeat, endBeat, forEnd);
        }
        doLayout() {
            super.doLayout();
            this.yOffset = NoteHeadGlyph.NoteHeadHeight / 2;
        }
        getBeamDirection(beat, noteRenderer) {
            if (beat.isRest) {
                return BeamDirection.Up;
            }
            // invert direction (if stems go up, ties go down to not cross them)
            switch (noteRenderer.getBeatDirection(beat)) {
                case BeamDirection.Up:
                    return BeamDirection.Down;
                default:
                    return BeamDirection.Up;
            }
        }
        getStartY(noteRenderer, direction) {
            if (this.startBeat.isRest) {
                // below all lines
                return noteRenderer.getScoreY(9, 0);
            }
            switch (direction) {
                case BeamDirection.Up:
                    // below lowest note
                    return noteRenderer.getNoteY(this.startBeat.minNote, false);
                default:
                    return noteRenderer.getNoteY(this.startBeat.maxNote, false);
            }
        }
        getEndY(noteRenderer, direction) {
            if (this.endBeat.isRest) {
                switch (direction) {
                    case BeamDirection.Up:
                        return noteRenderer.getScoreY(9, 0);
                    default:
                        return noteRenderer.getScoreY(0, 0);
                }
            }
            switch (direction) {
                case BeamDirection.Up:
                    // below lowest note
                    return noteRenderer.getNoteY(this.endBeat.minNote, false);
                default:
                    return noteRenderer.getNoteY(this.endBeat.maxNote, false);
            }
        }
        getStartX(noteRenderer) {
            if (this.startBeat.isRest) {
                return noteRenderer.getBeatX(this.startBeat, BeatXPosition.PreNotes);
            }
            return noteRenderer.getNoteX(this.startBeat.minNote, true);
        }
        getEndX(noteRenderer) {
            if (this.endBeat.isRest) {
                return noteRenderer.getBeatX(this.endBeat, BeatXPosition.PreNotes);
            }
            return noteRenderer.getNoteX(this.endBeat.minNote, false);
        }
    }

    class ScoreSlideLineGlyph extends Glyph {
        constructor(inType, outType, startNote, parent) {
            super(0, 0);
            this._outType = outType;
            this._inType = inType;
            this._startNote = startNote;
            this._parent = parent;
        }
        doLayout() {
            this.width = 0;
        }
        paint(cx, cy, canvas) {
            this.paintSlideIn(cx, cy, canvas);
            this.drawSlideOut(cx, cy, canvas);
        }
        paintSlideIn(cx, cy, canvas) {
            let startNoteRenderer = this.renderer;
            let sizeX = 12 * this.scale;
            let offsetX = 1 * this.scale;
            let startX = 0;
            let startY = 0;
            let endX = 0;
            let endY = 0;
            switch (this._inType) {
                case SlideInType.IntoFromBelow:
                    endX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, false) - offsetX;
                    endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, true) + NoteHeadGlyph.NoteHeadHeight / 2;
                    startX = endX - sizeX;
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, true) + NoteHeadGlyph.NoteHeadHeight;
                    break;
                case SlideInType.IntoFromAbove:
                    endX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, false) - offsetX;
                    endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, true) + NoteHeadGlyph.NoteHeadHeight / 2;
                    startX = endX - sizeX;
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, true);
                    break;
                default:
                    return;
            }
            let accidentalsWidth = this.getAccidentalsWidth(startNoteRenderer, this._startNote.beat);
            startX -= accidentalsWidth;
            endX -= accidentalsWidth;
            this.paintSlideLine(canvas, false, startX, endX, startY, endY);
        }
        getAccidentalsWidth(renderer, beat) {
            let preNotes = renderer.getPreNotesGlyphForBeat(beat);
            if (preNotes && preNotes.accidentals) {
                return preNotes.accidentals.width;
            }
            return 0;
        }
        drawSlideOut(cx, cy, canvas) {
            let startNoteRenderer = this.renderer;
            let sizeX = 12 * this.scale;
            let offsetX = 1 * this.scale;
            let startX = 0;
            let startY = 0;
            let endX = 0;
            let endY = 0;
            let waves = false;
            switch (this._outType) {
                case SlideOutType.Shift:
                case SlideOutType.Legato:
                    startX =
                        cx +
                            startNoteRenderer.x +
                            startNoteRenderer.getBeatX(this._startNote.beat, BeatXPosition.PostNotes) +
                            offsetX;
                    let isUp = this._startNote.slideTarget.realValue > this._startNote.realValue;
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, false);
                    let lineOffset = 0.25 * NoteHeadGlyph.NoteHeadHeight * this.scale;
                    if (isUp) {
                        startY += lineOffset;
                    }
                    else {
                        startY -= lineOffset;
                    }
                    if (this._startNote.slideTarget) {
                        let endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, this._startNote.slideTarget.beat.voice.bar);
                        if (!endNoteRenderer || endNoteRenderer.staff !== startNoteRenderer.staff) {
                            endX = cx + startNoteRenderer.x + this._parent.x;
                            endY = startY;
                        }
                        else {
                            endX =
                                cx +
                                    endNoteRenderer.x +
                                    endNoteRenderer.getBeatX(this._startNote.slideTarget.beat, BeatXPosition.PreNotes) -
                                    offsetX;
                            endY = cy + endNoteRenderer.y + endNoteRenderer.getNoteY(this._startNote.slideTarget, false);
                            if (isUp) {
                                endY -= lineOffset;
                            }
                            else {
                                endY += lineOffset;
                            }
                        }
                    }
                    else {
                        endX = cx + startNoteRenderer.x + this._parent.x;
                        endY = startY;
                    }
                    break;
                case SlideOutType.OutUp:
                    startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, true) + offsetX * 2;
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, true) + NoteHeadGlyph.NoteHeadHeight / 2;
                    endX = startX + sizeX;
                    endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, true);
                    break;
                case SlideOutType.OutDown:
                    startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, true) + offsetX * 2;
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, true) + NoteHeadGlyph.NoteHeadHeight / 2;
                    endX = startX + sizeX;
                    endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, true) + NoteHeadGlyph.NoteHeadHeight;
                    break;
                case SlideOutType.PickSlideUp:
                    startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, true) + offsetX * 2;
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, true) + NoteHeadGlyph.NoteHeadHeight / 2;
                    endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, true) - NoteHeadGlyph.NoteHeadHeight;
                    endX = cx + startNoteRenderer.x + startNoteRenderer.width;
                    if (this._startNote.beat.nextBeat &&
                        this._startNote.beat.nextBeat.voice === this._startNote.beat.voice) {
                        endX =
                            cx +
                                startNoteRenderer.x +
                                startNoteRenderer.getBeatX(this._startNote.beat.nextBeat, BeatXPosition.PreNotes);
                    }
                    waves = true;
                    break;
                case SlideOutType.PickSlideDown:
                    startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, true) + offsetX * 2;
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, true) - NoteHeadGlyph.NoteHeadHeight / 2;
                    endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, true) + NoteHeadGlyph.NoteHeadHeight;
                    endX = cx + startNoteRenderer.x + startNoteRenderer.width;
                    if (this._startNote.beat.nextBeat &&
                        this._startNote.beat.nextBeat.voice === this._startNote.beat.voice) {
                        endX =
                            cx +
                                startNoteRenderer.x +
                                startNoteRenderer.getBeatX(this._startNote.beat.nextBeat, BeatXPosition.PreNotes);
                    }
                    waves = true;
                    break;
                default:
                    return;
            }
            this.paintSlideLine(canvas, waves, startX, endX, startY, endY);
        }
        paintSlideLine(canvas, waves, startX, endX, startY, endY) {
            if (waves) {
                let b = endX - startX;
                let a = endY - startY;
                let c = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
                let angle = (Math.asin(a / c) * (180 / Math.PI));
                canvas.beginRotate(startX, startY, angle);
                let glyph = new NoteVibratoGlyph(0, 0, VibratoType.Slight, 1.2);
                glyph.renderer = this.renderer;
                glyph.doLayout();
                glyph.width = b;
                glyph.paint(0, 0, canvas);
                canvas.endRotate();
            }
            else {
                canvas.beginPath();
                canvas.moveTo(startX, startY);
                canvas.lineTo(endX, endY);
                canvas.stroke();
            }
        }
    }

    class ScoreTieGlyph extends TieGlyph {
        constructor(startNote, endNote, forEnd = false) {
            super(!startNote ? null : startNote.beat, !endNote ? null : endNote.beat, forEnd);
            this.startNote = startNote;
            this.endNote = endNote;
        }
        doLayout() {
            super.doLayout();
            this.yOffset = NoteHeadGlyph.NoteHeadHeight / 2;
        }
        getBeamDirection(beat, noteRenderer) {
            // invert direction (if stems go up, ties go down to not cross them)
            switch (noteRenderer.getBeatDirection(beat)) {
                case BeamDirection.Up:
                    return BeamDirection.Down;
                default:
                    return BeamDirection.Up;
            }
        }
        getStartY(noteRenderer, direction) {
            return noteRenderer.getNoteY(this.startNote, false);
        }
        getEndY(noteRenderer, direction) {
            return noteRenderer.getNoteY(this.endNote, false);
        }
        getStartX(noteRenderer) {
            return noteRenderer.getBeatX(this.startNote.beat, BeatXPosition.MiddleNotes);
        }
        getEndX(noteRenderer) {
            return noteRenderer.getNoteX(this.endNote, false);
        }
    }

    class ScoreSlurGlyph extends ScoreTieGlyph {
        constructor(startNote, endNote, forEnd = false) {
            super(startNote, endNote, forEnd);
        }
        getTieHeight(startX, startY, endX, endY) {
            return Math.log(endX - startX + 1) * this.renderer.settings.notation.slurHeight;
        }
    }

    class ScoreBeatContainerGlyph extends BeatContainerGlyph {
        constructor(beat, voiceContainer) {
            super(beat, voiceContainer);
            this._bend = null;
            this._effectSlur = null;
            this._effectEndSlur = null;
        }
        doLayout() {
            this._effectSlur = null;
            this._effectEndSlur = null;
            super.doLayout();
            if (this.beat.isLegatoOrigin) {
                // only create slur for very first origin of "group"
                if (!this.beat.previousBeat || !this.beat.previousBeat.isLegatoOrigin) {
                    // tie with end beat
                    let destination = this.beat.nextBeat;
                    while (destination.nextBeat && destination.nextBeat.isLegatoDestination) {
                        destination = destination.nextBeat;
                    }
                    this.ties.push(new ScoreLegatoGlyph(this.beat, destination, false));
                }
            }
            else if (this.beat.isLegatoDestination) {
                // only create slur for last destination of "group"
                if (!this.beat.isLegatoOrigin) {
                    let origin = this.beat.previousBeat;
                    while (origin.previousBeat && origin.previousBeat.isLegatoOrigin) {
                        origin = origin.previousBeat;
                    }
                    this.ties.push(new ScoreLegatoGlyph(origin, this.beat, true));
                }
            }
            if (this._bend) {
                this._bend.renderer = this.renderer;
                this._bend.doLayout();
                this.updateWidth();
            }
        }
        createTies(n) {
            // create a tie if any effect requires it
            if (!n.isVisible) {
                return;
            }
            // NOTE: we create 2 tie glyphs if we have a line break inbetween
            // the two notes
            if (n.isTieOrigin &&
                !n.hasBend &&
                !n.beat.hasWhammyBar &&
                n.beat.graceType !== GraceType.BendGrace &&
                n.tieDestination &&
                n.tieDestination.isVisible) {
                let tie = new ScoreTieGlyph(n, n.tieDestination, false);
                this.ties.push(tie);
            }
            if (n.isTieDestination && !n.tieOrigin.hasBend && !n.beat.hasWhammyBar) {
                let tie = new ScoreTieGlyph(n.tieOrigin, n, true);
                this.ties.push(tie);
            }
            // TODO: depending on the type we have other positioning
            // we should place glyphs in the preNotesGlyph or postNotesGlyph if needed
            if (n.slideInType !== SlideInType.None || n.slideOutType !== SlideOutType.None) {
                let l = new ScoreSlideLineGlyph(n.slideInType, n.slideOutType, n, this);
                this.ties.push(l);
            }
            if (n.isSlurOrigin && n.slurDestination && n.slurDestination.isVisible) {
                let tie = new ScoreSlurGlyph(n, n.slurDestination, false);
                this.ties.push(tie);
            }
            if (n.isSlurDestination) {
                let tie = new ScoreSlurGlyph(n.slurOrigin, n, true);
                this.ties.push(tie);
            }
            // start effect slur on first beat
            if (!this._effectSlur && n.beat.isEffectSlurOrigin && n.beat.effectSlurDestination) {
                let direction = this.onNotes.beamingHelper.direction;
                let startNote = direction === BeamDirection.Up ? n.beat.minNote : n.beat.maxNote;
                let endNote = direction === BeamDirection.Up
                    ? n.beat.effectSlurDestination.minNote
                    : n.beat.effectSlurDestination.maxNote;
                this._effectSlur = new ScoreSlurGlyph(startNote, endNote, false);
                this.ties.push(this._effectSlur);
            }
            // end effect slur on last beat
            if (!this._effectEndSlur && n.beat.isEffectSlurDestination && n.beat.effectSlurOrigin) {
                let direction = this.onNotes.beamingHelper.direction;
                let startNote = direction === BeamDirection.Up ? n.beat.effectSlurOrigin.minNote : n.beat.effectSlurOrigin.maxNote;
                let endNote = direction === BeamDirection.Up ? n.beat.minNote : n.beat.maxNote;
                this._effectEndSlur = new ScoreSlurGlyph(startNote, endNote, true);
                this.ties.push(this._effectEndSlur);
            }
            if (n.hasBend) {
                if (!this._bend) {
                    this._bend = new ScoreBendGlyph(n.beat);
                    this._bend.renderer = this.renderer;
                    this.ties.push(this._bend);
                }
                this._bend.addBends(n);
            }
        }
    }

    /**
     * This small utilty public class allows the assignment of accidentals within a
     * desired scope.
     */
    class AccidentalHelper {
        constructor(bar) {
            this._registeredAccidentals = new Map();
            this._appliedScoreLines = new Map();
            this._appliedScoreLinesByValue = new Map();
            this._notesByValue = new Map();
            this.maxNoteValueBeat = null;
            this.minNoteValueBeat = null;
            this.maxNoteValue = -1;
            this.minNoteValue = -1;
            this._bar = bar;
        }
        /**
         * Calculates the accidental for the given note and assignes the value to it.
         * The new accidental type is also registered within the current scope
         * @param note
         * @returns
         */
        applyAccidental(note) {
            let staff = this._bar.staff;
            let noteValue = staff.isPercussion
                ? PercussionMapper.mapNoteForDisplay(note.displayValue)
                : note.displayValue;
            let quarterBend = note.hasQuarterToneOffset;
            let line = this.registerNoteLine(note, noteValue);
            if (this.minNoteValue === -1 || noteValue < this.minNoteValue) {
                this.minNoteValue = noteValue;
                this.minNoteValueBeat = note.beat;
            }
            if (this.maxNoteValue === -1 || noteValue > this.maxNoteValue) {
                this.maxNoteValue = noteValue;
                this.maxNoteValueBeat = note.beat;
            }
            return this.getAccidental(line, noteValue, quarterBend);
        }
        /**
         * Calculates the accidental for the given note value and assignes the value to it.
         * The new accidental type is also registered within the current scope
         * @param relatedBeat
         * @param noteValue
         * @param quarterBend
         * @returns
         */
        applyAccidentalForValue(relatedBeat, noteValue, quarterBend) {
            let staff = this._bar.staff;
            if (staff.isPercussion) {
                noteValue = PercussionMapper.mapNoteForDisplay(noteValue);
            }
            let line = this.registerNoteValueLine(noteValue);
            if (this.minNoteValue === -1 || noteValue < this.minNoteValue) {
                this.minNoteValue = noteValue;
                this.minNoteValueBeat = relatedBeat;
            }
            if (this.maxNoteValue === -1 || noteValue > this.maxNoteValue) {
                this.maxNoteValue = noteValue;
                this.maxNoteValueBeat = relatedBeat;
            }
            return this.getAccidental(line, noteValue, quarterBend);
        }
        getAccidental(line, noteValue, quarterBend) {
            let accidentalToSet = AccidentalType.None;
            if (!this._bar.staff.isPercussion) {
                let ks = this._bar.masterBar.keySignature;
                let ksi = ks + 7;
                let index = noteValue % 12;
                // the key signature symbol required according to
                let keySignatureAccidental = ksi < 7 ? AccidentalType.Flat : AccidentalType.Sharp;
                // determine whether the current note requires an accidental according to the key signature
                let hasNoteAccidentalForKeySignature = AccidentalHelper.KeySignatureLookup[ksi][index];
                let isAccidentalNote = AccidentalHelper.AccidentalNotes[index];
                if (quarterBend) {
                    accidentalToSet = isAccidentalNote ? keySignatureAccidental : AccidentalType.Natural;
                }
                else {
                    let isAccidentalRegistered = this._registeredAccidentals.has(line);
                    if (hasNoteAccidentalForKeySignature !== isAccidentalNote && !isAccidentalRegistered) {
                        this._registeredAccidentals.set(line, true);
                        accidentalToSet = isAccidentalNote ? keySignatureAccidental : AccidentalType.Natural;
                    }
                    else if (hasNoteAccidentalForKeySignature === isAccidentalNote && isAccidentalRegistered) {
                        this._registeredAccidentals.delete(line);
                        accidentalToSet = isAccidentalNote ? keySignatureAccidental : AccidentalType.Natural;
                    }
                }
            }
            // TODO: change accidentalToSet according to note.AccidentalMode
            if (quarterBend) {
                switch (accidentalToSet) {
                    case AccidentalType.Natural:
                        return AccidentalType.NaturalQuarterNoteUp;
                    case AccidentalType.Sharp:
                        return AccidentalType.SharpQuarterNoteUp;
                    case AccidentalType.Flat:
                        return AccidentalType.FlatQuarterNoteUp;
                }
            }
            return accidentalToSet;
        }
        registerNoteLine(n, noteValue) {
            let steps = this.calculateNoteLine(noteValue, n.accidentalMode);
            this._appliedScoreLines.set(n.id, steps);
            this._notesByValue.set(noteValue, n);
            return steps;
        }
        registerNoteValueLine(noteValue) {
            let steps = this.calculateNoteLine(noteValue, NoteAccidentalMode.Default);
            this._appliedScoreLinesByValue.set(noteValue, steps);
            return steps;
        }
        calculateNoteLine(noteValue, mode) {
            let value = noteValue;
            let ks = this._bar.masterBar.keySignature;
            let clef = this._bar.clef;
            let index = value % 12;
            let octave = ((value / 12) | 0) - 1;
            // Initial Position
            let steps = AccidentalHelper.OctaveSteps[clef];
            // Move to Octave
            steps -= octave * AccidentalHelper.StepsPerOctave;
            // get the step list for the current keySignature
            let stepList = ModelUtils.keySignatureIsSharp(ks) || ModelUtils.keySignatureIsNatural(ks)
                ? AccidentalHelper.SharpNoteSteps
                : AccidentalHelper.FlatNoteSteps;
            steps -= stepList[index];
            return steps;
        }
        getNoteLine(n) {
            return this._appliedScoreLines.get(n.id);
        }
        getNoteLineForValue(rawValue, searchForNote = false) {
            if (this._appliedScoreLinesByValue.has(rawValue)) {
                return this._appliedScoreLinesByValue.get(rawValue);
            }
            if (searchForNote && this._notesByValue.has(rawValue)) {
                return this.getNoteLine(this._notesByValue.get(rawValue));
            }
            return 0;
        }
    }
    /**
     * a lookup list containing an info whether the notes within an octave
     * need an accidental rendered. the accidental symbol is determined based on the type of key signature.
     */
    AccidentalHelper.KeySignatureLookup = [
        // Flats (where the value is true, a flat accidental is required for the notes)
        [true, true, true, true, true, true, true, true, true, true, true, true],
        [true, true, true, true, true, false, true, true, true, true, true, true],
        [false, true, true, true, true, false, true, true, true, true, true, true],
        [false, true, true, true, true, false, false, false, true, true, true, true],
        [false, false, false, true, true, false, false, false, true, true, true, true],
        [false, false, false, true, true, false, false, false, false, false, true, true],
        [false, false, false, false, false, false, false, false, false, false, true, true],
        // natural
        [false, false, false, false, false, false, false, false, false, false, false, false],
        // sharps  (where the value is true, a flat accidental is required for the notes)
        [false, false, false, false, false, true, true, false, false, false, false, false],
        [true, true, false, false, false, true, true, false, false, false, false, false],
        [true, true, false, false, false, true, true, true, true, false, false, false],
        [true, true, true, true, false, true, true, true, true, false, false, false],
        [true, true, true, true, false, true, true, true, true, true, true, false],
        [true, true, true, true, true, true, true, true, true, true, true, false],
        [true, true, true, true, true, true, true, true, true, true, true, true]
    ];
    /**
     * Contains the list of notes within an octave have accidentals set.
     */
    // prettier-ignore
    AccidentalHelper.AccidentalNotes = [
        false, true, false, true, false, false, true, false, true, false, true, false
    ];
    /**
     * We always have 7 steps per octave.
     * (by a step the offsets inbetween score lines is meant,
     *      0 steps is on the first line (counting from top)
     *      1 steps is on the space inbetween the first and the second line
     */
    AccidentalHelper.StepsPerOctave = 7;
    /**
     * Those are the amount of steps for the different clefs in case of a note value 0
     * [Neutral, C3, C4, F4, G2]
     */
    AccidentalHelper.OctaveSteps = [40, 34, 32, 28, 40];
    /**
     * The step offsets of the notes within an octave in case of for sharp keysignatures
     */
    AccidentalHelper.SharpNoteSteps = [0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6];
    /**
     * The step offsets of the notes within an octave in case of for flat keysignatures
     */
    AccidentalHelper.FlatNoteSteps = [0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6];

    /**
     * This BarRenderer renders a bar using standard music notation.
     */
    class ScoreBarRenderer extends BarRendererBase {
        constructor(renderer, bar) {
            super(renderer, bar);
            this.simpleWhammyOverflow = 0;
            this._startSpacing = false;
            this.accidentalHelper = new AccidentalHelper(bar);
        }
        getBeatDirection(beat) {
            let g = this.getOnNotesGlyphForBeat(beat);
            if (g) {
                return g.noteHeads.direction;
            }
            return BeamDirection.Up;
        }
        getNoteX(note, onEnd = true) {
            let g = this.getOnNotesGlyphForBeat(note.beat);
            if (g) {
                let x = g.container.voiceContainer.x + g.container.x + g.x;
                if (onEnd) {
                    x += g.width;
                }
                return x;
            }
            return 0;
        }
        getNoteY(note, aboveNote = false) {
            let beat = this.getOnNotesGlyphForBeat(note.beat);
            if (beat) {
                return beat.noteHeads.getNoteY(note, aboveNote);
            }
            return 0;
        }
        get lineOffset() {
            return (ScoreBarRenderer.LineSpacing + 1) * this.scale;
        }
        updateSizes() {
            let res = this.resources;
            let glyphOverflow = res.tablatureFont.size / 2 + res.tablatureFont.size * 0.2;
            this.topPadding = glyphOverflow;
            this.bottomPadding = glyphOverflow;
            this.height = this.lineOffset * 4 + this.topPadding + this.bottomPadding;
            super.updateSizes();
        }
        doLayout() {
            super.doLayout();
            if (!this.bar.isEmpty && this.accidentalHelper.maxNoteValueBeat) {
                let top = this.getScoreY(0, 0);
                let bottom = this.getScoreY(8, 0);
                let whammyOffset = this.simpleWhammyOverflow;
                this.registerOverflowTop(whammyOffset);
                let maxNoteY = this.getYPositionForNoteValue(this.accidentalHelper.maxNoteValue);
                let maxNoteHelper = this.helpers.getBeamingHelperForBeat(this.accidentalHelper.maxNoteValueBeat);
                if (maxNoteHelper.direction === BeamDirection.Up) {
                    maxNoteY -= this.getStemSize(maxNoteHelper);
                    maxNoteY -= maxNoteHelper.fingeringCount * this.resources.graceFont.size;
                    if (maxNoteHelper.hasTuplet) {
                        maxNoteY -= this.resources.effectFont.size * 2;
                    }
                }
                if (maxNoteHelper.hasTuplet) {
                    maxNoteY -= this.resources.effectFont.size * 1.5;
                }
                if (maxNoteY < top) {
                    this.registerOverflowTop(Math.abs(maxNoteY) + whammyOffset);
                }
                let minNoteY = this.getYPositionForNoteValue(this.accidentalHelper.minNoteValue);
                let minNoteHelper = this.helpers.getBeamingHelperForBeat(this.accidentalHelper.minNoteValueBeat);
                if (minNoteHelper.direction === BeamDirection.Down) {
                    minNoteY += this.getStemSize(minNoteHelper);
                    minNoteY += minNoteHelper.fingeringCount * this.resources.graceFont.size;
                }
                if (minNoteY > bottom) {
                    this.registerOverflowBottom(Math.abs(minNoteY) - bottom);
                }
            }
        }
        paint(cx, cy, canvas) {
            super.paint(cx, cy, canvas);
            this.paintBeams(cx, cy, canvas);
            this.paintTuplets(cx, cy, canvas);
        }
        paintTuplets(cx, cy, canvas) {
            for (let voice of this.bar.voices) {
                if (this.hasVoiceContainer(voice)) {
                    let container = this.getOrCreateVoiceContainer(voice);
                    for (let tupletGroup of container.tupletGroups) {
                        this.paintTupletHelper(cx + this.beatGlyphsStart, cy, canvas, tupletGroup);
                    }
                }
            }
        }
        paintBeams(cx, cy, canvas) {
            for (let i = 0, j = this.helpers.beamHelpers.length; i < j; i++) {
                let v = this.helpers.beamHelpers[i];
                for (let k = 0, l = v.length; k < l; k++) {
                    let h = v[k];
                    this.paintBeamHelper(cx + this.beatGlyphsStart, cy, canvas, h);
                }
            }
        }
        paintBeamHelper(cx, cy, canvas, h) {
            canvas.color = h.voice.index === 0 ? this.resources.mainGlyphColor : this.resources.secondaryGlyphColor;
            // TODO: draw stem at least at the center of the score staff.
            // check if we need to paint simple footer
            if (h.beats.length === 1) {
                this.paintFooter(cx, cy, canvas, h);
            }
            else {
                this.paintBar(cx, cy, canvas, h);
            }
        }
        paintTupletHelper(cx, cy, canvas, h) {
            let res = this.resources;
            let oldAlign = canvas.textAlign;
            canvas.color = h.voice.index === 0 ? this.resources.mainGlyphColor : this.resources.secondaryGlyphColor;
            canvas.textAlign = TextAlign.Center;
            let s;
            let num = h.beats[0].tupletNumerator;
            let den = h.beats[0].tupletDenominator;
            // list as in Guitar Pro 7. for certain tuplets only the numerator is shown
            if (num === 2 && den === 3) {
                s = '2';
            }
            else if (num === 3 && den === 2) {
                s = '3';
            }
            else if (num === 4 && den === 6) {
                s = '4';
            }
            else if (num === 5 && den === 4) {
                s = '5';
            }
            else if (num === 6 && den === 4) {
                s = '6';
            }
            else if (num === 7 && den === 4) {
                s = '7';
            }
            else if (num === 9 && den === 8) {
                s = '9';
            }
            else if (num === 10 && den === 8) {
                s = '10';
            }
            else if (num === 11 && den === 8) {
                s = '11';
            }
            else if (num === 12 && den === 8) {
                s = '12';
            }
            else if (num === 13 && den === 8) {
                s = '13';
            }
            else {
                s = num + ':' + den;
            }
            // check if we need to paint simple footer
            if (h.beats.length === 1 || !h.isFull) {
                for (let i = 0, j = h.beats.length; i < j; i++) {
                    let beat = h.beats[i];
                    let beamingHelper = this.helpers.beamHelperLookup[h.voice.index].get(beat.index);
                    if (!beamingHelper) {
                        continue;
                    }
                    let direction = beamingHelper.direction;
                    let tupletX = beamingHelper.getBeatLineX(beat) + this.scale;
                    let tupletY = cy + this.y + this.calculateBeamY(beamingHelper, tupletX);
                    let offset = direction === BeamDirection.Up ? res.effectFont.size * 1.5 : -3 * this.scale;
                    canvas.font = res.effectFont;
                    canvas.fillText(s, cx + this.x + tupletX, tupletY - offset);
                }
            }
            else {
                let firstBeat = h.beats[0];
                let lastBeat = h.beats[h.beats.length - 1];
                let firstBeamingHelper = this.helpers.beamHelperLookup[h.voice.index].get(firstBeat.index);
                let lastBeamingHelper = this.helpers.beamHelperLookup[h.voice.index].get(lastBeat.index);
                if (firstBeamingHelper && lastBeamingHelper) {
                    let direction = firstBeamingHelper.direction;
                    //
                    // Calculate the overall area of the tuplet bracket
                    let startX = firstBeamingHelper.getBeatLineX(firstBeat) + this.scale;
                    let endX = lastBeamingHelper.getBeatLineX(lastBeat) + this.scale;
                    //
                    // Calculate how many space the text will need
                    canvas.font = res.effectFont;
                    let sw = canvas.measureText(s);
                    let sp = 3 * this.scale;
                    //
                    // Calculate the offsets where to break the bracket
                    let middleX = (startX + endX) / 2;
                    let offset1X = middleX - sw / 2 - sp;
                    let offset2X = middleX + sw / 2 + sp;
                    //
                    // calculate the y positions for our bracket
                    let startY = this.calculateBeamYWithDirection(firstBeamingHelper, startX, firstBeamingHelper.direction);
                    let endY = this.calculateBeamYWithDirection(lastBeamingHelper, endX, firstBeamingHelper.direction);
                    let k = (endY - startY) / (endX - startX);
                    let d = startY - k * startX;
                    let offset1Y = k * offset1X + d;
                    let middleY = k * middleX + d;
                    let offset2Y = k * offset2X + d;
                    let offset = 10 * this.scale;
                    let size = 5 * this.scale;
                    if (direction === BeamDirection.Down) {
                        offset *= -1;
                        size *= -1;
                    }
                    //
                    // draw the bracket
                    canvas.beginPath();
                    canvas.moveTo(cx + this.x + startX, (cy + this.y + startY - offset) | 0);
                    canvas.lineTo(cx + this.x + startX, (cy + this.y + startY - offset - size) | 0);
                    canvas.lineTo(cx + this.x + offset1X, (cy + this.y + offset1Y - offset - size) | 0);
                    canvas.stroke();
                    canvas.beginPath();
                    canvas.moveTo(cx + this.x + offset2X, (cy + this.y + offset2Y - offset - size) | 0);
                    canvas.lineTo(cx + this.x + endX, (cy + this.y + endY - offset - size) | 0);
                    canvas.lineTo(cx + this.x + endX, (cy + this.y + endY - offset) | 0);
                    canvas.stroke();
                    //
                    // Draw the string
                    canvas.fillText(s, cx + this.x + middleX, cy + this.y + middleY - offset - size - res.effectFont.size / 2);
                }
            }
            canvas.textAlign = oldAlign;
        }
        getStemSize(helper) {
            let size = helper.beats.length === 1
                ? this.getFooterStemSize(helper.shortestDuration)
                : this.getBarStemSize(helper.shortestDuration);
            if (helper.isGrace) {
                size = size * NoteHeadGlyph.GraceScale;
            }
            return size;
        }
        getBarStemSize(duration) {
            let size = 0;
            switch (duration) {
                case Duration.QuadrupleWhole:
                    size = 6;
                    break;
                case Duration.Half:
                    size = 6;
                    break;
                case Duration.Quarter:
                    size = 6;
                    break;
                case Duration.Eighth:
                    size = 6;
                    break;
                case Duration.Sixteenth:
                    size = 6;
                    break;
                case Duration.ThirtySecond:
                    size = 7;
                    break;
                case Duration.SixtyFourth:
                    size = 7;
                    break;
                case Duration.OneHundredTwentyEighth:
                    size = 9;
                    break;
                case Duration.TwoHundredFiftySixth:
                    size = 10;
                    break;
                default:
                    size = 0;
                    break;
            }
            return this.getScoreY(size, 0);
        }
        getFooterStemSize(duration) {
            let size = 0;
            switch (duration) {
                case Duration.QuadrupleWhole:
                    size = 6;
                    break;
                case Duration.Half:
                    size = 6;
                    break;
                case Duration.Quarter:
                    size = 6;
                    break;
                case Duration.Eighth:
                    size = 6;
                    break;
                case Duration.Sixteenth:
                    size = 6;
                    break;
                case Duration.ThirtySecond:
                    size = 6;
                    break;
                case Duration.SixtyFourth:
                    size = 6;
                    break;
                case Duration.OneHundredTwentyEighth:
                    size = 6;
                    break;
                case Duration.TwoHundredFiftySixth:
                    size = 6;
                    break;
                default:
                    size = 0;
                    break;
            }
            return this.getScoreY(size, 0);
        }
        getYPositionForNoteValue(noteValue) {
            return this.getScoreY(this.accidentalHelper.getNoteLineForValue(noteValue, true), 0);
        }
        calculateBeamY(h, x) {
            let stemSize = this.getStemSize(h);
            return h.calculateBeamY(stemSize, this.scale, x, this.scale, this);
        }
        calculateBeamYWithDirection(h, x, direction) {
            let stemSize = this.getStemSize(h);
            return h.calculateBeamYWithDirection(stemSize, this.scale, x, this.scale, this, direction);
        }
        paintBar(cx, cy, canvas, h) {
            for (let i = 0, j = h.beats.length; i < j; i++) {
                let beat = h.beats[i];
                let isGrace = beat.graceType !== GraceType.None;
                let scaleMod = isGrace ? NoteHeadGlyph.GraceScale : 1;
                //
                // draw line
                //
                let beatLineX = h.getBeatLineX(beat) + this.scale;
                let direction = h.direction;
                let y1 = cy + this.y;
                y1 +=
                    direction === BeamDirection.Up
                        ? this.getYPositionForNoteValue(h.getBeatMinValue(beat))
                        : this.getYPositionForNoteValue(h.getBeatMaxValue(beat));
                let y2 = cy + this.y;
                y2 += this.calculateBeamY(h, beatLineX);
                canvas.lineWidth = ScoreBarRenderer.StemWidth * this.scale;
                canvas.beginPath();
                canvas.moveTo(cx + this.x + beatLineX, y1);
                canvas.lineTo(cx + this.x + beatLineX, y2);
                canvas.stroke();
                canvas.lineWidth = this.scale;
                let fingeringY = y2;
                if (direction === BeamDirection.Down) {
                    fingeringY += canvas.font.size * 2;
                }
                else if (i !== 0) {
                    fingeringY -= canvas.font.size * 1.5;
                }
                this.paintFingering(canvas, beat, cx + this.x + beatLineX, direction, fingeringY);
                let brokenBarOffset = 6 * this.scale * scaleMod;
                let barSpacing = 7 * this.scale * scaleMod;
                let barSize = (ScoreBarRenderer.LineSpacing / 2) * this.scale * scaleMod;
                let barCount = ModelUtils.getIndex(beat.duration) - 2;
                let barStart = cy + this.y;
                if (direction === BeamDirection.Down) {
                    barSpacing = -barSpacing;
                    barSize = -barSize;
                }
                for (let barIndex = 0; barIndex < barCount; barIndex++) {
                    let barStartX = 0;
                    let barEndX = 0;
                    let barStartY = 0;
                    let barEndY = 0;
                    let barY = barStart + barIndex * barSpacing;
                    //
                    // Bar to Next?
                    //
                    if (i < h.beats.length - 1) {
                        // full bar?
                        if (BeamingHelper.isFullBarJoin(beat, h.beats[i + 1], barIndex)) {
                            barStartX = beatLineX;
                            barEndX = h.getBeatLineX(h.beats[i + 1]) + this.scale;
                        }
                        else if (i === 0 || !BeamingHelper.isFullBarJoin(h.beats[i - 1], beat, barIndex)) {
                            barStartX = beatLineX;
                            barEndX = barStartX + brokenBarOffset;
                        }
                        else {
                            continue;
                        }
                        barStartY = barY + this.calculateBeamY(h, barStartX);
                        barEndY = barY + this.calculateBeamY(h, barEndX);
                        ScoreBarRenderer.paintSingleBar(canvas, cx + this.x + barStartX, barStartY, cx + this.x + barEndX, barEndY, barSize);
                    }
                    else if (i > 0 && !BeamingHelper.isFullBarJoin(beat, h.beats[i - 1], barIndex)) {
                        barStartX = beatLineX - brokenBarOffset;
                        barEndX = beatLineX;
                        barStartY = barY + this.calculateBeamY(h, barStartX);
                        barEndY = barY + this.calculateBeamY(h, barEndX);
                        ScoreBarRenderer.paintSingleBar(canvas, cx + this.x + barStartX, barStartY, cx + this.x + barEndX, barEndY, barSize);
                    }
                }
            }
        }
        static paintSingleBar(canvas, x1, y1, x2, y2, size) {
            canvas.beginPath();
            canvas.moveTo(x1, y1);
            canvas.lineTo(x2, y2);
            canvas.lineTo(x2, y2 + size);
            canvas.lineTo(x1, y1 + size);
            canvas.closePath();
            canvas.fill();
        }
        paintFooter(cx, cy, canvas, h) {
            let beat = h.beats[0];
            if (beat.graceType === GraceType.BendGrace ||
                (beat.graceType !== GraceType.None && this.settings.notation.notationMode === exports.NotationMode.SongBook)) {
                return;
            }
            let isGrace = beat.graceType !== GraceType.None;
            let scaleMod = isGrace ? NoteHeadGlyph.GraceScale : 1;
            //
            // draw line
            //
            let stemSize = this.getFooterStemSize(h.shortestDuration);
            let beatLineX = h.getBeatLineX(beat) + this.scale;
            let direction = h.direction;
            let topY = this.getYPositionForNoteValue(h.maxNoteValue);
            let bottomY = this.getYPositionForNoteValue(h.minNoteValue);
            let beamY = 0;
            let fingeringY = 0;
            if (direction === BeamDirection.Down) {
                bottomY += stemSize * scaleMod;
                beamY = bottomY;
                fingeringY = cy + this.y + bottomY;
            }
            else {
                topY -= stemSize * scaleMod;
                beamY = topY;
                fingeringY = cy + this.y + topY;
            }
            this.paintFingering(canvas, beat, cx + this.x + beatLineX, direction, fingeringY);
            if (beat.duration === Duration.Whole ||
                beat.duration === Duration.DoubleWhole ||
                beat.duration === Duration.QuadrupleWhole) {
                return;
            }
            canvas.lineWidth = ScoreBarRenderer.StemWidth * this.scale;
            canvas.beginPath();
            canvas.moveTo(cx + this.x + beatLineX, cy + this.y + topY);
            canvas.lineTo(cx + this.x + beatLineX, cy + this.y + bottomY);
            canvas.stroke();
            canvas.lineWidth = this.scale;
            if (beat.graceType === GraceType.BeforeBeat) {
                let graceSizeY = 15 * this.scale;
                let graceSizeX = 12 * this.scale;
                canvas.beginPath();
                if (direction === BeamDirection.Down) {
                    canvas.moveTo(cx + this.x + beatLineX - graceSizeX / 2, cy + this.y + bottomY - graceSizeY);
                    canvas.lineTo(cx + this.x + beatLineX + graceSizeX / 2, cy + this.y + bottomY);
                }
                else {
                    canvas.moveTo(cx + this.x + beatLineX - graceSizeX / 2, cy + this.y + topY + graceSizeY);
                    canvas.lineTo(cx + this.x + beatLineX + graceSizeX / 2, cy + this.y + topY);
                }
                canvas.stroke();
            }
            //
            // Draw beam
            //
            if (beat.duration > Duration.Quarter || isGrace) {
                let glyph = new BeamGlyph(beatLineX - this.scale / 2, beamY, beat.duration, direction, isGrace);
                glyph.renderer = this;
                glyph.doLayout();
                glyph.paint(cx + this.x, cy + this.y, canvas);
            }
        }
        paintFingering(canvas, beat, beatLineX, direction, topY) {
            let settings = this.settings;
            if (settings.notation.fingeringMode !== exports.FingeringMode.ScoreDefault &&
                settings.notation.fingeringMode !== exports.FingeringMode.ScoreForcePiano) {
                return;
            }
            if (direction === BeamDirection.Up) {
                beatLineX -= 10 * this.scale;
            }
            else {
                beatLineX += 3 * this.scale;
            }
            // sort notes ascending in their value to ensure
            // we are drawing the numbers according to their order on the stave
            let noteList = beat.notes.slice(0);
            noteList.sort((a, b) => {
                return a.realValue - b.realValue;
            });
            for (let n = 0; n < noteList.length; n++) {
                let note = noteList[n];
                let text = null;
                if (note.leftHandFinger !== Fingers.Unknown) {
                    text = ModelUtils.fingerToString(settings, beat, note.leftHandFinger, true);
                }
                else if (note.rightHandFinger !== Fingers.Unknown) {
                    text = ModelUtils.fingerToString(settings, beat, note.rightHandFinger, false);
                }
                if (!text) {
                    continue;
                }
                canvas.fillText(text, beatLineX, topY);
                topY -= canvas.font.size | 0;
            }
        }
        createPreBeatGlyphs() {
            super.createPreBeatGlyphs();
            if (this.bar.masterBar.isRepeatStart) {
                this.addPreBeatGlyph(new RepeatOpenGlyph(0, 0, 1.5, 3));
            }
            // Clef
            if (this.isFirstOfLine ||
                this.bar.clef !== this.bar.previousBar.clef ||
                this.bar.clefOttava !== this.bar.previousBar.clefOttava) {
                let offset = 0;
                let correction = 0;
                switch (this.bar.clef) {
                    case Clef.Neutral:
                        offset = 6;
                        break;
                    case Clef.F4:
                        offset = 4;
                        correction = -1;
                        break;
                    case Clef.C3:
                        offset = 6;
                        break;
                    case Clef.C4:
                        offset = 4;
                        break;
                    case Clef.G2:
                        offset = 8;
                        break;
                }
                this.createStartSpacing();
                this.addPreBeatGlyph(new ClefGlyph(0, this.getScoreY(offset, correction), this.bar.clef, this.bar.clefOttava));
            }
            // Key signature
            if ((this.index === 0 && this.bar.masterBar.keySignature !== 0) ||
                (this.bar.previousBar && this.bar.masterBar.keySignature !== this.bar.previousBar.masterBar.keySignature)) {
                this.createStartSpacing();
                this.createKeySignatureGlyphs();
            }
            // Time Signature
            if (!this.bar.previousBar ||
                (this.bar.previousBar &&
                    this.bar.masterBar.timeSignatureNumerator !== this.bar.previousBar.masterBar.timeSignatureNumerator) ||
                (this.bar.previousBar &&
                    this.bar.masterBar.timeSignatureDenominator !== this.bar.previousBar.masterBar.timeSignatureDenominator)) {
                this.createStartSpacing();
                this.createTimeSignatureGlyphs();
            }
            this.addPreBeatGlyph(new BarNumberGlyph(0, this.getScoreY(-0.5, 0), this.bar.index + 1));
            if (this.bar.isEmpty) {
                this.addPreBeatGlyph(new SpacingGlyph(0, 0, 30 * this.scale));
            }
        }
        createBeatGlyphs() {
            for (let v = 0; v < this.bar.voices.length; v++) {
                let voice = this.bar.voices[v];
                if (this.hasVoiceContainer(voice)) {
                    this.createVoiceGlyphs(voice);
                }
            }
        }
        createPostBeatGlyphs() {
            super.createPostBeatGlyphs();
            if (this.bar.masterBar.isRepeatEnd) {
                this.addPostBeatGlyph(new RepeatCloseGlyph(this.x, 0));
                if (this.bar.masterBar.repeatCount > 2) {
                    this.addPostBeatGlyph(new RepeatCountGlyph(0, this.getScoreY(-1, -3), this.bar.masterBar.repeatCount));
                }
            }
            else {
                this.addPostBeatGlyph(new BarSeperatorGlyph(0, 0));
            }
        }
        createStartSpacing() {
            if (this._startSpacing) {
                return;
            }
            this.addPreBeatGlyph(new SpacingGlyph(0, 0, 2 * this.scale));
            this._startSpacing = true;
        }
        createKeySignatureGlyphs() {
            let offsetClef = 0;
            let currentKey = this.bar.masterBar.keySignature;
            let previousKey = !this.bar.previousBar ? 0 : this.bar.previousBar.masterBar.keySignature;
            switch (this.bar.clef) {
                case Clef.Neutral:
                    offsetClef = 0;
                    break;
                case Clef.G2:
                    offsetClef = 1;
                    break;
                case Clef.F4:
                    offsetClef = 2;
                    break;
                case Clef.C3:
                    offsetClef = -1;
                    break;
                case Clef.C4:
                    offsetClef = 1;
                    break;
            }
            let newLines = new Map();
            let newGlyphs = [];
            // how many symbols do we need to get from a C-keysignature
            // to the new one
            // var offsetSymbols = (currentKey <= 7) ? currentKey : currentKey - 7;
            // a sharp keysignature
            if (ModelUtils.keySignatureIsSharp(currentKey)) {
                for (let i = 0; i < Math.abs(currentKey); i++) {
                    let step = ScoreBarRenderer.SharpKsSteps[i] + offsetClef;
                    newGlyphs.push(new AccidentalGlyph(0, this.getScoreY(step, 0), AccidentalType.Sharp, false));
                    newLines.set(step, true);
                }
            }
            else {
                for (let i = 0; i < Math.abs(currentKey); i++) {
                    let step = ScoreBarRenderer.FlatKsSteps[i] + offsetClef;
                    newGlyphs.push(new AccidentalGlyph(0, this.getScoreY(step, 0), AccidentalType.Flat, false));
                    newLines.set(step, true);
                }
            }
            // naturalize previous key
            let naturalizeSymbols = Math.abs(previousKey);
            let previousKeyPositions = ModelUtils.keySignatureIsSharp(previousKey)
                ? ScoreBarRenderer.SharpKsSteps
                : ScoreBarRenderer.FlatKsSteps;
            for (let i = 0; i < naturalizeSymbols; i++) {
                let step = previousKeyPositions[i] + offsetClef;
                if (!newLines.has(step)) {
                    this.addPreBeatGlyph(new AccidentalGlyph(0, this.getScoreY(previousKeyPositions[i] + offsetClef, 0), AccidentalType.Natural, false));
                }
            }
            for (let newGlyph of newGlyphs) {
                this.addPreBeatGlyph(newGlyph);
            }
        }
        createTimeSignatureGlyphs() {
            this.addPreBeatGlyph(new SpacingGlyph(0, 0, 5 * this.scale));
            this.addPreBeatGlyph(new ScoreTimeSignatureGlyph(0, this.getScoreY(2, 0), this.bar.masterBar.timeSignatureNumerator, this.bar.masterBar.timeSignatureDenominator, this.bar.masterBar.timeSignatureCommon));
        }
        createVoiceGlyphs(v) {
            for (let i = 0, j = v.beats.length; i < j; i++) {
                let b = v.beats[i];
                let container = new ScoreBeatContainerGlyph(b, this.getOrCreateVoiceContainer(v));
                container.preNotes = new ScoreBeatPreNotesGlyph();
                container.onNotes = new ScoreBeatGlyph();
                this.addBeatGlyph(container);
            }
        }
        // TODO[performance]: Maybe we should cache this (check profiler)
        getNoteLine(n) {
            return this.accidentalHelper.getNoteLine(n);
        }
        /**
         * Gets the relative y position of the given steps relative to first line.
         * @param steps the amount of steps while 2 steps are one line
         * @param correction
         * @returns
         */
        getScoreY(steps, correction = 0) {
            return (this.lineOffset / 2) * steps + correction * this.scale;
        }
        // private static readonly Random Random = new Random();
        paintBackground(cx, cy, canvas) {
            super.paintBackground(cx, cy, canvas);
            let res = this.resources;
            // var c = new Color((byte)Platform.Random(255),
            //                  (byte)Platform.Random(255),
            //                  (byte)Platform.Random(255),
            //                  100);
            // canvas.Color = c;
            // canvas.FillRect(cx + X, cy + Y, Width, Height);
            //
            // draw string lines
            //
            canvas.color = res.staffLineColor;
            let lineY = cy + this.y + this.topPadding;
            let lineOffset = this.lineOffset;
            for (let i = 0; i < 5; i++) {
                if (i > 0) {
                    lineY += lineOffset;
                }
                canvas.fillRect(cx + this.x, lineY | 0, this.width, this.scale);
            }
            canvas.color = res.mainGlyphColor;
            this.paintSimileMark(cx, cy, canvas);
        }
    }
    ScoreBarRenderer.StaffId = 'score';
    ScoreBarRenderer.SharpKsSteps = [1, 4, 0, 3, 6, 2, 5];
    ScoreBarRenderer.FlatKsSteps = [5, 2, 6, 3, 7, 4, 8];
    ScoreBarRenderer.LineSpacing = 8;
    ScoreBarRenderer.StemWidth = 1.3;

    /**
     * This Factory procudes ScoreBarRenderer instances
     */
    class ScoreBarRendererFactory extends BarRendererFactory {
        get staffId() {
            return ScoreBarRenderer.StaffId;
        }
        create(renderer, bar) {
            return new ScoreBarRenderer(renderer, bar);
        }
        constructor() {
            super();
        }
    }

    class TabSlideLineGlyph extends Glyph {
        constructor(inType, outType, startNote, parent) {
            super(0, 0);
            this._inType = inType;
            this._outType = outType;
            this._startNote = startNote;
            this._parent = parent;
        }
        doLayout() {
            this.width = 0;
        }
        paint(cx, cy, canvas) {
            this.paintSlideIn(cx, cy, canvas);
            this.paintSlideOut(cx, cy, canvas);
        }
        paintSlideIn(cx, cy, canvas) {
            let startNoteRenderer = this.renderer;
            let sizeX = 12 * this.scale;
            let sizeY = 3 * this.scale;
            let startX = 0;
            let startY = 0;
            let endX = 0;
            let endY = 0;
            switch (this._inType) {
                case SlideInType.IntoFromBelow:
                    endX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, false);
                    endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, false);
                    startX = endX - sizeX;
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, false) + sizeY;
                    break;
                case SlideInType.IntoFromAbove:
                    endX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, false);
                    endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, false);
                    startX = endX - sizeX;
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, false) - sizeY;
                    break;
                default:
                    return;
            }
            this.paintSlideLine(canvas, false, startX, endX, startY, endY);
        }
        paintSlideOut(cx, cy, canvas) {
            let startNoteRenderer = this.renderer;
            let sizeX = 12 * this.scale;
            let sizeY = 3 * this.scale;
            let startX = 0;
            let startY = 0;
            let endX = 0;
            let endY = 0;
            let waves = false;
            switch (this._outType) {
                case SlideOutType.Shift:
                case SlideOutType.Legato:
                    let startOffsetY = 0;
                    let endOffsetY = 0;
                    if (!this._startNote.slideTarget) {
                        startOffsetY = 0;
                        endOffsetY = 0;
                    }
                    else if (this._startNote.slideTarget.fret > this._startNote.fret) {
                        startOffsetY = sizeY;
                        endOffsetY = sizeY * -1;
                    }
                    else {
                        startOffsetY = sizeY * -1;
                        endOffsetY = sizeY;
                    }
                    startX =
                        cx +
                            startNoteRenderer.x +
                            startNoteRenderer.getBeatX(this._startNote.beat, BeatXPosition.PostNotes);
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, false) + startOffsetY;
                    if (this._startNote.slideTarget) {
                        let endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, this._startNote.slideTarget.beat.voice.bar);
                        if (!endNoteRenderer || endNoteRenderer.staff !== startNoteRenderer.staff) {
                            endX = cx + startNoteRenderer.x + this._parent.x;
                            endY = startY;
                        }
                        else {
                            endX =
                                cx +
                                    endNoteRenderer.x +
                                    endNoteRenderer.getBeatX(this._startNote.slideTarget.beat, BeatXPosition.OnNotes);
                            endY =
                                cy +
                                    endNoteRenderer.y +
                                    endNoteRenderer.getNoteY(this._startNote.slideTarget, false) +
                                    endOffsetY;
                        }
                    }
                    else {
                        endX = cx + startNoteRenderer.x + this._parent.x;
                        endY = startY;
                    }
                    break;
                case SlideOutType.OutUp:
                    startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, true);
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, false);
                    endX = startX + sizeX;
                    endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, false) - sizeY;
                    break;
                case SlideOutType.OutDown:
                    startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, true);
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, false);
                    endX = startX + sizeX;
                    endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, false) + sizeY;
                    break;
                case SlideOutType.PickSlideDown:
                    startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, true);
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, false) - sizeY * 2;
                    endX =
                        cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._startNote.beat, BeatXPosition.EndBeat);
                    endY = startY + sizeY * 3;
                    waves = true;
                    break;
                case SlideOutType.PickSlideUp:
                    startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, true);
                    startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, false) + sizeY;
                    endX =
                        cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._startNote.beat, BeatXPosition.EndBeat);
                    endY = startY - sizeY * 3;
                    waves = true;
                    break;
                default:
                    return;
            }
            this.paintSlideLine(canvas, waves, startX, endX, startY, endY);
        }
        paintSlideLine(canvas, waves, startX, endX, startY, endY) {
            if (waves) {
                let b = endX - startX;
                let a = endY - startY;
                let c = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
                let angle = Math.asin(a / c) * (180 / Math.PI);
                canvas.beginRotate(startX, startY, angle);
                let glyph = new NoteVibratoGlyph(0, 0, VibratoType.Slight, 1.2);
                glyph.renderer = this.renderer;
                glyph.doLayout();
                glyph.width = b;
                glyph.paint(0, 0, canvas);
                canvas.endRotate();
            }
            else {
                canvas.beginPath();
                canvas.moveTo(startX, startY);
                canvas.lineTo(endX, endY);
                canvas.stroke();
            }
        }
    }

    class TabTieGlyph extends TieGlyph {
        constructor(startNote, endNote, forSlide, forEnd = false) {
            super(startNote.beat, endNote.beat, forEnd);
            this.StartNote = startNote;
            this.EndNote = endNote;
            this.ForSlide = forSlide;
        }
        get offset() {
            return this.ForSlide ? 5 * this.scale : 0;
        }
        getBeamDirection(beat, noteRenderer) {
            return TabTieGlyph.getBeamDirection_Note(this.StartNote);
        }
        static getBeamDirection_Note(note) {
            return note.string > 3 ? BeamDirection.Up : BeamDirection.Down;
        }
        getStartY(noteRenderer, direction) {
            return noteRenderer.getNoteY(this.StartNote, false) - this.offset;
        }
        getEndY(noteRenderer, direction) {
            return noteRenderer.getNoteY(this.EndNote, false) - this.offset;
        }
        getStartX(noteRenderer) {
            return noteRenderer.getNoteX(this.StartNote, true);
        }
        getEndX(noteRenderer) {
            return noteRenderer.getNoteX(this.EndNote, false);
        }
    }

    class TabSlurGlyph extends TabTieGlyph {
        constructor(startNote, endNote, forSlide, forEnd = false) {
            super(startNote, endNote, forSlide, forEnd);
            this._direction = TabTieGlyph.getBeamDirection_Note(startNote);
        }
        getTieHeight(startX, startY, endX, endY) {
            return Math.log(endX - startX + 1) * this.renderer.settings.notation.slurHeight;
        }
        tryExpand(startNote, endNote, forSlide, forEnd) {
            // same type required
            if (this.ForSlide !== forSlide) {
                return false;
            }
            if (this.forEnd !== forEnd) {
                return false;
            }
            // same start and endbeat
            if (this.StartNote.beat.id !== startNote.beat.id) {
                return false;
            }
            if (this.EndNote.beat.id !== endNote.beat.id) {
                return false;
            }
            // same draw direction
            if (this._direction !== TabTieGlyph.getBeamDirection_Note(startNote)) {
                return false;
            }
            // if we can expand, expand in correct direction
            switch (this._direction) {
                case BeamDirection.Up:
                    if (startNote.realValue > this.StartNote.realValue) {
                        this.StartNote = startNote;
                        this.startBeat = startNote.beat;
                    }
                    if (endNote.realValue > this.EndNote.realValue) {
                        this.EndNote = endNote;
                        this.endBeat = endNote.beat;
                    }
                    break;
                case BeamDirection.Down:
                    if (startNote.realValue < this.StartNote.realValue) {
                        this.StartNote = startNote;
                        this.startBeat = startNote.beat;
                    }
                    if (endNote.realValue < this.EndNote.realValue) {
                        this.EndNote = endNote;
                        this.endBeat = endNote.beat;
                    }
                    break;
            }
            return true;
        }
        paint(cx, cy, canvas) {
            let startNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, this.startBeat.voice.bar);
            let direction = this.getBeamDirection(this.startBeat, startNoteRenderer);
            let slurId = 'tab.slur.' + this.StartNote.beat.id + '.' + this.EndNote.beat.id + '.' + direction;
            let renderer = this.renderer;
            let isSlurRendered = renderer.staff.getSharedLayoutData(slurId, false);
            if (!isSlurRendered) {
                renderer.staff.setSharedLayoutData(slurId, true);
                super.paint(cx, cy, canvas);
            }
        }
    }

    class TabBeatContainerGlyph extends BeatContainerGlyph {
        constructor(beat, voiceContainer) {
            super(beat, voiceContainer);
            this._bend = null;
            this._effectSlurs = [];
        }
        doLayout() {
            this._effectSlurs = [];
            super.doLayout();
            if (this._bend) {
                this._bend.renderer = this.renderer;
                this._bend.doLayout();
                this.updateWidth();
            }
        }
        createTies(n) {
            if (!n.isVisible) {
                return;
            }
            let renderer = this.renderer;
            if (n.isTieOrigin && renderer.showTiedNotes && n.tieDestination.isVisible) {
                let tie = new TabTieGlyph(n, n.tieDestination, false, false);
                this.ties.push(tie);
            }
            if (n.isTieDestination && renderer.showTiedNotes) {
                let tie = new TabTieGlyph(n.tieOrigin, n, false, true);
                this.ties.push(tie);
            }
            // start effect slur on first beat
            if (n.isEffectSlurOrigin && n.effectSlurDestination) {
                let expanded = false;
                for (let slur of this._effectSlurs) {
                    if (slur.tryExpand(n, n.effectSlurDestination, false, false)) {
                        expanded = true;
                        break;
                    }
                }
                if (!expanded) {
                    let effectSlur = new TabSlurGlyph(n, n.effectSlurDestination, false, false);
                    this._effectSlurs.push(effectSlur);
                    this.ties.push(effectSlur);
                }
            }
            // end effect slur on last beat
            if (n.isEffectSlurDestination && n.effectSlurOrigin) {
                let expanded = false;
                for (let slur of this._effectSlurs) {
                    if (slur.tryExpand(n.effectSlurOrigin, n, false, true)) {
                        expanded = true;
                        break;
                    }
                }
                if (!expanded) {
                    let effectSlur = new TabSlurGlyph(n.effectSlurOrigin, n, false, true);
                    this._effectSlurs.push(effectSlur);
                    this.ties.push(effectSlur);
                }
            }
            if (n.slideInType !== SlideInType.None || n.slideOutType !== SlideOutType.None) {
                let l = new TabSlideLineGlyph(n.slideInType, n.slideOutType, n, this);
                this.ties.push(l);
            }
            if (n.hasBend) {
                if (!this._bend) {
                    this._bend = new TabBendGlyph();
                    this._bend.renderer = this.renderer;
                    this.ties.push(this._bend);
                }
                this._bend.addBends(n);
            }
        }
    }

    class NoteNumberGlyph extends Glyph {
        constructor(x, y, note) {
            super(x, y);
            this._noteString = null;
            this._trillNoteString = null;
            this._trillNoteStringWidth = 0;
            this.isEmpty = false;
            this.height = 0;
            this.noteStringWidth = 0;
            this._note = note;
        }
        doLayout() {
            let n = this._note;
            let fret = n.fret - n.beat.voice.bar.staff.transpositionPitch;
            if (n.harmonicType === HarmonicType.Natural && n.harmonicValue !== 0) {
                fret = n.harmonicValue - n.beat.voice.bar.staff.transpositionPitch;
            }
            if (!n.isTieDestination) {
                this._noteString = n.isDead ? 'x' : fret.toString();
                if (n.isGhost) {
                    this._noteString = '(' + this._noteString + ')';
                }
                else if (n.harmonicType === HarmonicType.Natural) {
                    // only first decimal char
                    let i = this._noteString.indexOf(String.fromCharCode(46));
                    if (i >= 0) {
                        this._noteString = this._noteString.substr(0, i + 2);
                    }
                    this._noteString = '<' + this._noteString + '>';
                }
            }
            else if (n.beat.index === 0 ||
                ((n.bendType === BendType.Bend || n.bendType === BendType.BendRelease) &&
                    this.renderer.settings.notation.showTabNoteOnTiedBend)) {
                this._noteString = '(' + (n.tieOrigin.fret - n.beat.voice.bar.staff.transpositionPitch) + ')';
            }
            else {
                this._noteString = '';
            }
            if (n.isTrill) {
                this._trillNoteString = '(' + (n.trillFret - n.beat.voice.bar.staff.transpositionPitch) + ')';
            }
            else if (!Platform.isAlmostEqualTo(n.harmonicValue, 0)) {
                switch (n.harmonicType) {
                    case HarmonicType.Artificial:
                    case HarmonicType.Pinch:
                    case HarmonicType.Tap:
                    case HarmonicType.Semi:
                    case HarmonicType.Feedback:
                        let s = fret + n.harmonicValue.toString();
                        // only first decimal char
                        let i = s.indexOf(String.fromCharCode(46));
                        if (i >= 0) {
                            s = s.substr(0, i + 2);
                        }
                        this._trillNoteString = '<' + s + '>';
                        break;
                    default:
                        this._trillNoteString = '';
                        break;
                }
            }
            else {
                this._trillNoteString = '';
            }
            this.isEmpty = !this._noteString;
            if (!this.isEmpty) {
                this.renderer.scoreRenderer.canvas.font = this.renderer.resources.tablatureFont;
                this.width = this.noteStringWidth = this.renderer.scoreRenderer.canvas.measureText(this._noteString);
                this.height = this.renderer.scoreRenderer.canvas.font.size;
                let hasTrill = !!this._trillNoteString;
                if (hasTrill) {
                    this.renderer.scoreRenderer.canvas.font = this.renderer.resources.graceFont;
                    this._trillNoteStringWidth =
                        3 * this.scale + this.renderer.scoreRenderer.canvas.measureText(this._trillNoteString);
                    this.width += this._trillNoteStringWidth;
                }
            }
        }
        paint(cx, cy, canvas) {
            if (this.isEmpty) {
                return;
            }
            let textWidth = this.noteStringWidth + this._trillNoteStringWidth;
            let x = cx + this.x + (this.width - textWidth) / 2;
            let prevFont = this.renderer.scoreRenderer.canvas.font;
            this.renderer.scoreRenderer.canvas.font = this.renderer.resources.graceFont;
            canvas.fillText(this._trillNoteString, x + this.noteStringWidth + 3 * this.scale, cy + this.y);
            this.renderer.scoreRenderer.canvas.font = prevFont;
            canvas.fillText(this._noteString, x, cy + this.y);
            if (this.renderer.settings.core.includeNoteBounds) {
                let noteBounds = new NoteBounds();
                noteBounds.note = this._note;
                noteBounds.noteHeadBounds = new Bounds();
                noteBounds.noteHeadBounds.x = cx + this.x;
                noteBounds.noteHeadBounds.y = cy + this.y;
                noteBounds.noteHeadBounds.w = this.width;
                noteBounds.noteHeadBounds.h = this.height;
                this.renderer.scoreRenderer.boundsLookup.addNote(noteBounds);
            }
        }
    }

    class TabNoteChordGlyph extends Glyph {
        constructor(x, y, isGrace) {
            super(x, y);
            this._notes = [];
            this.minStringNote = null;
            this.beatEffects = new Map();
            this.notesPerString = new Map();
            this.noteStringWidth = 0;
            this._isGrace = isGrace;
        }
        getNoteX(note, onEnd = true) {
            if (this.notesPerString.has(note.string)) {
                let n = this.notesPerString.get(note.string);
                let pos = this.x + n.x;
                if (onEnd) {
                    pos += n.width;
                }
                return pos;
            }
            return 0;
        }
        getNoteY(note, aboveNote = false) {
            if (this.notesPerString.has(note.string)) {
                return (this.y +
                    this.notesPerString.get(note.string).y +
                    (aboveNote ? -this.notesPerString.get(note.string).height / 2 : 0));
            }
            return 0;
        }
        doLayout() {
            let w = 0;
            let noteStringWidth = 0;
            for (let i = 0, j = this._notes.length; i < j; i++) {
                let g = this._notes[i];
                g.renderer = this.renderer;
                g.doLayout();
                if (g.width > w) {
                    w = g.width;
                }
                if (g.noteStringWidth > noteStringWidth) {
                    noteStringWidth = g.noteStringWidth;
                }
            }
            this.noteStringWidth = noteStringWidth;
            let tabHeight = this.renderer.resources.tablatureFont.size;
            let effectY = this.getNoteY(this.minStringNote, false) + tabHeight / 2;
            // TODO: take care of actual glyph height
            let effectSpacing = 7 * this.scale;
            for (let kvp of this.beatEffects) {
                let g = kvp[1];
                g.y += effectY;
                g.x += this.width / 2;
                g.renderer = this.renderer;
                effectY += effectSpacing;
                g.doLayout();
            }
            this.width = w;
        }
        addNoteGlyph(noteGlyph, note) {
            this._notes.push(noteGlyph);
            this.notesPerString.set(note.string, noteGlyph);
            if (!this.minStringNote || note.string < this.minStringNote.string) {
                this.minStringNote = note;
            }
        }
        paint(cx, cy, canvas) {
            cx += this.x;
            cy += this.y;
            let res = this.renderer.resources;
            let oldBaseLine = canvas.textBaseline;
            canvas.textBaseline = TextBaseline.Middle;
            canvas.font = this._isGrace ? res.graceFont : res.tablatureFont;
            let notes = this._notes;
            let w = this.width;
            for (let g of notes) {
                g.renderer = this.renderer;
                g.width = w;
                g.paint(cx, cy, canvas);
            }
            canvas.textBaseline = oldBaseLine;
            for (let kvp of this.beatEffects) {
                let g = kvp[1];
                g.paint(cx, cy, canvas);
            }
        }
        updateBeamingHelper(cx) {
            if (this.beamingHelper && this.beamingHelper.isPositionFrom('tab', this.beat)) {
                this.beamingHelper.registerBeatLineX('tab', this.beat, cx + this.x + this.width, cx + this.x);
            }
        }
    }

    class TabRestGlyph extends MusicFontGlyph {
        constructor(x, y, isVisibleRest, duration) {
            super(x, y, 1, ScoreRestGlyph.getSymbol(duration));
            this._isVisibleRest = isVisibleRest;
            this._duration = duration;
        }
        doLayout() {
            if (this._isVisibleRest) {
                this.width = ScoreRestGlyph.getSize(this._duration) * this.scale;
            }
            else {
                this.width = 10 * this.scale;
            }
        }
        updateBeamingHelper(cx) {
            if (this.beamingHelper && this.beamingHelper.isPositionFrom('tab', this.beat)) {
                this.beamingHelper.registerBeatLineX('tab', this.beat, cx + this.x + this.width, cx + this.x);
            }
        }
        paint(cx, cy, canvas) {
            if (this._isVisibleRest) {
                super.paint(cx, cy, canvas);
            }
        }
    }

    class TabBeatGlyph extends BeatOnNoteGlyphBase {
        constructor() {
            super(...arguments);
            this.noteNumbers = null;
            this.restGlyph = null;
        }
        doLayout() {
            let tabRenderer = this.renderer;
            if (!this.container.beat.isRest) {
                //
                // Note numbers
                let isGrace = this.renderer.settings.notation.smallGraceTabNotes && this.container.beat.graceType !== GraceType.None;
                this.noteNumbers = new TabNoteChordGlyph(0, 0, isGrace);
                this.noteNumbers.beat = this.container.beat;
                this.noteNumbers.beamingHelper = this.beamingHelper;
                for (let note of this.container.beat.notes) {
                    if (note.isVisible) {
                        this.createNoteGlyph(note);
                    }
                }
                this.addGlyph(this.noteNumbers);
                //
                // Whammy Bar
                if (this.container.beat.hasWhammyBar) {
                    let whammy = new TabWhammyBarGlyph(this.container.beat);
                    whammy.renderer = this.renderer;
                    whammy.doLayout();
                    this.container.ties.push(whammy);
                }
                //
                // Tremolo Picking
                if (this.container.beat.isTremolo && !this.noteNumbers.beatEffects.has('tremolo')) {
                    let offset = 0;
                    let speed = this.container.beat.tremoloSpeed;
                    switch (speed) {
                        case Duration.ThirtySecond:
                            offset = 10;
                            break;
                        case Duration.Sixteenth:
                            offset = 5;
                            break;
                        case Duration.Eighth:
                            offset = 0;
                            break;
                    }
                    this.noteNumbers.beatEffects.set('tremolo', new TremoloPickingGlyph(5 * this.scale, offset * this.scale, speed));
                }
                //
                // Note dots
                //
                if (this.container.beat.dots > 0 && tabRenderer.settings.notation.rhythmMode !== exports.TabRhythmMode.Hidden) {
                    this.addGlyph(new SpacingGlyph(0, 0, 5 * this.scale));
                    for (let i = 0; i < this.container.beat.dots; i++) {
                        this.addGlyph(new CircleGlyph(0, tabRenderer.lineOffset * tabRenderer.bar.staff.tuning.length +
                            tabRenderer.settings.notation.rhythmHeight * tabRenderer.scale, 1.5 * this.scale));
                    }
                }
            }
            else {
                let line = 0;
                let offset = 0;
                switch (this.container.beat.duration) {
                    case Duration.QuadrupleWhole:
                        line = 3;
                        break;
                    case Duration.DoubleWhole:
                        line = 3;
                        break;
                    case Duration.Whole:
                        line = 2;
                        break;
                    case Duration.Half:
                        line = 3;
                        break;
                    case Duration.Quarter:
                        line = 3;
                        break;
                    case Duration.Eighth:
                        line = 2;
                        offset = 5;
                        break;
                    case Duration.Sixteenth:
                        line = 2;
                        offset = 5;
                        break;
                    case Duration.ThirtySecond:
                        line = 3;
                        break;
                    case Duration.SixtyFourth:
                        line = 3;
                        break;
                    case Duration.OneHundredTwentyEighth:
                        line = 3;
                        break;
                    case Duration.TwoHundredFiftySixth:
                        line = 3;
                        break;
                }
                let y = tabRenderer.getTabY(line, offset);
                this.restGlyph = new TabRestGlyph(0, y, tabRenderer.showRests, this.container.beat.duration);
                this.restGlyph.beat = this.container.beat;
                this.restGlyph.beamingHelper = this.beamingHelper;
                this.addGlyph(this.restGlyph);
                //
                // Note dots
                //
                if (this.container.beat.dots > 0 && tabRenderer.showRests) {
                    this.addGlyph(new SpacingGlyph(0, 0, 5 * this.scale));
                    for (let i = 0; i < this.container.beat.dots; i++) {
                        this.addGlyph(new CircleGlyph(0, y, 1.5 * this.scale));
                    }
                }
            }
            // left to right layout
            if (!this.glyphs) {
                return;
            }
            let w = 0;
            for (let i = 0, j = this.glyphs.length; i < j; i++) {
                let g = this.glyphs[i];
                g.x = w;
                g.renderer = this.renderer;
                g.doLayout();
                w += g.width;
            }
            this.width = w;
            if (this.container.beat.isEmpty) {
                this.centerX = this.width / 2;
            }
            else if (this.container.beat.isRest) {
                this.centerX = this.restGlyph.x + this.restGlyph.width / 2;
            }
            else {
                this.centerX = this.noteNumbers.x + this.noteNumbers.noteStringWidth / 2;
            }
        }
        updateBeamingHelper() {
            if (!this.container.beat.isRest) {
                this.noteNumbers.updateBeamingHelper(this.container.x + this.x);
            }
            else {
                this.restGlyph.updateBeamingHelper(this.container.x + this.x);
            }
        }
        createNoteGlyph(n) {
            let tr = this.renderer;
            let noteNumberGlyph = new NoteNumberGlyph(0, 0, n);
            let l = n.beat.voice.bar.staff.tuning.length - n.string + 1;
            noteNumberGlyph.y = tr.getTabY(l, -2);
            noteNumberGlyph.renderer = this.renderer;
            noteNumberGlyph.doLayout();
            this.noteNumbers.addNoteGlyph(noteNumberGlyph, n);
        }
    }

    class TabBrushGlyph extends Glyph {
        constructor(beat) {
            super(0, 0);
            this._beat = beat;
        }
        doLayout() {
            this.width = 10 * this.scale;
        }
        paint(cx, cy, canvas) {
            // TODO: Create webfont version
            let tabBarRenderer = this.renderer;
            let res = this.renderer.resources;
            let startY = cy + this.x + (tabBarRenderer.getNoteY(this._beat.maxNote, false) - res.tablatureFont.size / 2);
            let endY = cy + this.y + tabBarRenderer.getNoteY(this._beat.minNote, false) + res.tablatureFont.size / 2;
            let arrowX = (cx + this.x + this.width / 2) | 0;
            let arrowSize = 8 * this.scale;
            if (this._beat.brushType !== BrushType.None) {
                if (this._beat.brushType === BrushType.BrushUp || this._beat.brushType === BrushType.BrushDown) {
                    canvas.beginPath();
                    canvas.moveTo(arrowX, startY);
                    canvas.lineTo(arrowX, endY);
                    canvas.stroke();
                }
                else if (this._beat.brushType === BrushType.ArpeggioUp) {
                    let lineStartY = startY - arrowSize;
                    let lineEndY = endY - arrowSize;
                    canvas.beginRotate(cx + this.x + 2 * this.scale, lineEndY, -90);
                    let glyph = new NoteVibratoGlyph(0, 0, VibratoType.Slight, 1.2);
                    glyph.renderer = this.renderer;
                    glyph.doLayout();
                    glyph.width = Math.abs(lineEndY - lineStartY);
                    glyph.paint(0, 0, canvas);
                    canvas.endRotate();
                }
                else if (this._beat.brushType === BrushType.ArpeggioDown) {
                    let lineStartY = startY + arrowSize;
                    let lineEndY = endY + arrowSize;
                    canvas.beginRotate(cx + this.x + 7 * this.scale, lineStartY, 90);
                    let glyph = new NoteVibratoGlyph(0, 0, VibratoType.Slight, 1.2);
                    glyph.renderer = this.renderer;
                    glyph.doLayout();
                    glyph.width = Math.abs(lineEndY - lineStartY);
                    glyph.paint(0, 0, canvas);
                    canvas.endRotate();
                }
                if (this._beat.brushType === BrushType.BrushUp || this._beat.brushType === BrushType.ArpeggioUp) {
                    canvas.beginPath();
                    canvas.moveTo(arrowX, endY);
                    canvas.lineTo(arrowX + arrowSize / 2, endY - arrowSize);
                    canvas.lineTo(arrowX - arrowSize / 2, endY - arrowSize);
                    canvas.closePath();
                    canvas.fill();
                }
                else {
                    canvas.beginPath();
                    canvas.moveTo(arrowX, startY);
                    canvas.lineTo(arrowX + arrowSize / 2, startY + arrowSize);
                    canvas.lineTo(arrowX - arrowSize / 2, startY + arrowSize);
                    canvas.closePath();
                    canvas.fill();
                }
            }
        }
    }

    class TabBeatPreNotesGlyph extends BeatGlyphBase {
        doLayout() {
            if (this.container.beat.brushType !== BrushType.None && !this.container.beat.isRest) {
                this.addGlyph(new TabBrushGlyph(this.container.beat));
                this.addGlyph(new SpacingGlyph(0, 0, 4 * this.scale));
            }
            super.doLayout();
        }
        constructor() {
            super();
        }
    }

    class TabClefGlyph extends Glyph {
        constructor(x, y) {
            super(x, y);
        }
        doLayout() {
            this.width = 28 * this.scale;
        }
        paint(cx, cy, canvas) {
            let strings = this.renderer.bar.staff.tuning.length;
            let correction = strings * this.scale * 0.5;
            let symbol = strings <= 4 ? MusicFontSymbol.ClefTabSmall : MusicFontSymbol.ClefTab;
            let scale = strings <= 4 ? strings / 4.5 : strings / 6.5;
            canvas.fillMusicFontSymbol(cx + this.x + 5 * this.scale, cy + this.y - correction, scale * this.scale, symbol, false);
        }
    }

    class TabTimeSignatureGlyph extends TimeSignatureGlyph {
        get commonY() {
            let renderer = this.renderer;
            return renderer.getTabY(0, 0);
        }
        get numeratorY() {
            let renderer = this.renderer;
            let offset = renderer.bar.staff.tuning.length <= 4 ? 1 / 4 : 1 / 3;
            return renderer.lineOffset * renderer.bar.staff.tuning.length * offset * this.scale;
        }
        get denominatorY() {
            let renderer = this.renderer;
            let offset = 3 / 5;
            return renderer.lineOffset * renderer.bar.staff.tuning.length * offset * this.scale;
        }
        get commonScale() {
            return 1;
        }
        get numberScale() {
            let renderer = this.renderer;
            if (renderer.bar.staff.tuning.length <= 4) {
                return NoteHeadGlyph.GraceScale;
            }
            return 1;
        }
    }

    /**
     * This BarRenderer renders a bar using guitar tablature notation
     */
    class TabBarRenderer extends BarRendererBase {
        constructor(renderer, bar) {
            super(renderer, bar);
            this._tupletSize = 0;
            this.showTimeSignature = false;
            this.showRests = false;
            this.showTiedNotes = false;
            this._startSpacing = false;
        }
        get lineOffset() {
            return (TabBarRenderer.LineSpacing + 1) * this.scale;
        }
        getNoteX(note, onEnd = true) {
            let beat = this.getOnNotesGlyphForBeat(note.beat);
            if (beat) {
                return beat.container.x + beat.container.voiceContainer.x + beat.x + beat.noteNumbers.getNoteX(note, onEnd);
            }
            return 0;
        }
        getNoteY(note, aboveNote = false) {
            let beat = this.getOnNotesGlyphForBeat(note.beat);
            if (beat) {
                return beat.noteNumbers.getNoteY(note, aboveNote);
            }
            return 0;
        }
        updateSizes() {
            let res = this.resources;
            let numberOverflow = res.tablatureFont.size / 2 + res.tablatureFont.size * 0.2;
            this.topPadding = numberOverflow;
            this.bottomPadding = numberOverflow;
            this.height = this.lineOffset * (this.bar.staff.tuning.length - 1) + numberOverflow * 2;
            if (this.settings.notation.rhythmMode !== exports.TabRhythmMode.Hidden) {
                this.height += this.settings.notation.rhythmHeight * this.settings.display.scale;
                this.bottomPadding += this.settings.notation.rhythmHeight * this.settings.display.scale;
            }
            super.updateSizes();
        }
        doLayout() {
            super.doLayout();
            if (this.settings.notation.rhythmMode !== exports.TabRhythmMode.Hidden) {
                let hasTuplets = false;
                for (let voice of this.bar.voices) {
                    if (this.hasVoiceContainer(voice)) {
                        let c = this.getOrCreateVoiceContainer(voice);
                        if (c.tupletGroups.length > 0) {
                            hasTuplets = true;
                            break;
                        }
                    }
                }
                if (hasTuplets) {
                    this._tupletSize = this.resources.effectFont.size * 0.8;
                    this.registerOverflowBottom(this._tupletSize);
                }
            }
        }
        createPreBeatGlyphs() {
            super.createPreBeatGlyphs();
            if (this.bar.masterBar.isRepeatStart) {
                this.addPreBeatGlyph(new RepeatOpenGlyph(0, 0, 1.5, 3));
            }
            // Clef
            if (this.isFirstOfLine) {
                let center = (this.bar.staff.tuning.length + 1) / 2;
                this.addPreBeatGlyph(new TabClefGlyph(5 * this.scale, this.getTabY(center, 0)));
            }
            // Time Signature
            if (this.showTimeSignature &&
                (!this.bar.previousBar ||
                    (this.bar.previousBar &&
                        this.bar.masterBar.timeSignatureNumerator !==
                            this.bar.previousBar.masterBar.timeSignatureNumerator) ||
                    (this.bar.previousBar &&
                        this.bar.masterBar.timeSignatureDenominator !==
                            this.bar.previousBar.masterBar.timeSignatureDenominator))) {
                this.createStartSpacing();
                this.createTimeSignatureGlyphs();
            }
            this.addPreBeatGlyph(new BarNumberGlyph(0, this.getTabY(-0.5, 0), this.bar.index + 1));
            if (this.bar.isEmpty) {
                this.addPreBeatGlyph(new SpacingGlyph(0, 0, 30 * this.scale));
            }
        }
        createStartSpacing() {
            if (this._startSpacing) {
                return;
            }
            this.addPreBeatGlyph(new SpacingGlyph(0, 0, 2 * this.scale));
            this._startSpacing = true;
        }
        createTimeSignatureGlyphs() {
            this.addPreBeatGlyph(new SpacingGlyph(0, 0, 5 * this.scale));
            this.addPreBeatGlyph(new TabTimeSignatureGlyph(0, this.getTabY(0, 0), this.bar.masterBar.timeSignatureNumerator, this.bar.masterBar.timeSignatureDenominator, this.bar.masterBar.timeSignatureCommon));
        }
        createBeatGlyphs() {
            for (let v = 0; v < this.bar.voices.length; v++) {
                let voice = this.bar.voices[v];
                if (this.hasVoiceContainer(voice)) {
                    this.createVoiceGlyphs(this.bar.voices[v]);
                }
            }
        }
        createVoiceGlyphs(v) {
            for (let i = 0, j = v.beats.length; i < j; i++) {
                let b = v.beats[i];
                let container = new TabBeatContainerGlyph(b, this.getOrCreateVoiceContainer(v));
                container.preNotes = new TabBeatPreNotesGlyph();
                container.onNotes = new TabBeatGlyph();
                this.addBeatGlyph(container);
            }
        }
        createPostBeatGlyphs() {
            super.createPostBeatGlyphs();
            if (this.bar.masterBar.isRepeatEnd) {
                this.addPostBeatGlyph(new RepeatCloseGlyph(this.x, 0));
                if (this.bar.masterBar.repeatCount > 2) {
                    this.addPostBeatGlyph(new RepeatCountGlyph(0, this.getTabY(-0.5, -3), this.bar.masterBar.repeatCount));
                }
            }
            else {
                this.addPostBeatGlyph(new BarSeperatorGlyph(0, 0));
            }
        }
        /**
         * Gets the relative y position of the given steps relative to first line.
         * @param line the amount of steps while 2 steps are one line
         * @param correction
         * @returns
         */
        getTabY(line, correction = 0) {
            return this.lineOffset * line + correction * this.scale;
        }
        paintBackground(cx, cy, canvas) {
            super.paintBackground(cx, cy, canvas);
            let res = this.resources;
            //
            // draw string lines
            //
            canvas.color = res.staffLineColor;
            let lineY = cy + this.y + this.topPadding;
            let padding = this.scale;
            // collect tab note position for spaces
            let tabNotes = [];
            for (let i = 0, j = this.bar.staff.tuning.length; i < j; i++) {
                tabNotes.push([]);
            }
            for (let voice of this.bar.voices) {
                if (this.hasVoiceContainer(voice)) {
                    let vc = this.getOrCreateVoiceContainer(voice);
                    for (let bg of vc.beatGlyphs) {
                        let notes = bg.onNotes;
                        let noteNumbers = notes.noteNumbers;
                        if (noteNumbers) {
                            for (let kvp of noteNumbers.notesPerString) {
                                let noteNumber = kvp[1];
                                if (!noteNumber.isEmpty) {
                                    tabNotes[this.bar.staff.tuning.length - kvp[0]].push(new Float32Array([
                                        vc.x + bg.x + notes.x + noteNumbers.x,
                                        noteNumbers.width + padding
                                    ]));
                                }
                            }
                        }
                    }
                }
            }
            // if we have multiple voices we need to sort by X-position, otherwise have a wild mix in the list
            // but painting relies on ascending X-position
            for (let line of tabNotes) {
                line.sort((a, b) => {
                    return a[0] > b[0] ? 1 : a[0] < b[0] ? -1 : 0;
                });
            }
            let lineOffset = this.lineOffset;
            for (let i = 0, j = this.bar.staff.tuning.length; i < j; i++) {
                if (i > 0) {
                    lineY += lineOffset;
                }
                let lineX = 0;
                for (let line of tabNotes[i]) {
                    canvas.fillRect(cx + this.x + lineX, lineY | 0, line[0] - lineX, this.scale);
                    lineX = line[0] + line[1];
                }
                canvas.fillRect(cx + this.x + lineX, lineY | 0, this.width - lineX, this.scale);
            }
            canvas.color = res.mainGlyphColor;
            this.paintSimileMark(cx, cy, canvas);
        }
        paint(cx, cy, canvas) {
            super.paint(cx, cy, canvas);
            if (this.settings.notation.rhythmMode !== exports.TabRhythmMode.Hidden) {
                this.paintBeams(cx, cy, canvas);
                this.paintTuplets(cx, cy, canvas);
            }
        }
        paintBeams(cx, cy, canvas) {
            for (let i = 0, j = this.helpers.beamHelpers.length; i < j; i++) {
                let v = this.helpers.beamHelpers[i];
                for (let k = 0, l = v.length; k < l; k++) {
                    let h = v[k];
                    this.paintBeamHelper(cx + this.beatGlyphsStart, cy, canvas, h);
                }
            }
        }
        paintTuplets(cx, cy, canvas) {
            for (let voice of this.bar.voices) {
                if (this.hasVoiceContainer(voice)) {
                    let container = this.getOrCreateVoiceContainer(voice);
                    for (let tupletGroup of container.tupletGroups) {
                        this.paintTupletHelper(cx + this.beatGlyphsStart, cy, canvas, tupletGroup);
                    }
                }
            }
        }
        paintBeamHelper(cx, cy, canvas, h) {
            canvas.color = h.voice.index === 0 ? this.resources.mainGlyphColor : this.resources.secondaryGlyphColor;
            // check if we need to paint simple footer
            if (h.beats.length === 1 || this.settings.notation.rhythmMode === exports.TabRhythmMode.ShowWithBeams) {
                this.paintFooter(cx, cy, canvas, h);
            }
            else {
                this.paintBar(cx, cy, canvas, h);
            }
        }
        paintBar(cx, cy, canvas, h) {
            for (let i = 0, j = h.beats.length; i < j; i++) {
                let beat = h.beats[i];
                if (h.hasBeatLineX(beat)) {
                    //
                    // draw line
                    //
                    let beatLineX = h.getBeatLineX(beat);
                    let y1 = cy + this.y;
                    let y2 = cy + this.y + this.height - this._tupletSize;
                    let startGlyph = this.getOnNotesGlyphForBeat(beat);
                    if (!startGlyph.noteNumbers) {
                        y1 +=
                            this.height -
                                this.settings.notation.rhythmHeight * this.settings.display.scale -
                                this._tupletSize;
                    }
                    else {
                        y1 +=
                            startGlyph.noteNumbers.getNoteY(startGlyph.noteNumbers.minStringNote, false) +
                                this.lineOffset / 2;
                    }
                    if (h.direction === BeamDirection.Up) {
                        beatLineX -= startGlyph.width / 2;
                    }
                    else {
                        beatLineX += startGlyph.width / 2;
                    }
                    canvas.beginPath();
                    canvas.moveTo(cx + this.x + beatLineX, y1);
                    canvas.lineTo(cx + this.x + beatLineX, y2);
                    canvas.stroke();
                    let brokenBarOffset = 6 * this.scale;
                    let barSpacing = -6 * this.scale;
                    let barSize = 3 * this.scale;
                    let barCount = ModelUtils.getIndex(beat.duration) - 2;
                    let barStart = y2;
                    for (let barIndex = 0; barIndex < barCount; barIndex++) {
                        let barStartX = 0;
                        let barEndX = 0;
                        let barStartY = 0;
                        let barEndY = 0;
                        let barY = barStart + barIndex * barSpacing;
                        //
                        // Broken Bar to Next
                        //
                        if (h.beats.length === 1) {
                            barStartX = beatLineX;
                            barEndX = beatLineX + brokenBarOffset;
                            barStartY = barY;
                            barEndY = barY;
                            TabBarRenderer.paintSingleBar(canvas, cx + this.x + barStartX, barStartY, cx + this.x + barEndX, barEndY, barSize);
                        }
                        else if (i < h.beats.length - 1) {
                            // full bar?
                            if (BeamingHelper.isFullBarJoin(beat, h.beats[i + 1], barIndex)) {
                                barStartX = beatLineX;
                                barEndX = h.getBeatLineX(h.beats[i + 1]) + this.scale;
                                let endGlyph = this.getOnNotesGlyphForBeat(h.beats[i + 1]);
                                if (h.direction === BeamDirection.Up) {
                                    barEndX -= endGlyph.width / 2;
                                }
                                else {
                                    barEndX += endGlyph.width / 2;
                                }
                            }
                            else if (i === 0 || !BeamingHelper.isFullBarJoin(h.beats[i - 1], beat, barIndex)) {
                                barStartX = beatLineX;
                                barEndX = barStartX + brokenBarOffset;
                            }
                            else {
                                continue;
                            }
                            barStartY = barY;
                            barEndY = barY;
                            TabBarRenderer.paintSingleBar(canvas, cx + this.x + barStartX, barStartY, cx + this.x + barEndX, barEndY, barSize);
                        }
                        else if (i > 0 && !BeamingHelper.isFullBarJoin(beat, h.beats[i - 1], barIndex)) {
                            barStartX = beatLineX - brokenBarOffset;
                            barEndX = beatLineX;
                            barStartY = barY;
                            barEndY = barY;
                            TabBarRenderer.paintSingleBar(canvas, cx + this.x + barStartX, barStartY, cx + this.x + barEndX, barEndY, barSize);
                        }
                    }
                }
            }
        }
        paintTupletHelper(cx, cy, canvas, h) {
            let res = this.resources;
            let oldAlign = canvas.textAlign;
            canvas.color = h.voice.index === 0 ? this.resources.mainGlyphColor : this.resources.secondaryGlyphColor;
            canvas.textAlign = TextAlign.Center;
            let s;
            let num = h.beats[0].tupletNumerator;
            let den = h.beats[0].tupletDenominator;
            // list as in Guitar Pro 7. for certain tuplets only the numerator is shown
            if (num === 2 && den === 3) {
                s = '2';
            }
            else if (num === 3 && den === 2) {
                s = '3';
            }
            else if (num === 4 && den === 6) {
                s = '4';
            }
            else if (num === 5 && den === 4) {
                s = '5';
            }
            else if (num === 6 && den === 4) {
                s = '6';
            }
            else if (num === 7 && den === 4) {
                s = '7';
            }
            else if (num === 9 && den === 8) {
                s = '9';
            }
            else if (num === 10 && den === 8) {
                s = '10';
            }
            else if (num === 11 && den === 8) {
                s = '11';
            }
            else if (num === 12 && den === 8) {
                s = '12';
            }
            else if (num === 13 && den === 8) {
                s = '13';
            }
            else {
                s = num + ':' + den;
            }
            // check if we need to paint simple footer
            if (h.beats.length === 1 || !h.isFull) {
                for (let i = 0, j = h.beats.length; i < j; i++) {
                    let beat = h.beats[i];
                    let beamingHelper = this.helpers.beamHelperLookup[h.voice.index].get(beat.index);
                    if (!beamingHelper) {
                        continue;
                    }
                    let tupletX = beamingHelper.getBeatLineX(beat);
                    let startGlyph = this.getOnNotesGlyphForBeat(beat);
                    if (beamingHelper.direction === BeamDirection.Up) {
                        tupletX -= startGlyph.width / 2;
                    }
                    else {
                        tupletX += startGlyph.width / 2;
                    }
                    let tupletY = cy + this.y + this.height - this._tupletSize + res.effectFont.size * 0.5;
                    canvas.font = res.effectFont;
                    canvas.fillText(s, cx + this.x + tupletX, tupletY);
                }
            }
            else {
                let firstBeat = h.beats[0];
                let lastBeat = h.beats[h.beats.length - 1];
                let firstBeamingHelper = this.helpers.beamHelperLookup[h.voice.index].get(firstBeat.index);
                let lastBeamingHelper = this.helpers.beamHelperLookup[h.voice.index].get(lastBeat.index);
                if (firstBeamingHelper && lastBeamingHelper) {
                    //
                    // Calculate the overall area of the tuplet bracket
                    let startX = firstBeamingHelper.getBeatLineX(firstBeat);
                    let endX = lastBeamingHelper.getBeatLineX(lastBeat);
                    let startGlyph = this.getOnNotesGlyphForBeat(firstBeat);
                    let endGlyph = this.getOnNotesGlyphForBeat(firstBeat);
                    if (firstBeamingHelper.direction === BeamDirection.Up) {
                        startX -= startGlyph.width / 2;
                        endX -= endGlyph.width / 2;
                    }
                    else {
                        startX += startGlyph.width / 2;
                        endX += endGlyph.width / 2;
                    }
                    //
                    // Calculate how many space the text will need
                    canvas.font = res.effectFont;
                    let sw = canvas.measureText(s);
                    let sp = 3 * this.scale;
                    //
                    // Calculate the offsets where to break the bracket
                    let middleX = (startX + endX) / 2;
                    let offset1X = middleX - sw / 2 - sp;
                    let offset2X = middleX + sw / 2 + sp;
                    //
                    // calculate the y positions for our bracket
                    let startY = cy + this.y + this.height - this._tupletSize + res.effectFont.size * 0.5;
                    let offset = -res.effectFont.size * 0.25;
                    let size = -5 * this.scale;
                    //
                    // draw the bracket
                    canvas.beginPath();
                    canvas.moveTo(cx + this.x + startX, (startY - offset) | 0);
                    canvas.lineTo(cx + this.x + startX, (startY - offset - size) | 0);
                    canvas.lineTo(cx + this.x + offset1X, (startY - offset - size) | 0);
                    canvas.stroke();
                    canvas.beginPath();
                    canvas.moveTo(cx + this.x + offset2X, (startY - offset - size) | 0);
                    canvas.lineTo(cx + this.x + endX, (startY - offset - size) | 0);
                    canvas.lineTo(cx + this.x + endX, (startY - offset) | 0);
                    canvas.stroke();
                    //
                    // Draw the string
                    canvas.fillText(s, cx + this.x + middleX, startY);
                }
            }
            canvas.textAlign = oldAlign;
        }
        static paintSingleBar(canvas, x1, y1, x2, y2, size) {
            canvas.beginPath();
            canvas.moveTo(x1, y1);
            canvas.lineTo(x2, y2);
            canvas.lineTo(x2, y2 - size);
            canvas.lineTo(x1, y1 - size);
            canvas.closePath();
            canvas.fill();
        }
        paintFooter(cx, cy, canvas, h) {
            for (let beat of h.beats) {
                if (beat.graceType !== GraceType.None ||
                    beat.duration === Duration.Whole ||
                    beat.duration === Duration.DoubleWhole ||
                    beat.duration === Duration.QuadrupleWhole) {
                    return;
                }
                //
                // draw line
                //
                let beatLineX = h.getBeatLineX(beat);
                let y1 = cy + this.y;
                let y2 = cy + this.y + this.height - this._tupletSize;
                let startGlyph = this.getOnNotesGlyphForBeat(beat);
                if (!startGlyph.noteNumbers) {
                    y1 +=
                        this.height - this.settings.notation.rhythmHeight * this.settings.display.scale - this._tupletSize;
                }
                else {
                    y1 +=
                        startGlyph.noteNumbers.getNoteY(startGlyph.noteNumbers.minStringNote, false) + this.lineOffset / 2;
                }
                if (h.direction === BeamDirection.Up) {
                    beatLineX -= startGlyph.width / 2;
                }
                else {
                    beatLineX += startGlyph.width / 2;
                }
                canvas.beginPath();
                canvas.moveTo(cx + this.x + beatLineX, y1);
                canvas.lineTo(cx + this.x + beatLineX, y2);
                canvas.stroke();
                //
                // Draw beam
                //
                if (beat.duration > Duration.Quarter) {
                    let glyph = new BeamGlyph(0, 0, beat.duration, BeamDirection.Down, false);
                    glyph.renderer = this;
                    glyph.doLayout();
                    glyph.paint(cx + this.x + beatLineX, y2, canvas);
                }
            }
        }
    }
    TabBarRenderer.StaffId = 'tab';
    TabBarRenderer.LineSpacing = 10;

    /**
     * This Factory produces TabBarRenderer instances
     */
    class TabBarRendererFactory extends BarRendererFactory {
        constructor(showTimeSignature, showRests, showTiedNotes) {
            super();
            this._showTimeSignature = showTimeSignature;
            this._showRests = showRests;
            this._showTiedNotes = showTiedNotes;
            this.hideOnPercussionTrack = true;
        }
        get staffId() {
            return TabBarRenderer.StaffId;
        }
        canCreate(track, staff) {
            return staff.tuning.length > 0 && super.canCreate(track, staff);
        }
        create(renderer, bar) {
            let tabBarRenderer = new TabBarRenderer(renderer, bar);
            tabBarRenderer.showRests = this._showRests;
            tabBarRenderer.showTimeSignature = this._showTimeSignature;
            tabBarRenderer.showTiedNotes = this._showTiedNotes;
            return tabBarRenderer;
        }
    }

    class LayoutEngineFactory {
        constructor(vertical, createLayout) {
            this.vertical = vertical;
            this.createLayout = createLayout;
        }
    }
    class RenderEngineFactory {
        constructor(supportsWorkers, canvas) {
            this.supportsWorkers = supportsWorkers;
            this.createCanvas = canvas;
        }
    }
    /**
     * This public class represents the global alphaTab environment where
     * alphaTab looks for information like available layout engines
     * staves etc.
     * This public class represents the global alphaTab environment where
     * alphaTab looks for information like available layout engines
     * staves etc.
     * @partial
     */
    class Environment {
        /**
         * @target web
         */
        static createStyleElement(elementDocument, fontDirectory) {
            let styleElement = elementDocument.getElementById('alphaTabStyle');
            if (!styleElement) {
                if (!fontDirectory) {
                    Logger.error('AlphaTab', 'Font directory could not be detected, cannot create style element');
                    return;
                }
                styleElement = elementDocument.createElement('style');
                styleElement.id = 'alphaTabStyle';
                let css = `
            @font-face {
                font-family: 'alphaTab';
                 src: url('${fontDirectory}Bravura.eot');
                 src: url('${fontDirectory}Bravura.eot?#iefix') format('embedded-opentype')
                      , url('${fontDirectory}Bravura.woff') format('woff')
                      , url('${fontDirectory}Bravura.otf') format('opentype')
                      , url('${fontDirectory}Bravura.svg#Bravura') format('svg');
                 font-weight: normal;
                 font-style: normal;
            }
            .at-surface * {
                cursor: default;
                vertical-align: top;
            }
            .at {
                 font-family: 'alphaTab';
                 speak: none;
                 font-style: normal;
                 font-weight: normal;
                 font-variant: normal;
                 text-transform: none;
                 line-height: 1;
                 line-height: 1;
                 -webkit-font-smoothing: antialiased;
                 -moz-osx-font-smoothing: grayscale;
                 font-size: 34px;
                 overflow: visible !important;
            }`;
                styleElement.innerHTML = css;
                elementDocument.getElementsByTagName('head').item(0).appendChild(styleElement);
                Environment.bravuraFontChecker.checkForFontAvailability();
            }
        }
        /**
         * @target web
         */
        static detectScriptFile() {
            if (Platform.isRunningInWorker) {
                return null;
            }
            // try to build the find the alphaTab script url in case we are not in the webworker already
            let scriptElement = document.currentScript;
            let scriptFile = null;
            if (!scriptElement) {
                // try to get javascript from exception stack
                try {
                    let error = new Error();
                    let stack = error.stack;
                    if (!stack) {
                        throw error;
                    }
                    scriptFile = Environment.scriptFileFromStack(stack);
                }
                catch (e) {
                    if (e instanceof Error) {
                        let stack = e.stack;
                        if (!stack) {
                            scriptElement = document.querySelector('script[data-alphatab]');
                        }
                        else {
                            scriptFile = Environment.scriptFileFromStack(stack);
                        }
                    }
                    else {
                        throw e;
                    }
                }
            }
            // failed to automatically resolve
            if (!scriptFile) {
                if (!scriptElement) {
                    Logger.warning('Environment', 'Could not automatically find alphaTab script file for worker, please add the data-alphatab attribute to the script tag that includes alphaTab or provide it when initializing alphaTab', null);
                }
                else {
                    scriptFile = scriptElement.src;
                }
            }
            return scriptFile;
        }
        /**
         * @target web
         */
        static registerJQueryPlugin() {
            if (!Platform.isRunningInWorker && globalThis && 'jQuery' in globalThis) {
                let jquery = globalThis['jQuery'];
                let api = new JQueryAlphaTab();
                jquery.fn.alphaTab = function (method) {
                    const args = Array.prototype.slice.call(arguments, 1);
                    // if only a single element is affected, we use this
                    if (this.length === 1) {
                        return api.exec(this[0], method, args);
                    }
                    // if multiple elements are affected we provide chaining
                    return this.each((_i, e) => {
                        api.exec(e, method, args);
                    });
                };
                jquery.alphaTab = {
                    restore: JQueryAlphaTab.restore
                };
                jquery.fn.alphaTab.fn = api;
            }
        }
        /**
         * based on https://github.com/JamesMGreene/currentExecutingScript
         * @target web
         */
        static scriptFileFromStack(stack) {
            let matches = stack.match('(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?');
            if (!matches) {
                matches = stack.match('^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?');
                if (!matches) {
                    matches = stack.match('\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?');
                    if (!matches) {
                        return null;
                    }
                }
            }
            return matches[1];
        }
        static createScoreRenderer(settings) {
            return new ScoreRenderer(settings);
        }
        static getRenderEngineFactory(settings) {
            if (!settings.core.engine || !Environment.renderEngines.has(settings.core.engine)) {
                return Environment.renderEngines.get('default');
            }
            return Environment.renderEngines.get(settings.core.engine);
        }
        static getLayoutEngineFactory(settings) {
            if (!settings.display.layoutMode || !Environment.layoutEngines.has(settings.display.layoutMode)) {
                return Environment.layoutEngines.get(exports.LayoutMode.Page);
            }
            return Environment.layoutEngines.get(settings.display.layoutMode);
        }
        /**
         * Gets all default ScoreImporters
         * @returns
         */
        static buildImporters() {
            return [
                new Gp3To5Importer(),
                new GpxImporter(),
                new Gp7Importer(),
                new AlphaTexImporter(),
                new MusicXmlImporter()
            ];
        }
        static createDefaultRenderEngines() {
            const renderEngines = new Map();
            renderEngines.set('svg', new RenderEngineFactory(true, () => {
                return new CssFontSvgCanvas();
            }));
            Environment.createPlatformSpecificRenderEngines(renderEngines);
            renderEngines.set('default', renderEngines.get('svg'));
            return renderEngines;
        }
        /**
         * @target web
         */
        static createPlatformSpecificRenderEngines(renderEngines) {
            renderEngines.set('html5', new RenderEngineFactory(false, () => {
                return new Html5Canvas();
            }));
        }
        static createDefaultStaveProfiles() {
            const staveProfiles = new Map();
            // default combinations of stave textprofiles
            staveProfiles.set(exports.StaveProfile.ScoreTab, [
                new EffectBarRendererFactory('score-effects', [
                    new TempoEffectInfo(),
                    new TripletFeelEffectInfo(),
                    new MarkerEffectInfo(),
                    new TextEffectInfo(),
                    new ChordsEffectInfo(),
                    new FermataEffectInfo(),
                    new WhammyBarEffectInfo(),
                    new TrillEffectInfo(),
                    new OttaviaEffectInfo(true),
                    new WideBeatVibratoEffectInfo(),
                    new SlightBeatVibratoEffectInfo(),
                    new WideNoteVibratoEffectInfo(),
                    new SlightNoteVibratoEffectInfo(),
                    new AlternateEndingsEffectInfo()
                ]),
                new ScoreBarRendererFactory(),
                new EffectBarRendererFactory('tab-effects', [
                    new CrescendoEffectInfo(),
                    new OttaviaEffectInfo(false),
                    new DynamicsEffectInfo(),
                    new LyricsEffectInfo(),
                    new TrillEffectInfo(),
                    new WideBeatVibratoEffectInfo(),
                    new SlightBeatVibratoEffectInfo(),
                    new WideNoteVibratoEffectInfo(),
                    new SlightNoteVibratoEffectInfo(),
                    new TapEffectInfo(),
                    new FadeInEffectInfo(),
                    new HarmonicsEffectInfo(HarmonicType.Natural),
                    new HarmonicsEffectInfo(HarmonicType.Artificial),
                    new HarmonicsEffectInfo(HarmonicType.Pinch),
                    new HarmonicsEffectInfo(HarmonicType.Tap),
                    new HarmonicsEffectInfo(HarmonicType.Semi),
                    new HarmonicsEffectInfo(HarmonicType.Feedback),
                    new LetRingEffectInfo(),
                    new CapoEffectInfo(),
                    new FingeringEffectInfo(),
                    new PalmMuteEffectInfo(),
                    new PickStrokeEffectInfo(),
                    new PickSlideEffectInfo()
                ]),
                new TabBarRendererFactory(false, false, false)
            ]);
            staveProfiles.set(exports.StaveProfile.Score, [
                new EffectBarRendererFactory('score-effects', [
                    new TempoEffectInfo(),
                    new TripletFeelEffectInfo(),
                    new MarkerEffectInfo(),
                    new TextEffectInfo(),
                    new ChordsEffectInfo(),
                    new FermataEffectInfo(),
                    new WhammyBarEffectInfo(),
                    new TrillEffectInfo(),
                    new OttaviaEffectInfo(true),
                    new WideBeatVibratoEffectInfo(),
                    new SlightBeatVibratoEffectInfo(),
                    new WideNoteVibratoEffectInfo(),
                    new SlightNoteVibratoEffectInfo(),
                    new FadeInEffectInfo(),
                    new LetRingEffectInfo(),
                    new PalmMuteEffectInfo(),
                    new PickStrokeEffectInfo(),
                    new PickSlideEffectInfo(),
                    new AlternateEndingsEffectInfo()
                ]),
                new ScoreBarRendererFactory(),
                new EffectBarRendererFactory('score-bottom-effects', [
                    new CrescendoEffectInfo(),
                    new OttaviaEffectInfo(false),
                    new DynamicsEffectInfo(),
                    new LyricsEffectInfo()
                ])
            ]);
            let tabEffectInfos = [
                new TempoEffectInfo(),
                new TripletFeelEffectInfo(),
                new MarkerEffectInfo(),
                new TextEffectInfo(),
                new ChordsEffectInfo(),
                new FermataEffectInfo(),
                new TrillEffectInfo(),
                new WideBeatVibratoEffectInfo(),
                new SlightBeatVibratoEffectInfo(),
                new WideNoteVibratoEffectInfo(),
                new SlightNoteVibratoEffectInfo(),
                new TapEffectInfo(),
                new FadeInEffectInfo(),
                new HarmonicsEffectInfo(HarmonicType.Artificial),
                new HarmonicsEffectInfo(HarmonicType.Pinch),
                new HarmonicsEffectInfo(HarmonicType.Tap),
                new HarmonicsEffectInfo(HarmonicType.Semi),
                new HarmonicsEffectInfo(HarmonicType.Feedback),
                new LetRingEffectInfo(),
                new CapoEffectInfo(),
                new FingeringEffectInfo(),
                new PalmMuteEffectInfo(),
                new PickStrokeEffectInfo(),
                new PickSlideEffectInfo(),
                new AlternateEndingsEffectInfo()
            ];
            staveProfiles.set(exports.StaveProfile.Tab, [
                new EffectBarRendererFactory('tab-effects', tabEffectInfos),
                new TabBarRendererFactory(true, true, true),
                new EffectBarRendererFactory('tab-bottom-effects', [new LyricsEffectInfo()])
            ]);
            staveProfiles.set(exports.StaveProfile.TabMixed, [
                new EffectBarRendererFactory('tab-effects', tabEffectInfos),
                new TabBarRendererFactory(false, false, false),
                new EffectBarRendererFactory('tab-bottom-effects', [new LyricsEffectInfo()])
            ]);
            return staveProfiles;
        }
        static createDefaultLayoutEngines() {
            const engines = new Map();
            // default layout engines
            engines.set(exports.LayoutMode.Page, new LayoutEngineFactory(true, r => {
                return new PageViewLayout(r);
            }));
            engines.set(exports.LayoutMode.Horizontal, new LayoutEngineFactory(false, r => {
                return new HorizontalScreenLayout(r);
            }));
            return engines;
        }
        /**
         * @target web
         */
        static platformInit() {
            Environment.registerJQueryPlugin();
            // polyfills
            Math.log2 = Math.log2
                ? Math.log2
                : function (x) {
                    return Math.log(x) * Math.LOG2E;
                };
            if (!Platform.isRunningInWorker) {
                let vbAjaxLoader = '';
                vbAjaxLoader += 'Function VbAjaxLoader(method, fileName)' + '\r\n';
                vbAjaxLoader += '    Dim xhr' + '\r\n';
                vbAjaxLoader += '    Set xhr = CreateObject("Microsoft.XMLHTTP")' + '\r\n';
                vbAjaxLoader += '    xhr.Open method, fileName, False' + '\r\n';
                vbAjaxLoader += '    xhr.setRequestHeader "Accept-Charset", "x-user-defined"' + '\r\n';
                vbAjaxLoader += '    xhr.send' + '\r\n';
                vbAjaxLoader += '    Dim byteArray()' + '\r\n';
                vbAjaxLoader += '    if xhr.Status = 200 Then' + '\r\n';
                vbAjaxLoader += '        Dim byteString' + '\r\n';
                vbAjaxLoader += '        Dim i' + '\r\n';
                vbAjaxLoader += '        byteString=xhr.responseBody' + '\r\n';
                vbAjaxLoader += '        ReDim byteArray(LenB(byteString))' + '\r\n';
                vbAjaxLoader += '        For i = 1 To LenB(byteString)' + '\r\n';
                vbAjaxLoader += '            byteArray(i-1) = AscB(MidB(byteString, i, 1))' + '\r\n';
                vbAjaxLoader += '        Next' + '\r\n';
                vbAjaxLoader += '    End If' + '\r\n';
                vbAjaxLoader += '    VbAjaxLoader=byteArray' + '\r\n';
                vbAjaxLoader += 'End Function' + '\r\n';
                let vbAjaxLoaderScript = document.createElement('script');
                vbAjaxLoaderScript.setAttribute('type', 'text/vbscript');
                let inlineScript = document.createTextNode(vbAjaxLoader);
                vbAjaxLoaderScript.appendChild(inlineScript);
                document.addEventListener('DOMContentLoaded', () => {
                    document.body.appendChild(vbAjaxLoaderScript);
                }, false);
            }
            else {
                AlphaTabWebWorker.init();
                AlphaSynthWebWorker.init();
            }
        }
    }
    /**
     * @target web
     */
    Environment.scriptFile = Environment.detectScriptFile();
    /**
     * @target web
     */
    Environment.bravuraFontChecker = new FontLoadingChecker('alphaTab', `&#${MusicFontSymbol.ClefG};`);
    Environment.renderEngines = Environment.createDefaultRenderEngines();
    Environment.layoutEngines = Environment.createDefaultLayoutEngines();
    Environment.staveProfiles = Environment.createDefaultStaveProfiles();
    Environment.platformInit();

    /**
     * @json
     */
    class CoreSettings {
        /**
         * @target web
         */
        constructor() {
            /**
             * Gets or sets the script file url that will be used to spawn the workers.
             * @target web
             */
            this.scriptFile = null;
            /**
             * Gets or sets the url to the fonts that will be used to generate the alphaTab font style.
             * @target web
             */
            this.fontDirectory = null;
            /**
             * Gets or sets whether lazy loading for displayed elements is enabled.
             */
            this.enableLazyLoading = true;
            /**
             * The engine which should be used to render the the tablature.
             *
             * - **default**- Platform specific default engine
             * - **html5**- HTML5 Canvas
             * - **svg**- SVG
             */
            this.engine = 'default';
            /**
             * The log level to use within alphaTab
             */
            this.logLevel = LogLevel.Info;
            /**
             * Gets or sets whether the rendering should be done in a worker if possible.
             */
            this.useWorkers = true;
            /**
             * Gets or sets whether in the {@link BoundsLookup} also the
             * position and area of each individual note is provided.
             */
            this.includeNoteBounds = false;
            if (!Platform.isRunningInWorker && globalThis.ALPHATAB_ROOT) {
                this.scriptFile = globalThis.ALPHATAB_ROOT;
                this.scriptFile = CoreSettings.ensureFullUrl(this.scriptFile);
                this.scriptFile = CoreSettings.appendScriptName(this.scriptFile);
            }
            else {
                this.scriptFile = Environment.scriptFile;
            }
            if (!Platform.isRunningInWorker && globalThis.ALPHATAB_FONT) {
                this.fontDirectory = globalThis['ALPHATAB_FONT'];
                this.fontDirectory = CoreSettings.ensureFullUrl(this.fontDirectory);
            }
            else {
                this.fontDirectory = this.scriptFile;
                if (this.fontDirectory) {
                    let lastSlash = this.fontDirectory.lastIndexOf(String.fromCharCode(47));
                    if (lastSlash >= 0) {
                        this.fontDirectory = this.fontDirectory.substr(0, lastSlash) + '/font/';
                    }
                }
            }
        }
        /**
         * @target web
         */
        static ensureFullUrl(relativeUrl) {
            var _a, _b, _c, _d, _e, _f, _g;
            if (!relativeUrl) {
                return '';
            }
            let global = globalThis;
            if (!relativeUrl.startsWith('http') && !relativeUrl.startsWith('https') && !relativeUrl.startsWith('file')) {
                let root = '';
                let location = global['location'];
                root += (_a = location.protocol) === null || _a === void 0 ? void 0 : _a.toString();
                root += (_b = '//') === null || _b === void 0 ? void 0 : _b.toString();
                if (location.hostname) {
                    root += (_c = location.hostname) === null || _c === void 0 ? void 0 : _c.toString();
                }
                if (location.port) {
                    root += (_d = ':') === null || _d === void 0 ? void 0 : _d.toString();
                    root += (_e = location.port) === null || _e === void 0 ? void 0 : _e.toString();
                }
                // as it is not clearly defined how slashes are treated in the location object
                // better be safe than sorry here
                if (!relativeUrl.startsWith('/')) {
                    let directory = location.pathname.split('/').slice(0, -1).join('/');
                    if (directory.length > 0) {
                        if (!directory.startsWith('/')) {
                            root += (_f = '/') === null || _f === void 0 ? void 0 : _f.toString();
                        }
                        root += directory === null || directory === void 0 ? void 0 : directory.toString();
                    }
                }
                if (!relativeUrl.startsWith('/')) {
                    root += (_g = '/') === null || _g === void 0 ? void 0 : _g.toString();
                }
                root += relativeUrl === null || relativeUrl === void 0 ? void 0 : relativeUrl.toString();
                return root;
            }
            return relativeUrl;
        }
        static appendScriptName(url) {
            // append script name
            if (url && !url.endsWith('.js')) {
                if (!url.endsWith('/')) {
                    url += '/';
                }
                url += 'alphaTab.js';
            }
            return url;
        }
        static toJson(obj) { var json = {}; obj.fillToJson(json); return json; }
        fillToJson(json) { json.scriptFile = this.scriptFile; json.fontDirectory = this.fontDirectory; json.enableLazyLoading = this.enableLazyLoading; json.engine = this.engine; json.logLevel = this.logLevel; json.useWorkers = this.useWorkers; json.includeNoteBounds = this.includeNoteBounds; }
        static fromJson(json) { if (!json)
            return null; var obj = new CoreSettings(); obj.fillFromJson(json); return obj; }
        fillFromJson(json) { if (json)
            for (const $k in json)
                this.setProperty($k.toLowerCase(), json[$k]); }
        setProperty(property, value) { switch (property) {
            case "scriptfile":
                this.scriptFile = value;
                return true;
            case "fontdirectory":
                this.fontDirectory = value;
                return true;
            case "enablelazyloading":
                this.enableLazyLoading = value;
                return true;
            case "engine":
                this.engine = value;
                return true;
            case "loglevel":
                this.logLevel = typeof value === "string" ? LogLevel[Object.keys(LogLevel).find($k => $k.toLowerCase() === value.toLowerCase())] : value;
                return true;
            case "useworkers":
                this.useWorkers = value;
                return true;
            case "includenotebounds":
                this.includeNoteBounds = value;
                return true;
        } return false; }
    }

    const midi = {
        MidiFile,
        event: {
            ControllerType,
            MetaDataEvent,
            MetaEvent,
            MetaNumberEvent,
            MidiEvent,
            SystemCommonEvent,
            SystemExclusiveEvent
        },
        generator: {
            MidiFileGenerator
        },
    };
    const synth = {
        PlaybackRange,
        PlayerStateChangedEventArgs,
        PositionChangedEventArgs
    };
    const audio = {
        midi,
        synth
    };
    const importer = {
        ScoreLoader
    };
    const model = {
        AccentuationType,
        AccidentalType,
        Automation,
        AutomationType,
        Bar,
        Beat,
        BendPoint,
        BendStyle,
        BendType,
        BrushType,
        Chord,
        Clef,
        Color,
        CrescendoType,
        Duration,
        DynamicValue,
        Fermata,
        FermataType,
        Fingers,
        Font,
        FontStyle,
        GraceType,
        HarmonicType,
        JsonConverter,
        KeySignature,
        KeySignatureType,
        Lyrics,
        MasterBar,
        Note,
        NoteAccidentalMode,
        Ottavia,
        PickStroke,
        PlaybackInformation,
        RenderStylesheet,
        RepeatGroup,
        Score,
        Section,
        SimileMark,
        SlideInType,
        SlideOutType,
        Staff,
        Track,
        TripletFeel,
        Tuning,
        TupletGroup,
        VibratoType,
        Voice,
        WhammyType
    };
    const platform = {
        javaScript: {
            AlphaTabApi
        }
    };

    exports.ArgumentError = ArgumentError;
    exports.ArgumentNullError = ArgumentNullError;
    exports.CoreSettings = CoreSettings;
    exports.DisplaySettings = DisplaySettings;
    exports.Environment = Environment;
    exports.FileLoadError = FileLoadError;
    exports.FormatError = FormatError;
    exports.ImporterSettings = ImporterSettings;
    exports.NoImporterFoundError = NoImporterFoundError;
    exports.NotationSettings = NotationSettings;
    exports.PlayerSettings = PlayerSettings;
    exports.ProgressEventArgs = ProgressEventArgs;
    exports.RenderingResources = RenderingResources;
    exports.ResizeEventArgs = ResizeEventArgs;
    exports.SelectionInfo = SelectionInfo;
    exports.Settings = Settings;
    exports.VibratoPlaybackSettings = VibratoPlaybackSettings;
    exports.audio = audio;
    exports.importer = importer;
    exports.model = model;
    exports.platform = platform;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
